
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ce8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e18  08002e18  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e18  08002e18  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e18  08002e18  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e18  08002e18  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002e20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000006c  08002e8c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002e8c  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000096a0  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b29  00000000  00000000  00029735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002b260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002bcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d4a  00000000  00000000  0002c620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bce2  00000000  00000000  0004336a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824e1  00000000  00000000  0004f04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d152d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028e4  00000000  00000000  000d1580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ddc 	.word	0x08002ddc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002ddc 	.word	0x08002ddc

0800014c <isButton1Pressed>:
int keyReg10 = NORMAL_STATE;
int keyReg11 = NORMAL_STATE;

int TimerForKeyPress = 200;

int isButton1Pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (index == 1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d108      	bne.n	800016c <isButton1Pressed+0x20>
		if(button1_flag == 1){
 800015a:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <isButton1Pressed+0x5c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d104      	bne.n	800016c <isButton1Pressed+0x20>
			button1_flag = 0;
 8000162:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <isButton1Pressed+0x5c>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
			return 1;
 8000168:	2301      	movs	r3, #1
 800016a:	e018      	b.n	800019e <isButton1Pressed+0x52>
		}
	}
	if(index == 2){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d108      	bne.n	8000184 <isButton1Pressed+0x38>
		if(button2_flag == 1){
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <isButton1Pressed+0x60>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d104      	bne.n	8000184 <isButton1Pressed+0x38>
			button2_flag = 0;
 800017a:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <isButton1Pressed+0x60>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
			return 1;
 8000180:	2301      	movs	r3, #1
 8000182:	e00c      	b.n	800019e <isButton1Pressed+0x52>
		}
	}
	if(index == 3){
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b03      	cmp	r3, #3
 8000188:	d108      	bne.n	800019c <isButton1Pressed+0x50>
		if(button3_flag == 1){
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <isButton1Pressed+0x64>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d104      	bne.n	800019c <isButton1Pressed+0x50>
			button3_flag = 0;
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <isButton1Pressed+0x64>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
			return 1;
 8000198:	2301      	movs	r3, #1
 800019a:	e000      	b.n	800019e <isButton1Pressed+0x52>
		}
	}

	return 0;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000088 	.word	0x20000088
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	20000090 	.word	0x20000090

080001b4 <subKeyProcess1>:

void subKeyProcess1(){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <subKeyProcess1+0x14>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000088 	.word	0x20000088

080001cc <subKeyProcess2>:
void subKeyProcess2(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <subKeyProcess2+0x14>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	2000008c 	.word	0x2000008c

080001e4 <subKeyProcess3>:
void subKeyProcess3(){
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <subKeyProcess3+0x14>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000090 	.word	0x20000090

080001fc <getKeyInput>:
void getKeyInput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	//button 1
	keyReg0 = keyReg1;
 8000200:	4b5c      	ldr	r3, [pc, #368]	; (8000374 <getKeyInput+0x178>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a5c      	ldr	r2, [pc, #368]	; (8000378 <getKeyInput+0x17c>)
 8000206:	6013      	str	r3, [r2, #0]
	keyReg1 = keyReg2;
 8000208:	4b5c      	ldr	r3, [pc, #368]	; (800037c <getKeyInput+0x180>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a59      	ldr	r2, [pc, #356]	; (8000374 <getKeyInput+0x178>)
 800020e:	6013      	str	r3, [r2, #0]
	keyReg2 = HAL_GPIO_ReadPin(MODE_GPIO_Port,MODE_Pin);
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	485a      	ldr	r0, [pc, #360]	; (8000380 <getKeyInput+0x184>)
 8000216:	f001 fda9 	bl	8001d6c <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b57      	ldr	r3, [pc, #348]	; (800037c <getKeyInput+0x180>)
 8000220:	601a      	str	r2, [r3, #0]
	if((keyReg0 == keyReg1) && (keyReg1 == keyReg2)){
 8000222:	4b55      	ldr	r3, [pc, #340]	; (8000378 <getKeyInput+0x17c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b53      	ldr	r3, [pc, #332]	; (8000374 <getKeyInput+0x178>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	429a      	cmp	r2, r3
 800022c:	d125      	bne.n	800027a <getKeyInput+0x7e>
 800022e:	4b51      	ldr	r3, [pc, #324]	; (8000374 <getKeyInput+0x178>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b52      	ldr	r3, [pc, #328]	; (800037c <getKeyInput+0x180>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	429a      	cmp	r2, r3
 8000238:	d11f      	bne.n	800027a <getKeyInput+0x7e>
		if(keyReg3 != keyReg2) {// nhan tha
 800023a:	4b52      	ldr	r3, [pc, #328]	; (8000384 <getKeyInput+0x188>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b4f      	ldr	r3, [pc, #316]	; (800037c <getKeyInput+0x180>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d00d      	beq.n	8000262 <getKeyInput+0x66>
			keyReg3 = keyReg2;
 8000246:	4b4d      	ldr	r3, [pc, #308]	; (800037c <getKeyInput+0x180>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a4e      	ldr	r2, [pc, #312]	; (8000384 <getKeyInput+0x188>)
 800024c:	6013      	str	r3, [r2, #0]
			if(keyReg2 == PRESSED_STATE){
 800024e:	4b4b      	ldr	r3, [pc, #300]	; (800037c <getKeyInput+0x180>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d111      	bne.n	800027a <getKeyInput+0x7e>
				//TODO
				subKeyProcess1();
 8000256:	f7ff ffad 	bl	80001b4 <subKeyProcess1>
				TimerForKeyPress = 200;
 800025a:	4b4b      	ldr	r3, [pc, #300]	; (8000388 <getKeyInput+0x18c>)
 800025c:	22c8      	movs	r2, #200	; 0xc8
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	e00b      	b.n	800027a <getKeyInput+0x7e>
			}
		}
		else{ // nhan de
			TimerForKeyPress--;
 8000262:	4b49      	ldr	r3, [pc, #292]	; (8000388 <getKeyInput+0x18c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	4a47      	ldr	r2, [pc, #284]	; (8000388 <getKeyInput+0x18c>)
 800026a:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 800026c:	4b46      	ldr	r3, [pc, #280]	; (8000388 <getKeyInput+0x18c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x7e>
				keyReg3 = NORMAL_STATE;
 8000274:	4b43      	ldr	r3, [pc, #268]	; (8000384 <getKeyInput+0x188>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//button 2
	keyReg4 = keyReg5;
 800027a:	4b44      	ldr	r3, [pc, #272]	; (800038c <getKeyInput+0x190>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a44      	ldr	r2, [pc, #272]	; (8000390 <getKeyInput+0x194>)
 8000280:	6013      	str	r3, [r2, #0]
	keyReg5 = keyReg6;
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <getKeyInput+0x198>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a41      	ldr	r2, [pc, #260]	; (800038c <getKeyInput+0x190>)
 8000288:	6013      	str	r3, [r2, #0]
	keyReg6 = HAL_GPIO_ReadPin(ADD_GPIO_Port,ADD_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	483c      	ldr	r0, [pc, #240]	; (8000380 <getKeyInput+0x184>)
 8000290:	f001 fd6c 	bl	8001d6c <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b3e      	ldr	r3, [pc, #248]	; (8000394 <getKeyInput+0x198>)
 800029a:	601a      	str	r2, [r3, #0]
	if((keyReg4 == keyReg5) && (keyReg5 == keyReg6)){
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <getKeyInput+0x194>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <getKeyInput+0x190>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d125      	bne.n	80002f4 <getKeyInput+0xf8>
 80002a8:	4b38      	ldr	r3, [pc, #224]	; (800038c <getKeyInput+0x190>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b39      	ldr	r3, [pc, #228]	; (8000394 <getKeyInput+0x198>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d11f      	bne.n	80002f4 <getKeyInput+0xf8>
		if(keyReg7 != keyReg6) {// nhan tha
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <getKeyInput+0x19c>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b36      	ldr	r3, [pc, #216]	; (8000394 <getKeyInput+0x198>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d00d      	beq.n	80002dc <getKeyInput+0xe0>
			keyReg7 = keyReg6;
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <getKeyInput+0x198>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a34      	ldr	r2, [pc, #208]	; (8000398 <getKeyInput+0x19c>)
 80002c6:	6013      	str	r3, [r2, #0]
			if(keyReg6 == PRESSED_STATE){
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <getKeyInput+0x198>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d111      	bne.n	80002f4 <getKeyInput+0xf8>
				//TODO
				subKeyProcess2();
 80002d0:	f7ff ff7c 	bl	80001cc <subKeyProcess2>
				TimerForKeyPress = 200;
 80002d4:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <getKeyInput+0x18c>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e00b      	b.n	80002f4 <getKeyInput+0xf8>
			}
		}
		else{ // nhan de
			TimerForKeyPress--;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <getKeyInput+0x18c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a29      	ldr	r2, [pc, #164]	; (8000388 <getKeyInput+0x18c>)
 80002e4:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80002e6:	4b28      	ldr	r3, [pc, #160]	; (8000388 <getKeyInput+0x18c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0xf8>
				keyReg7 = NORMAL_STATE;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <getKeyInput+0x19c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//button 3
	keyReg8 = keyReg9;
 80002f4:	4b29      	ldr	r3, [pc, #164]	; (800039c <getKeyInput+0x1a0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a29      	ldr	r2, [pc, #164]	; (80003a0 <getKeyInput+0x1a4>)
 80002fa:	6013      	str	r3, [r2, #0]
	keyReg9 = keyReg10;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <getKeyInput+0x1a8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <getKeyInput+0x1a0>)
 8000302:	6013      	str	r3, [r2, #0]
	keyReg10 = HAL_GPIO_ReadPin(SET_GPIO_Port,SET_Pin);
 8000304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getKeyInput+0x184>)
 800030a:	f001 fd2f 	bl	8001d6c <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <getKeyInput+0x1a8>)
 8000314:	601a      	str	r2, [r3, #0]
	if((keyReg8 == keyReg9) && (keyReg9 == keyReg10)){
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <getKeyInput+0x1a4>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <getKeyInput+0x1a0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	d125      	bne.n	800036e <getKeyInput+0x172>
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <getKeyInput+0x1a0>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d11f      	bne.n	800036e <getKeyInput+0x172>
		if(keyReg11 != keyReg10) {// nhan tha
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <getKeyInput+0x1ac>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <getKeyInput+0x1a8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d00d      	beq.n	8000356 <getKeyInput+0x15a>
			keyReg11 = keyReg10;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <getKeyInput+0x1a8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <getKeyInput+0x1ac>)
 8000340:	6013      	str	r3, [r2, #0]
			if(keyReg10 == PRESSED_STATE){
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <getKeyInput+0x1a8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d111      	bne.n	800036e <getKeyInput+0x172>
				//TODO
				subKeyProcess3();
 800034a:	f7ff ff4b 	bl	80001e4 <subKeyProcess3>
				TimerForKeyPress = 200;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <getKeyInput+0x18c>)
 8000350:	22c8      	movs	r2, #200	; 0xc8
 8000352:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				keyReg11 = NORMAL_STATE;
			}
		}
	}
}
 8000354:	e00b      	b.n	800036e <getKeyInput+0x172>
			TimerForKeyPress--;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <getKeyInput+0x18c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <getKeyInput+0x18c>)
 800035e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <getKeyInput+0x18c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <getKeyInput+0x172>
				keyReg11 = NORMAL_STATE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <getKeyInput+0x1ac>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000004 	.word	0x20000004
 8000378:	20000000 	.word	0x20000000
 800037c:	20000008 	.word	0x20000008
 8000380:	40010800 	.word	0x40010800
 8000384:	2000000c 	.word	0x2000000c
 8000388:	20000030 	.word	0x20000030
 800038c:	20000014 	.word	0x20000014
 8000390:	20000010 	.word	0x20000010
 8000394:	20000018 	.word	0x20000018
 8000398:	2000001c 	.word	0x2000001c
 800039c:	20000024 	.word	0x20000024
 80003a0:	20000020 	.word	0x20000020
 80003a4:	20000028 	.word	0x20000028
 80003a8:	2000002c 	.word	0x2000002c

080003ac <fsm_automatic_run>:

#include "fsm_auto.h"
#include "fsm_manual.h"
#include "led.h"

void fsm_automatic_run() {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
		switch(status){
 80003b0:	4bac      	ldr	r3, [pc, #688]	; (8000664 <fsm_automatic_run+0x2b8>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	3b01      	subs	r3, #1
 80003b6:	2b04      	cmp	r3, #4
 80003b8:	f200 8118 	bhi.w	80005ec <fsm_automatic_run+0x240>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <fsm_automatic_run+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003d9 	.word	0x080003d9
 80003c8:	08000439 	.word	0x08000439
 80003cc:	080004b5 	.word	0x080004b5
 80003d0:	0800051d 	.word	0x0800051d
 80003d4:	08000585 	.word	0x08000585
		case INIT:
			//todo
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 80003d8:	2201      	movs	r2, #1
 80003da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003de:	48a2      	ldr	r0, [pc, #648]	; (8000668 <fsm_automatic_run+0x2bc>)
 80003e0:	f001 fcdb 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ea:	489f      	ldr	r0, [pc, #636]	; (8000668 <fsm_automatic_run+0x2bc>)
 80003ec:	f001 fcd5 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80003f0:	2201      	movs	r2, #1
 80003f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003f6:	489c      	ldr	r0, [pc, #624]	; (8000668 <fsm_automatic_run+0x2bc>)
 80003f8:	f001 fccf 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000402:	4899      	ldr	r0, [pc, #612]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000404:	f001 fcc9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800040e:	4896      	ldr	r0, [pc, #600]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000410:	f001 fcc3 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000414:	2201      	movs	r2, #1
 8000416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800041a:	4893      	ldr	r0, [pc, #588]	; (8000668 <fsm_automatic_run+0x2bc>)
 800041c:	f001 fcbd 	bl	8001d9a <HAL_GPIO_WritePin>
			status = AUTO_RED_GREEN;
 8000420:	4b90      	ldr	r3, [pc, #576]	; (8000664 <fsm_automatic_run+0x2b8>)
 8000422:	2202      	movs	r2, #2
 8000424:	601a      	str	r2, [r3, #0]
			setTimer1(arr[TIME_FOR_RED_GREEN]*100); //3s
 8000426:	4b91      	ldr	r3, [pc, #580]	; (800066c <fsm_automatic_run+0x2c0>)
 8000428:	685b      	ldr	r3, [r3, #4]
 800042a:	2264      	movs	r2, #100	; 0x64
 800042c:	fb02 f303 	mul.w	r3, r2, r3
 8000430:	4618      	mov	r0, r3
 8000432:	f001 f843 	bl	80014bc <setTimer1>
			break;
 8000436:	e0e2      	b.n	80005fe <fsm_automatic_run+0x252>
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800043e:	488a      	ldr	r0, [pc, #552]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000440:	f001 fcab 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 7100 	mov.w	r1, #512	; 0x200
 800044a:	4887      	ldr	r0, [pc, #540]	; (8000668 <fsm_automatic_run+0x2bc>)
 800044c:	f001 fca5 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000456:	4884      	ldr	r0, [pc, #528]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000458:	f001 fc9f 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 800045c:	2201      	movs	r2, #1
 800045e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000462:	4881      	ldr	r0, [pc, #516]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000464:	f001 fc99 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000468:	2201      	movs	r2, #1
 800046a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800046e:	487e      	ldr	r0, [pc, #504]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000470:	f001 fc93 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047a:	487b      	ldr	r0, [pc, #492]	; (8000668 <fsm_automatic_run+0x2bc>)
 800047c:	f001 fc8d 	bl	8001d9a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000480:	4b7b      	ldr	r3, [pc, #492]	; (8000670 <fsm_automatic_run+0x2c4>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d10a      	bne.n	800049e <fsm_automatic_run+0xf2>
				status = AUTO_RED_AMBER;
 8000488:	4b76      	ldr	r3, [pc, #472]	; (8000664 <fsm_automatic_run+0x2b8>)
 800048a:	2203      	movs	r2, #3
 800048c:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_RED_AMBER]*100); //2s
 800048e:	4b77      	ldr	r3, [pc, #476]	; (800066c <fsm_automatic_run+0x2c0>)
 8000490:	689b      	ldr	r3, [r3, #8]
 8000492:	2264      	movs	r2, #100	; 0x64
 8000494:	fb02 f303 	mul.w	r3, r2, r3
 8000498:	4618      	mov	r0, r3
 800049a:	f001 f80f 	bl	80014bc <setTimer1>
			}
			if(isButton1Pressed(BUTTON1) == 1){
 800049e:	2001      	movs	r0, #1
 80004a0:	f7ff fe54 	bl	800014c <isButton1Pressed>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b01      	cmp	r3, #1
 80004a8:	f040 80a2 	bne.w	80005f0 <fsm_automatic_run+0x244>
				status = MAN_RED;
 80004ac:	4b6d      	ldr	r3, [pc, #436]	; (8000664 <fsm_automatic_run+0x2b8>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	601a      	str	r2, [r3, #0]
			}
			break;
 80004b2:	e09d      	b.n	80005f0 <fsm_automatic_run+0x244>
		case AUTO_RED_AMBER:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	486b      	ldr	r0, [pc, #428]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004bc:	f001 fc6d 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 80004c0:	2201      	movs	r2, #1
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4868      	ldr	r0, [pc, #416]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004c8:	f001 fc67 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004d2:	4865      	ldr	r0, [pc, #404]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004d4:	f001 fc61 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004de:	4862      	ldr	r0, [pc, #392]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004e0:	f001 fc5b 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004ea:	485f      	ldr	r0, [pc, #380]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004ec:	f001 fc55 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f6:	485c      	ldr	r0, [pc, #368]	; (8000668 <fsm_automatic_run+0x2bc>)
 80004f8:	f001 fc4f 	bl	8001d9a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 80004fc:	4b5c      	ldr	r3, [pc, #368]	; (8000670 <fsm_automatic_run+0x2c4>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	2b01      	cmp	r3, #1
 8000502:	d177      	bne.n	80005f4 <fsm_automatic_run+0x248>
				status = AUTO_GREEN_RED;
 8000504:	4b57      	ldr	r3, [pc, #348]	; (8000664 <fsm_automatic_run+0x2b8>)
 8000506:	2204      	movs	r2, #4
 8000508:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_GREEN_RED]*100); //3s
 800050a:	4b58      	ldr	r3, [pc, #352]	; (800066c <fsm_automatic_run+0x2c0>)
 800050c:	685b      	ldr	r3, [r3, #4]
 800050e:	2264      	movs	r2, #100	; 0x64
 8000510:	fb02 f303 	mul.w	r3, r2, r3
 8000514:	4618      	mov	r0, r3
 8000516:	f000 ffd1 	bl	80014bc <setTimer1>
			}
			break;
 800051a:	e06b      	b.n	80005f4 <fsm_automatic_run+0x248>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000522:	4851      	ldr	r0, [pc, #324]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000524:	f001 fc39 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800052e:	484e      	ldr	r0, [pc, #312]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000530:	f001 fc33 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800053a:	484b      	ldr	r0, [pc, #300]	; (8000668 <fsm_automatic_run+0x2bc>)
 800053c:	f001 fc2d 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000546:	4848      	ldr	r0, [pc, #288]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000548:	f001 fc27 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000552:	4845      	ldr	r0, [pc, #276]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000554:	f001 fc21 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000558:	2201      	movs	r2, #1
 800055a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800055e:	4842      	ldr	r0, [pc, #264]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000560:	f001 fc1b 	bl	8001d9a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000564:	4b42      	ldr	r3, [pc, #264]	; (8000670 <fsm_automatic_run+0x2c4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d145      	bne.n	80005f8 <fsm_automatic_run+0x24c>
				status = AUTO_AMBER_RED;
 800056c:	4b3d      	ldr	r3, [pc, #244]	; (8000664 <fsm_automatic_run+0x2b8>)
 800056e:	2205      	movs	r2, #5
 8000570:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_AMBER_RED]*100);
 8000572:	4b3e      	ldr	r3, [pc, #248]	; (800066c <fsm_automatic_run+0x2c0>)
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	2264      	movs	r2, #100	; 0x64
 8000578:	fb02 f303 	mul.w	r3, r2, r3
 800057c:	4618      	mov	r0, r3
 800057e:	f000 ff9d 	bl	80014bc <setTimer1>
			}
			break;
 8000582:	e039      	b.n	80005f8 <fsm_automatic_run+0x24c>
		case AUTO_AMBER_RED:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800058a:	4837      	ldr	r0, [pc, #220]	; (8000668 <fsm_automatic_run+0x2bc>)
 800058c:	f001 fc05 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	4834      	ldr	r0, [pc, #208]	; (8000668 <fsm_automatic_run+0x2bc>)
 8000598:	f001 fbff 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	4831      	ldr	r0, [pc, #196]	; (8000668 <fsm_automatic_run+0x2bc>)
 80005a4:	f001 fbf9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	482e      	ldr	r0, [pc, #184]	; (8000668 <fsm_automatic_run+0x2bc>)
 80005b0:	f001 fbf3 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	482b      	ldr	r0, [pc, #172]	; (8000668 <fsm_automatic_run+0x2bc>)
 80005bc:	f001 fbed 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4828      	ldr	r0, [pc, #160]	; (8000668 <fsm_automatic_run+0x2bc>)
 80005c8:	f001 fbe7 	bl	8001d9a <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 80005cc:	4b28      	ldr	r3, [pc, #160]	; (8000670 <fsm_automatic_run+0x2c4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2b01      	cmp	r3, #1
 80005d2:	d113      	bne.n	80005fc <fsm_automatic_run+0x250>
				status = AUTO_RED_GREEN;
 80005d4:	4b23      	ldr	r3, [pc, #140]	; (8000664 <fsm_automatic_run+0x2b8>)
 80005d6:	2202      	movs	r2, #2
 80005d8:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_RED_GREEN]*100);
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <fsm_automatic_run+0x2c0>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	2264      	movs	r2, #100	; 0x64
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff69 	bl	80014bc <setTimer1>
			}
			break;
 80005ea:	e007      	b.n	80005fc <fsm_automatic_run+0x250>

		default:
			break;
 80005ec:	bf00      	nop
 80005ee:	e006      	b.n	80005fe <fsm_automatic_run+0x252>
			break;
 80005f0:	bf00      	nop
 80005f2:	e004      	b.n	80005fe <fsm_automatic_run+0x252>
			break;
 80005f4:	bf00      	nop
 80005f6:	e002      	b.n	80005fe <fsm_automatic_run+0x252>
			break;
 80005f8:	bf00      	nop
 80005fa:	e000      	b.n	80005fe <fsm_automatic_run+0x252>
			break;
 80005fc:	bf00      	nop
		}
		if(timer3_flag == 1){
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <fsm_automatic_run+0x2c8>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	f040 80c2 	bne.w	800078c <fsm_automatic_run+0x3e0>
			setTimer3(100);
 8000608:	2064      	movs	r0, #100	; 0x64
 800060a:	f000 ff6b 	bl	80014e4 <setTimer3>
			if(led_status1 == RED){
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <fsm_automatic_run+0x2cc>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d110      	bne.n	8000638 <fsm_automatic_run+0x28c>
				cntRoad1--;
 8000616:	4b19      	ldr	r3, [pc, #100]	; (800067c <fsm_automatic_run+0x2d0>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a17      	ldr	r2, [pc, #92]	; (800067c <fsm_automatic_run+0x2d0>)
 800061e:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 8000620:	4b16      	ldr	r3, [pc, #88]	; (800067c <fsm_automatic_run+0x2d0>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dc3f      	bgt.n	80006a8 <fsm_automatic_run+0x2fc>
					led_status1 = GREEN;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <fsm_automatic_run+0x2cc>)
 800062a:	2201      	movs	r2, #1
 800062c:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[1];
 800062e:	4b0f      	ldr	r3, [pc, #60]	; (800066c <fsm_automatic_run+0x2c0>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4a12      	ldr	r2, [pc, #72]	; (800067c <fsm_automatic_run+0x2d0>)
 8000634:	6013      	str	r3, [r2, #0]
 8000636:	e037      	b.n	80006a8 <fsm_automatic_run+0x2fc>
				}
			}
			else if(led_status1 == GREEN){
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <fsm_automatic_run+0x2cc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d11f      	bne.n	8000680 <fsm_automatic_run+0x2d4>
				cntRoad1--;
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <fsm_automatic_run+0x2d0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	3b01      	subs	r3, #1
 8000646:	4a0d      	ldr	r2, [pc, #52]	; (800067c <fsm_automatic_run+0x2d0>)
 8000648:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <fsm_automatic_run+0x2d0>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	2b00      	cmp	r3, #0
 8000650:	dc2a      	bgt.n	80006a8 <fsm_automatic_run+0x2fc>
					led_status1 = AMBER;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <fsm_automatic_run+0x2cc>)
 8000654:	2202      	movs	r2, #2
 8000656:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[2];
 8000658:	4b04      	ldr	r3, [pc, #16]	; (800066c <fsm_automatic_run+0x2c0>)
 800065a:	689b      	ldr	r3, [r3, #8]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <fsm_automatic_run+0x2d0>)
 800065e:	6013      	str	r3, [r2, #0]
 8000660:	e022      	b.n	80006a8 <fsm_automatic_run+0x2fc>
 8000662:	bf00      	nop
 8000664:	20000094 	.word	0x20000094
 8000668:	40010c00 	.word	0x40010c00
 800066c:	20000034 	.word	0x20000034
 8000670:	200000a0 	.word	0x200000a0
 8000674:	200000a8 	.word	0x200000a8
 8000678:	20000098 	.word	0x20000098
 800067c:	200000c8 	.word	0x200000c8
				}
			}
			else if(led_status1 == AMBER){
 8000680:	4b4e      	ldr	r3, [pc, #312]	; (80007bc <fsm_automatic_run+0x410>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b02      	cmp	r3, #2
 8000686:	d10f      	bne.n	80006a8 <fsm_automatic_run+0x2fc>
				cntRoad1--;
 8000688:	4b4d      	ldr	r3, [pc, #308]	; (80007c0 <fsm_automatic_run+0x414>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	3b01      	subs	r3, #1
 800068e:	4a4c      	ldr	r2, [pc, #304]	; (80007c0 <fsm_automatic_run+0x414>)
 8000690:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 8000692:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <fsm_automatic_run+0x414>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	dc06      	bgt.n	80006a8 <fsm_automatic_run+0x2fc>
					led_status1 = RED;
 800069a:	4b48      	ldr	r3, [pc, #288]	; (80007bc <fsm_automatic_run+0x410>)
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[0];
 80006a0:	4b48      	ldr	r3, [pc, #288]	; (80007c4 <fsm_automatic_run+0x418>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <fsm_automatic_run+0x414>)
 80006a6:	6013      	str	r3, [r2, #0]
				}
			}

			if(led_status2 == GREEN){
 80006a8:	4b47      	ldr	r3, [pc, #284]	; (80007c8 <fsm_automatic_run+0x41c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d110      	bne.n	80006d2 <fsm_automatic_run+0x326>
				cntRoad2--;
 80006b0:	4b46      	ldr	r3, [pc, #280]	; (80007cc <fsm_automatic_run+0x420>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	3b01      	subs	r3, #1
 80006b6:	4a45      	ldr	r2, [pc, #276]	; (80007cc <fsm_automatic_run+0x420>)
 80006b8:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 80006ba:	4b44      	ldr	r3, [pc, #272]	; (80007cc <fsm_automatic_run+0x420>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	dc30      	bgt.n	8000724 <fsm_automatic_run+0x378>
					led_status2 = AMBER;
 80006c2:	4b41      	ldr	r3, [pc, #260]	; (80007c8 <fsm_automatic_run+0x41c>)
 80006c4:	2202      	movs	r2, #2
 80006c6:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[2];
 80006c8:	4b3e      	ldr	r3, [pc, #248]	; (80007c4 <fsm_automatic_run+0x418>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4a3f      	ldr	r2, [pc, #252]	; (80007cc <fsm_automatic_run+0x420>)
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	e028      	b.n	8000724 <fsm_automatic_run+0x378>
				}
			}
			else if(led_status2 == AMBER){
 80006d2:	4b3d      	ldr	r3, [pc, #244]	; (80007c8 <fsm_automatic_run+0x41c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d110      	bne.n	80006fc <fsm_automatic_run+0x350>
				cntRoad2--;
 80006da:	4b3c      	ldr	r3, [pc, #240]	; (80007cc <fsm_automatic_run+0x420>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	3b01      	subs	r3, #1
 80006e0:	4a3a      	ldr	r2, [pc, #232]	; (80007cc <fsm_automatic_run+0x420>)
 80006e2:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <fsm_automatic_run+0x420>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	dc1b      	bgt.n	8000724 <fsm_automatic_run+0x378>
					led_status2 = RED;
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <fsm_automatic_run+0x41c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[0];
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <fsm_automatic_run+0x418>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a35      	ldr	r2, [pc, #212]	; (80007cc <fsm_automatic_run+0x420>)
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	e013      	b.n	8000724 <fsm_automatic_run+0x378>
				}
			}
			else if(led_status2 == RED){
 80006fc:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <fsm_automatic_run+0x41c>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d10f      	bne.n	8000724 <fsm_automatic_run+0x378>
				cntRoad2--;
 8000704:	4b31      	ldr	r3, [pc, #196]	; (80007cc <fsm_automatic_run+0x420>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	4a30      	ldr	r2, [pc, #192]	; (80007cc <fsm_automatic_run+0x420>)
 800070c:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <fsm_automatic_run+0x420>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	dc06      	bgt.n	8000724 <fsm_automatic_run+0x378>
					led_status2 = GREEN;
 8000716:	4b2c      	ldr	r3, [pc, #176]	; (80007c8 <fsm_automatic_run+0x41c>)
 8000718:	2201      	movs	r2, #1
 800071a:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[1];
 800071c:	4b29      	ldr	r3, [pc, #164]	; (80007c4 <fsm_automatic_run+0x418>)
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <fsm_automatic_run+0x420>)
 8000722:	6013      	str	r3, [r2, #0]
				}
			}
			if((led_status1 == DISPLAY_VALUE_RED) && (led_status2 == MODE_RED)){
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <fsm_automatic_run+0x410>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d10c      	bne.n	8000746 <fsm_automatic_run+0x39a>
 800072c:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <fsm_automatic_run+0x41c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b14      	cmp	r3, #20
 8000732:	d108      	bne.n	8000746 <fsm_automatic_run+0x39a>
				cntRoad1 = arr[RED];
 8000734:	4b23      	ldr	r3, [pc, #140]	; (80007c4 <fsm_automatic_run+0x418>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <fsm_automatic_run+0x414>)
 800073a:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[RED];
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <fsm_automatic_run+0x424>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a22      	ldr	r2, [pc, #136]	; (80007cc <fsm_automatic_run+0x420>)
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	e020      	b.n	8000788 <fsm_automatic_run+0x3dc>
			}
			else if((led_status1 == DISPLAY_VALUE_GREEN) && (led_status2 == MODE_GREEN)){
 8000746:	4b1d      	ldr	r3, [pc, #116]	; (80007bc <fsm_automatic_run+0x410>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2b04      	cmp	r3, #4
 800074c:	d10c      	bne.n	8000768 <fsm_automatic_run+0x3bc>
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <fsm_automatic_run+0x41c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b15      	cmp	r3, #21
 8000754:	d108      	bne.n	8000768 <fsm_automatic_run+0x3bc>
				cntRoad1 = arr[GREEN];
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <fsm_automatic_run+0x418>)
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	4a19      	ldr	r2, [pc, #100]	; (80007c0 <fsm_automatic_run+0x414>)
 800075c:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[GREEN];
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <fsm_automatic_run+0x424>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <fsm_automatic_run+0x420>)
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	e00f      	b.n	8000788 <fsm_automatic_run+0x3dc>
			}
			else if((led_status1 == DISPLAY_VALUE_AMBER) && (led_status2 == MODE_AMBER)){
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <fsm_automatic_run+0x410>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b05      	cmp	r3, #5
 800076e:	d10b      	bne.n	8000788 <fsm_automatic_run+0x3dc>
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <fsm_automatic_run+0x41c>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b16      	cmp	r3, #22
 8000776:	d107      	bne.n	8000788 <fsm_automatic_run+0x3dc>
				cntRoad1 = arr[AMBER];
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <fsm_automatic_run+0x418>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a10      	ldr	r2, [pc, #64]	; (80007c0 <fsm_automatic_run+0x414>)
 800077e:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[AMBER];
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <fsm_automatic_run+0x424>)
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	4a11      	ldr	r2, [pc, #68]	; (80007cc <fsm_automatic_run+0x420>)
 8000786:	6013      	str	r3, [r2, #0]
			}

			updateLedBuffer();
 8000788:	f000 fb76 	bl	8000e78 <updateLedBuffer>
		}
		if(timer4_flag == 1){
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <fsm_automatic_run+0x428>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d111      	bne.n	80007b8 <fsm_automatic_run+0x40c>
			setTimer4(25);
 8000794:	2019      	movs	r0, #25
 8000796:	f000 feb9 	bl	800150c <setTimer4>
			if (index_led >= 4) index_led = 0;
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <fsm_automatic_run+0x42c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dd02      	ble.n	80007a8 <fsm_automatic_run+0x3fc>
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <fsm_automatic_run+0x42c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
				update7SEG(index_led++);
 80007a8:	4b0b      	ldr	r3, [pc, #44]	; (80007d8 <fsm_automatic_run+0x42c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1c5a      	adds	r2, r3, #1
 80007ae:	490a      	ldr	r1, [pc, #40]	; (80007d8 <fsm_automatic_run+0x42c>)
 80007b0:	600a      	str	r2, [r1, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fcd0 	bl	8001158 <update7SEG>
		}



}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000098 	.word	0x20000098
 80007c0:	200000c8 	.word	0x200000c8
 80007c4:	20000034 	.word	0x20000034
 80007c8:	2000004c 	.word	0x2000004c
 80007cc:	200000cc 	.word	0x200000cc
 80007d0:	20000040 	.word	0x20000040
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	2000009c 	.word	0x2000009c

080007dc <increaseLEDTime>:
 *      Author: HP
 */
#include "fsm_manual.h"
#include "fsm_auto.h"
#include "led.h"
void increaseLEDTime(int index){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	if(index == RED){
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d110      	bne.n	800080c <increaseLEDTime+0x30>
		arr[RED]++;
 80007ea:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <increaseLEDTime+0x8c>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <increaseLEDTime+0x8c>)
 80007f2:	6013      	str	r3, [r2, #0]
		arr[GREEN]++;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <increaseLEDTime+0x8c>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	4a1b      	ldr	r2, [pc, #108]	; (8000868 <increaseLEDTime+0x8c>)
 80007fc:	6053      	str	r3, [r2, #4]
		if(arr[RED] >= 99){
 80007fe:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <increaseLEDTime+0x8c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	2b62      	cmp	r3, #98	; 0x62
 8000804:	dd02      	ble.n	800080c <increaseLEDTime+0x30>
			arr[RED] = 0;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <increaseLEDTime+0x8c>)
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
		}
	}
	if(index == GREEN){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b01      	cmp	r3, #1
 8000810:	d110      	bne.n	8000834 <increaseLEDTime+0x58>
		arr[GREEN]++;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <increaseLEDTime+0x8c>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	3301      	adds	r3, #1
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <increaseLEDTime+0x8c>)
 800081a:	6053      	str	r3, [r2, #4]
		arr[RED]++;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <increaseLEDTime+0x8c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a11      	ldr	r2, [pc, #68]	; (8000868 <increaseLEDTime+0x8c>)
 8000824:	6013      	str	r3, [r2, #0]
		if(arr[GREEN] >= 99){
 8000826:	4b10      	ldr	r3, [pc, #64]	; (8000868 <increaseLEDTime+0x8c>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	2b62      	cmp	r3, #98	; 0x62
 800082c:	dd02      	ble.n	8000834 <increaseLEDTime+0x58>
			arr[GREEN] = 0;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <increaseLEDTime+0x8c>)
 8000830:	2200      	movs	r2, #0
 8000832:	605a      	str	r2, [r3, #4]
		}
	}
	if(index == AMBER){
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2b02      	cmp	r3, #2
 8000838:	d110      	bne.n	800085c <increaseLEDTime+0x80>
		arr[AMBER]++;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <increaseLEDTime+0x8c>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	3301      	adds	r3, #1
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <increaseLEDTime+0x8c>)
 8000842:	6093      	str	r3, [r2, #8]
		arr[RED]++;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <increaseLEDTime+0x8c>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3301      	adds	r3, #1
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <increaseLEDTime+0x8c>)
 800084c:	6013      	str	r3, [r2, #0]
		if(arr[AMBER] >= 99){
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <increaseLEDTime+0x8c>)
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	2b62      	cmp	r3, #98	; 0x62
 8000854:	dd02      	ble.n	800085c <increaseLEDTime+0x80>
			arr[AMBER] = 0;
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <increaseLEDTime+0x8c>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
		}
	}
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	20000034 	.word	0x20000034

0800086c <fsm_manual_run>:

void fsm_manual_run() {
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	switch(status){
 8000870:	4b65      	ldr	r3, [pc, #404]	; (8000a08 <fsm_manual_run+0x19c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b0e      	cmp	r3, #14
 8000876:	f000 8081 	beq.w	800097c <fsm_manual_run+0x110>
 800087a:	2b0e      	cmp	r3, #14
 800087c:	f300 80ba 	bgt.w	80009f4 <fsm_manual_run+0x188>
 8000880:	2b0c      	cmp	r3, #12
 8000882:	d002      	beq.n	800088a <fsm_manual_run+0x1e>
 8000884:	2b0d      	cmp	r3, #13
 8000886:	d03d      	beq.n	8000904 <fsm_manual_run+0x98>
			status = MAN_RED;
			setTimer1(100);
		}
		break;
	default:
		break;
 8000888:	e0b4      	b.n	80009f4 <fsm_manual_run+0x188>
		if(timer1_flag == 1){
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <fsm_manual_run+0x1a0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10a      	bne.n	80008a8 <fsm_manual_run+0x3c>
			redToogle();
 8000892:	f000 f8c7 	bl	8000a24 <redToogle>
			led_status1 = DISPLAY_VALUE_RED;
 8000896:	4b5e      	ldr	r3, [pc, #376]	; (8000a10 <fsm_manual_run+0x1a4>)
 8000898:	2203      	movs	r2, #3
 800089a:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_RED;
 800089c:	4b5d      	ldr	r3, [pc, #372]	; (8000a14 <fsm_manual_run+0x1a8>)
 800089e:	2214      	movs	r2, #20
 80008a0:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80008a2:	2064      	movs	r0, #100	; 0x64
 80008a4:	f000 fe0a 	bl	80014bc <setTimer1>
		if(isButton1Pressed(BUTTON2) == 1){
 80008a8:	2002      	movs	r0, #2
 80008aa:	f7ff fc4f 	bl	800014c <isButton1Pressed>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b01      	cmp	r3, #1
 80008b2:	d102      	bne.n	80008ba <fsm_manual_run+0x4e>
			increaseLEDTime(RED);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff91 	bl	80007dc <increaseLEDTime>
		if(isButton1Pressed(BUTTON3) == 1){
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff fc46 	bl	800014c <isButton1Pressed>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d110      	bne.n	80008e8 <fsm_manual_run+0x7c>
			cntRoad1 = arr[RED];
 80008c6:	4b54      	ldr	r3, [pc, #336]	; (8000a18 <fsm_manual_run+0x1ac>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a54      	ldr	r2, [pc, #336]	; (8000a1c <fsm_manual_run+0x1b0>)
 80008cc:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 80008ce:	4b52      	ldr	r3, [pc, #328]	; (8000a18 <fsm_manual_run+0x1ac>)
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <fsm_manual_run+0x1b4>)
 80008d4:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <fsm_manual_run+0x1a4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 80008dc:	4b4d      	ldr	r3, [pc, #308]	; (8000a14 <fsm_manual_run+0x1a8>)
 80008de:	2201      	movs	r2, #1
 80008e0:	601a      	str	r2, [r3, #0]
			status = INIT;
 80008e2:	4b49      	ldr	r3, [pc, #292]	; (8000a08 <fsm_manual_run+0x19c>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(BUTTON1) == 1){
 80008e8:	2001      	movs	r0, #1
 80008ea:	f7ff fc2f 	bl	800014c <isButton1Pressed>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b01      	cmp	r3, #1
 80008f2:	f040 8081 	bne.w	80009f8 <fsm_manual_run+0x18c>
			status = MAN_GREEN;
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <fsm_manual_run+0x19c>)
 80008f8:	220d      	movs	r2, #13
 80008fa:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80008fc:	2064      	movs	r0, #100	; 0x64
 80008fe:	f000 fddd 	bl	80014bc <setTimer1>
		break;
 8000902:	e079      	b.n	80009f8 <fsm_manual_run+0x18c>
		if(timer1_flag == 1){
 8000904:	4b41      	ldr	r3, [pc, #260]	; (8000a0c <fsm_manual_run+0x1a0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d10a      	bne.n	8000922 <fsm_manual_run+0xb6>
			greenToogle();
 800090c:	f000 f8b2 	bl	8000a74 <greenToogle>
			led_status1 = DISPLAY_VALUE_GREEN;
 8000910:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <fsm_manual_run+0x1a4>)
 8000912:	2204      	movs	r2, #4
 8000914:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_GREEN;
 8000916:	4b3f      	ldr	r3, [pc, #252]	; (8000a14 <fsm_manual_run+0x1a8>)
 8000918:	2215      	movs	r2, #21
 800091a:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 800091c:	2064      	movs	r0, #100	; 0x64
 800091e:	f000 fdcd 	bl	80014bc <setTimer1>
		if(isButton1Pressed(BUTTON2) == 1){
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff fc12 	bl	800014c <isButton1Pressed>
 8000928:	4603      	mov	r3, r0
 800092a:	2b01      	cmp	r3, #1
 800092c:	d102      	bne.n	8000934 <fsm_manual_run+0xc8>
			increaseLEDTime(GREEN);
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff ff54 	bl	80007dc <increaseLEDTime>
		if(isButton1Pressed(BUTTON3) == 1){
 8000934:	2003      	movs	r0, #3
 8000936:	f7ff fc09 	bl	800014c <isButton1Pressed>
 800093a:	4603      	mov	r3, r0
 800093c:	2b01      	cmp	r3, #1
 800093e:	d110      	bne.n	8000962 <fsm_manual_run+0xf6>
			cntRoad1 = arr[RED];
 8000940:	4b35      	ldr	r3, [pc, #212]	; (8000a18 <fsm_manual_run+0x1ac>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a35      	ldr	r2, [pc, #212]	; (8000a1c <fsm_manual_run+0x1b0>)
 8000946:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 8000948:	4b33      	ldr	r3, [pc, #204]	; (8000a18 <fsm_manual_run+0x1ac>)
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	4a34      	ldr	r2, [pc, #208]	; (8000a20 <fsm_manual_run+0x1b4>)
 800094e:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 8000950:	4b2f      	ldr	r3, [pc, #188]	; (8000a10 <fsm_manual_run+0x1a4>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <fsm_manual_run+0x1a8>)
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
			status = INIT;
 800095c:	4b2a      	ldr	r3, [pc, #168]	; (8000a08 <fsm_manual_run+0x19c>)
 800095e:	2201      	movs	r2, #1
 8000960:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(BUTTON1) == 1){
 8000962:	2001      	movs	r0, #1
 8000964:	f7ff fbf2 	bl	800014c <isButton1Pressed>
 8000968:	4603      	mov	r3, r0
 800096a:	2b01      	cmp	r3, #1
 800096c:	d146      	bne.n	80009fc <fsm_manual_run+0x190>
			status = MAN_YELLOW;
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <fsm_manual_run+0x19c>)
 8000970:	220e      	movs	r2, #14
 8000972:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f000 fda1 	bl	80014bc <setTimer1>
		break;
 800097a:	e03f      	b.n	80009fc <fsm_manual_run+0x190>
		if(timer1_flag == 1){
 800097c:	4b23      	ldr	r3, [pc, #140]	; (8000a0c <fsm_manual_run+0x1a0>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b01      	cmp	r3, #1
 8000982:	d10a      	bne.n	800099a <fsm_manual_run+0x12e>
			amberToogle();
 8000984:	f000 f89e 	bl	8000ac4 <amberToogle>
			led_status1 = DISPLAY_VALUE_AMBER;
 8000988:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <fsm_manual_run+0x1a4>)
 800098a:	2205      	movs	r2, #5
 800098c:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_AMBER;
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <fsm_manual_run+0x1a8>)
 8000990:	2216      	movs	r2, #22
 8000992:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8000994:	2064      	movs	r0, #100	; 0x64
 8000996:	f000 fd91 	bl	80014bc <setTimer1>
		if(isButton1Pressed(BUTTON2) == 1){
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff fbd6 	bl	800014c <isButton1Pressed>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d102      	bne.n	80009ac <fsm_manual_run+0x140>
			increaseLEDTime(AMBER);
 80009a6:	2002      	movs	r0, #2
 80009a8:	f7ff ff18 	bl	80007dc <increaseLEDTime>
		if(isButton1Pressed(BUTTON3) == 1){
 80009ac:	2003      	movs	r0, #3
 80009ae:	f7ff fbcd 	bl	800014c <isButton1Pressed>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d110      	bne.n	80009da <fsm_manual_run+0x16e>
			cntRoad1 = arr[RED];
 80009b8:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <fsm_manual_run+0x1ac>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a17      	ldr	r2, [pc, #92]	; (8000a1c <fsm_manual_run+0x1b0>)
 80009be:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <fsm_manual_run+0x1ac>)
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <fsm_manual_run+0x1b4>)
 80009c6:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <fsm_manual_run+0x1a4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <fsm_manual_run+0x1a8>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	601a      	str	r2, [r3, #0]
			status = INIT;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <fsm_manual_run+0x19c>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(BUTTON1) == 1){
 80009da:	2001      	movs	r0, #1
 80009dc:	f7ff fbb6 	bl	800014c <isButton1Pressed>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	d10c      	bne.n	8000a00 <fsm_manual_run+0x194>
			status = MAN_RED;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <fsm_manual_run+0x19c>)
 80009e8:	220c      	movs	r2, #12
 80009ea:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80009ec:	2064      	movs	r0, #100	; 0x64
 80009ee:	f000 fd65 	bl	80014bc <setTimer1>
		break;
 80009f2:	e005      	b.n	8000a00 <fsm_manual_run+0x194>
		break;
 80009f4:	bf00      	nop
 80009f6:	e004      	b.n	8000a02 <fsm_manual_run+0x196>
		break;
 80009f8:	bf00      	nop
 80009fa:	e002      	b.n	8000a02 <fsm_manual_run+0x196>
		break;
 80009fc:	bf00      	nop
 80009fe:	e000      	b.n	8000a02 <fsm_manual_run+0x196>
		break;
 8000a00:	bf00      	nop
	}
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000094 	.word	0x20000094
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	20000098 	.word	0x20000098
 8000a14:	2000004c 	.word	0x2000004c
 8000a18:	20000034 	.word	0x20000034
 8000a1c:	200000c8 	.word	0x200000c8
 8000a20:	200000cc 	.word	0x200000cc

08000a24 <redToogle>:

const int MAX_LED = 4;
int index_led = 0;
int led_buffer[4] = {0,1, 2, 3};

void redToogle(){
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	4810      	ldr	r0, [pc, #64]	; (8000a70 <redToogle+0x4c>)
 8000a2e:	f001 f9cc 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000a32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a36:	480e      	ldr	r0, [pc, #56]	; (8000a70 <redToogle+0x4c>)
 8000a38:	f001 f9c7 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <redToogle+0x4c>)
 8000a44:	f001 f9a9 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a4e:	4808      	ldr	r0, [pc, #32]	; (8000a70 <redToogle+0x4c>)
 8000a50:	f001 f9a3 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5a:	4805      	ldr	r0, [pc, #20]	; (8000a70 <redToogle+0x4c>)
 8000a5c:	f001 f99d 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a66:	4802      	ldr	r0, [pc, #8]	; (8000a70 <redToogle+0x4c>)
 8000a68:	f001 f997 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000a6c:	bf00      	nop
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <greenToogle>:
void greenToogle(){
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D1_GPIO_Port, D3_Pin);
 8000a78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a7c:	4810      	ldr	r0, [pc, #64]	; (8000ac0 <greenToogle+0x4c>)
 8000a7e:	f001 f9a4 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D6_Pin);
 8000a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a86:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <greenToogle+0x4c>)
 8000a88:	f001 f99f 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <greenToogle+0x4c>)
 8000a94:	f001 f981 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a9e:	4808      	ldr	r0, [pc, #32]	; (8000ac0 <greenToogle+0x4c>)
 8000aa0:	f001 f97b 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <greenToogle+0x4c>)
 8000aac:	f001 f975 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab6:	4802      	ldr	r0, [pc, #8]	; (8000ac0 <greenToogle+0x4c>)
 8000ab8:	f001 f96f 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40010c00 	.word	0x40010c00

08000ac4 <amberToogle>:
void amberToogle(){
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000ac8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000acc:	4810      	ldr	r0, [pc, #64]	; (8000b10 <amberToogle+0x4c>)
 8000ace:	f001 f97c 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ad6:	480e      	ldr	r0, [pc, #56]	; (8000b10 <amberToogle+0x4c>)
 8000ad8:	f001 f977 	bl	8001dca <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ae2:	480b      	ldr	r0, [pc, #44]	; (8000b10 <amberToogle+0x4c>)
 8000ae4:	f001 f959 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000ae8:	2201      	movs	r2, #1
 8000aea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aee:	4808      	ldr	r0, [pc, #32]	; (8000b10 <amberToogle+0x4c>)
 8000af0:	f001 f953 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <amberToogle+0x4c>)
 8000afc:	f001 f94d 	bl	8001d9a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b06:	4802      	ldr	r0, [pc, #8]	; (8000b10 <amberToogle+0x4c>)
 8000b08:	f001 f947 	bl	8001d9a <HAL_GPIO_WritePin>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	40010c00 	.word	0x40010c00

08000b14 <display7SEG>:
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
}

void display7SEG(int num) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b09      	cmp	r3, #9
 8000b20:	f200 8180 	bhi.w	8000e24 <display7SEG+0x310>
 8000b24:	a201      	add	r2, pc, #4	; (adr r2, 8000b2c <display7SEG+0x18>)
 8000b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b2a:	bf00      	nop
 8000b2c:	08000b55 	.word	0x08000b55
 8000b30:	08000b9d 	.word	0x08000b9d
 8000b34:	08000be5 	.word	0x08000be5
 8000b38:	08000c2d 	.word	0x08000c2d
 8000b3c:	08000c75 	.word	0x08000c75
 8000b40:	08000cbd 	.word	0x08000cbd
 8000b44:	08000d05 	.word	0x08000d05
 8000b48:	08000d4d 	.word	0x08000d4d
 8000b4c:	08000d95 	.word	0x08000d95
 8000b50:	08000ddd 	.word	0x08000ddd
  switch(num) {
	  case 0 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	48c6      	ldr	r0, [pc, #792]	; (8000e74 <display7SEG+0x360>)
 8000b5a:	f001 f91e 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2102      	movs	r1, #2
 8000b62:	48c4      	ldr	r0, [pc, #784]	; (8000e74 <display7SEG+0x360>)
 8000b64:	f001 f919 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2104      	movs	r1, #4
 8000b6c:	48c1      	ldr	r0, [pc, #772]	; (8000e74 <display7SEG+0x360>)
 8000b6e:	f001 f914 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2108      	movs	r1, #8
 8000b76:	48bf      	ldr	r0, [pc, #764]	; (8000e74 <display7SEG+0x360>)
 8000b78:	f001 f90f 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2110      	movs	r1, #16
 8000b80:	48bc      	ldr	r0, [pc, #752]	; (8000e74 <display7SEG+0x360>)
 8000b82:	f001 f90a 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000b86:	2200      	movs	r2, #0
 8000b88:	2120      	movs	r1, #32
 8000b8a:	48ba      	ldr	r0, [pc, #744]	; (8000e74 <display7SEG+0x360>)
 8000b8c:	f001 f905 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	48b7      	ldr	r0, [pc, #732]	; (8000e74 <display7SEG+0x360>)
 8000b96:	f001 f900 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000b9a:	e167      	b.n	8000e6c <display7SEG+0x358>
	  }

	  case 1 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	48b4      	ldr	r0, [pc, #720]	; (8000e74 <display7SEG+0x360>)
 8000ba2:	f001 f8fa 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2102      	movs	r1, #2
 8000baa:	48b2      	ldr	r0, [pc, #712]	; (8000e74 <display7SEG+0x360>)
 8000bac:	f001 f8f5 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	48af      	ldr	r0, [pc, #700]	; (8000e74 <display7SEG+0x360>)
 8000bb6:	f001 f8f0 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	48ad      	ldr	r0, [pc, #692]	; (8000e74 <display7SEG+0x360>)
 8000bc0:	f001 f8eb 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	48aa      	ldr	r0, [pc, #680]	; (8000e74 <display7SEG+0x360>)
 8000bca:	f001 f8e6 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	48a8      	ldr	r0, [pc, #672]	; (8000e74 <display7SEG+0x360>)
 8000bd4:	f001 f8e1 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	48a5      	ldr	r0, [pc, #660]	; (8000e74 <display7SEG+0x360>)
 8000bde:	f001 f8dc 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000be2:	e143      	b.n	8000e6c <display7SEG+0x358>
	  }

	  case 2 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2101      	movs	r1, #1
 8000be8:	48a2      	ldr	r0, [pc, #648]	; (8000e74 <display7SEG+0x360>)
 8000bea:	f001 f8d6 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2102      	movs	r1, #2
 8000bf2:	48a0      	ldr	r0, [pc, #640]	; (8000e74 <display7SEG+0x360>)
 8000bf4:	f001 f8d1 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2104      	movs	r1, #4
 8000bfc:	489d      	ldr	r0, [pc, #628]	; (8000e74 <display7SEG+0x360>)
 8000bfe:	f001 f8cc 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2108      	movs	r1, #8
 8000c06:	489b      	ldr	r0, [pc, #620]	; (8000e74 <display7SEG+0x360>)
 8000c08:	f001 f8c7 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2110      	movs	r1, #16
 8000c10:	4898      	ldr	r0, [pc, #608]	; (8000e74 <display7SEG+0x360>)
 8000c12:	f001 f8c2 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4896      	ldr	r0, [pc, #600]	; (8000e74 <display7SEG+0x360>)
 8000c1c:	f001 f8bd 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4893      	ldr	r0, [pc, #588]	; (8000e74 <display7SEG+0x360>)
 8000c26:	f001 f8b8 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000c2a:	e11f      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 3 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4890      	ldr	r0, [pc, #576]	; (8000e74 <display7SEG+0x360>)
 8000c32:	f001 f8b2 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2102      	movs	r1, #2
 8000c3a:	488e      	ldr	r0, [pc, #568]	; (8000e74 <display7SEG+0x360>)
 8000c3c:	f001 f8ad 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2104      	movs	r1, #4
 8000c44:	488b      	ldr	r0, [pc, #556]	; (8000e74 <display7SEG+0x360>)
 8000c46:	f001 f8a8 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	4889      	ldr	r0, [pc, #548]	; (8000e74 <display7SEG+0x360>)
 8000c50:	f001 f8a3 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	4886      	ldr	r0, [pc, #536]	; (8000e74 <display7SEG+0x360>)
 8000c5a:	f001 f89e 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	4884      	ldr	r0, [pc, #528]	; (8000e74 <display7SEG+0x360>)
 8000c64:	f001 f899 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2140      	movs	r1, #64	; 0x40
 8000c6c:	4881      	ldr	r0, [pc, #516]	; (8000e74 <display7SEG+0x360>)
 8000c6e:	f001 f894 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000c72:	e0fb      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 4 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2101      	movs	r1, #1
 8000c78:	487e      	ldr	r0, [pc, #504]	; (8000e74 <display7SEG+0x360>)
 8000c7a:	f001 f88e 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2102      	movs	r1, #2
 8000c82:	487c      	ldr	r0, [pc, #496]	; (8000e74 <display7SEG+0x360>)
 8000c84:	f001 f889 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2104      	movs	r1, #4
 8000c8c:	4879      	ldr	r0, [pc, #484]	; (8000e74 <display7SEG+0x360>)
 8000c8e:	f001 f884 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000c92:	2201      	movs	r2, #1
 8000c94:	2108      	movs	r1, #8
 8000c96:	4877      	ldr	r0, [pc, #476]	; (8000e74 <display7SEG+0x360>)
 8000c98:	f001 f87f 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	2110      	movs	r1, #16
 8000ca0:	4874      	ldr	r0, [pc, #464]	; (8000e74 <display7SEG+0x360>)
 8000ca2:	f001 f87a 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	2120      	movs	r1, #32
 8000caa:	4872      	ldr	r0, [pc, #456]	; (8000e74 <display7SEG+0x360>)
 8000cac:	f001 f875 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2140      	movs	r1, #64	; 0x40
 8000cb4:	486f      	ldr	r0, [pc, #444]	; (8000e74 <display7SEG+0x360>)
 8000cb6:	f001 f870 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000cba:	e0d7      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 5 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	486c      	ldr	r0, [pc, #432]	; (8000e74 <display7SEG+0x360>)
 8000cc2:	f001 f86a 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2102      	movs	r1, #2
 8000cca:	486a      	ldr	r0, [pc, #424]	; (8000e74 <display7SEG+0x360>)
 8000ccc:	f001 f865 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2104      	movs	r1, #4
 8000cd4:	4867      	ldr	r0, [pc, #412]	; (8000e74 <display7SEG+0x360>)
 8000cd6:	f001 f860 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2108      	movs	r1, #8
 8000cde:	4865      	ldr	r0, [pc, #404]	; (8000e74 <display7SEG+0x360>)
 8000ce0:	f001 f85b 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	2110      	movs	r1, #16
 8000ce8:	4862      	ldr	r0, [pc, #392]	; (8000e74 <display7SEG+0x360>)
 8000cea:	f001 f856 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2120      	movs	r1, #32
 8000cf2:	4860      	ldr	r0, [pc, #384]	; (8000e74 <display7SEG+0x360>)
 8000cf4:	f001 f851 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	2140      	movs	r1, #64	; 0x40
 8000cfc:	485d      	ldr	r0, [pc, #372]	; (8000e74 <display7SEG+0x360>)
 8000cfe:	f001 f84c 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000d02:	e0b3      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 6 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2101      	movs	r1, #1
 8000d08:	485a      	ldr	r0, [pc, #360]	; (8000e74 <display7SEG+0x360>)
 8000d0a:	f001 f846 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2102      	movs	r1, #2
 8000d12:	4858      	ldr	r0, [pc, #352]	; (8000e74 <display7SEG+0x360>)
 8000d14:	f001 f841 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2104      	movs	r1, #4
 8000d1c:	4855      	ldr	r0, [pc, #340]	; (8000e74 <display7SEG+0x360>)
 8000d1e:	f001 f83c 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2108      	movs	r1, #8
 8000d26:	4853      	ldr	r0, [pc, #332]	; (8000e74 <display7SEG+0x360>)
 8000d28:	f001 f837 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2110      	movs	r1, #16
 8000d30:	4850      	ldr	r0, [pc, #320]	; (8000e74 <display7SEG+0x360>)
 8000d32:	f001 f832 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2120      	movs	r1, #32
 8000d3a:	484e      	ldr	r0, [pc, #312]	; (8000e74 <display7SEG+0x360>)
 8000d3c:	f001 f82d 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2140      	movs	r1, #64	; 0x40
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <display7SEG+0x360>)
 8000d46:	f001 f828 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000d4a:	e08f      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 7 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2101      	movs	r1, #1
 8000d50:	4848      	ldr	r0, [pc, #288]	; (8000e74 <display7SEG+0x360>)
 8000d52:	f001 f822 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2102      	movs	r1, #2
 8000d5a:	4846      	ldr	r0, [pc, #280]	; (8000e74 <display7SEG+0x360>)
 8000d5c:	f001 f81d 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2104      	movs	r1, #4
 8000d64:	4843      	ldr	r0, [pc, #268]	; (8000e74 <display7SEG+0x360>)
 8000d66:	f001 f818 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	2108      	movs	r1, #8
 8000d6e:	4841      	ldr	r0, [pc, #260]	; (8000e74 <display7SEG+0x360>)
 8000d70:	f001 f813 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	483e      	ldr	r0, [pc, #248]	; (8000e74 <display7SEG+0x360>)
 8000d7a:	f001 f80e 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2120      	movs	r1, #32
 8000d82:	483c      	ldr	r0, [pc, #240]	; (8000e74 <display7SEG+0x360>)
 8000d84:	f001 f809 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	2140      	movs	r1, #64	; 0x40
 8000d8c:	4839      	ldr	r0, [pc, #228]	; (8000e74 <display7SEG+0x360>)
 8000d8e:	f001 f804 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000d92:	e06b      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 8 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2101      	movs	r1, #1
 8000d98:	4836      	ldr	r0, [pc, #216]	; (8000e74 <display7SEG+0x360>)
 8000d9a:	f000 fffe 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2102      	movs	r1, #2
 8000da2:	4834      	ldr	r0, [pc, #208]	; (8000e74 <display7SEG+0x360>)
 8000da4:	f000 fff9 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2104      	movs	r1, #4
 8000dac:	4831      	ldr	r0, [pc, #196]	; (8000e74 <display7SEG+0x360>)
 8000dae:	f000 fff4 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2108      	movs	r1, #8
 8000db6:	482f      	ldr	r0, [pc, #188]	; (8000e74 <display7SEG+0x360>)
 8000db8:	f000 ffef 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2110      	movs	r1, #16
 8000dc0:	482c      	ldr	r0, [pc, #176]	; (8000e74 <display7SEG+0x360>)
 8000dc2:	f000 ffea 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2120      	movs	r1, #32
 8000dca:	482a      	ldr	r0, [pc, #168]	; (8000e74 <display7SEG+0x360>)
 8000dcc:	f000 ffe5 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2140      	movs	r1, #64	; 0x40
 8000dd4:	4827      	ldr	r0, [pc, #156]	; (8000e74 <display7SEG+0x360>)
 8000dd6:	f000 ffe0 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000dda:	e047      	b.n	8000e6c <display7SEG+0x358>
	  }
	  case 9 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2101      	movs	r1, #1
 8000de0:	4824      	ldr	r0, [pc, #144]	; (8000e74 <display7SEG+0x360>)
 8000de2:	f000 ffda 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2102      	movs	r1, #2
 8000dea:	4822      	ldr	r0, [pc, #136]	; (8000e74 <display7SEG+0x360>)
 8000dec:	f000 ffd5 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	2104      	movs	r1, #4
 8000df4:	481f      	ldr	r0, [pc, #124]	; (8000e74 <display7SEG+0x360>)
 8000df6:	f000 ffd0 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	481d      	ldr	r0, [pc, #116]	; (8000e74 <display7SEG+0x360>)
 8000e00:	f000 ffcb 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	2110      	movs	r1, #16
 8000e08:	481a      	ldr	r0, [pc, #104]	; (8000e74 <display7SEG+0x360>)
 8000e0a:	f000 ffc6 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2120      	movs	r1, #32
 8000e12:	4818      	ldr	r0, [pc, #96]	; (8000e74 <display7SEG+0x360>)
 8000e14:	f000 ffc1 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2140      	movs	r1, #64	; 0x40
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <display7SEG+0x360>)
 8000e1e:	f000 ffbc 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000e22:	e023      	b.n	8000e6c <display7SEG+0x358>
	  }

	  default : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000e24:	2201      	movs	r2, #1
 8000e26:	2101      	movs	r1, #1
 8000e28:	4812      	ldr	r0, [pc, #72]	; (8000e74 <display7SEG+0x360>)
 8000e2a:	f000 ffb6 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2102      	movs	r1, #2
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <display7SEG+0x360>)
 8000e34:	f000 ffb1 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <display7SEG+0x360>)
 8000e3e:	f000 ffac 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000e42:	2201      	movs	r2, #1
 8000e44:	2108      	movs	r1, #8
 8000e46:	480b      	ldr	r0, [pc, #44]	; (8000e74 <display7SEG+0x360>)
 8000e48:	f000 ffa7 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	2110      	movs	r1, #16
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <display7SEG+0x360>)
 8000e52:	f000 ffa2 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2120      	movs	r1, #32
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <display7SEG+0x360>)
 8000e5c:	f000 ff9d 	bl	8001d9a <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000e60:	2201      	movs	r2, #1
 8000e62:	2140      	movs	r1, #64	; 0x40
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <display7SEG+0x360>)
 8000e66:	f000 ff98 	bl	8001d9a <HAL_GPIO_WritePin>
		  break;
 8000e6a:	bf00      	nop
	  }
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40010c00 	.word	0x40010c00

08000e78 <updateLedBuffer>:
void updateLedBuffer (){
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
	// update led of road 1
	if(led_status1 == RED){
 8000e7c:	4bae      	ldr	r3, [pc, #696]	; (8001138 <updateLedBuffer+0x2c0>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d118      	bne.n	8000eb6 <updateLedBuffer+0x3e>
		led_buffer[0] = cntRoad1/10;
 8000e84:	4bad      	ldr	r3, [pc, #692]	; (800113c <updateLedBuffer+0x2c4>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4aad      	ldr	r2, [pc, #692]	; (8001140 <updateLedBuffer+0x2c8>)
 8000e8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e8e:	1092      	asrs	r2, r2, #2
 8000e90:	17db      	asrs	r3, r3, #31
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	4aab      	ldr	r2, [pc, #684]	; (8001144 <updateLedBuffer+0x2cc>)
 8000e96:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000e98:	4ba8      	ldr	r3, [pc, #672]	; (800113c <updateLedBuffer+0x2c4>)
 8000e9a:	6819      	ldr	r1, [r3, #0]
 8000e9c:	4ba8      	ldr	r3, [pc, #672]	; (8001140 <updateLedBuffer+0x2c8>)
 8000e9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000ea2:	109a      	asrs	r2, r3, #2
 8000ea4:	17cb      	asrs	r3, r1, #31
 8000ea6:	1ad2      	subs	r2, r2, r3
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	1aca      	subs	r2, r1, r3
 8000eb2:	4ba4      	ldr	r3, [pc, #656]	; (8001144 <updateLedBuffer+0x2cc>)
 8000eb4:	605a      	str	r2, [r3, #4]
	}
	if(led_status1 == GREEN){
 8000eb6:	4ba0      	ldr	r3, [pc, #640]	; (8001138 <updateLedBuffer+0x2c0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d118      	bne.n	8000ef0 <updateLedBuffer+0x78>
		led_buffer[0] = cntRoad1/10;
 8000ebe:	4b9f      	ldr	r3, [pc, #636]	; (800113c <updateLedBuffer+0x2c4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a9f      	ldr	r2, [pc, #636]	; (8001140 <updateLedBuffer+0x2c8>)
 8000ec4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ec8:	1092      	asrs	r2, r2, #2
 8000eca:	17db      	asrs	r3, r3, #31
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	4a9d      	ldr	r2, [pc, #628]	; (8001144 <updateLedBuffer+0x2cc>)
 8000ed0:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000ed2:	4b9a      	ldr	r3, [pc, #616]	; (800113c <updateLedBuffer+0x2c4>)
 8000ed4:	6819      	ldr	r1, [r3, #0]
 8000ed6:	4b9a      	ldr	r3, [pc, #616]	; (8001140 <updateLedBuffer+0x2c8>)
 8000ed8:	fb83 2301 	smull	r2, r3, r3, r1
 8000edc:	109a      	asrs	r2, r3, #2
 8000ede:	17cb      	asrs	r3, r1, #31
 8000ee0:	1ad2      	subs	r2, r2, r3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	1aca      	subs	r2, r1, r3
 8000eec:	4b95      	ldr	r3, [pc, #596]	; (8001144 <updateLedBuffer+0x2cc>)
 8000eee:	605a      	str	r2, [r3, #4]
	}
	if(led_status1 == AMBER){
 8000ef0:	4b91      	ldr	r3, [pc, #580]	; (8001138 <updateLedBuffer+0x2c0>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d118      	bne.n	8000f2a <updateLedBuffer+0xb2>
		led_buffer[0] = cntRoad1/10;
 8000ef8:	4b90      	ldr	r3, [pc, #576]	; (800113c <updateLedBuffer+0x2c4>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a90      	ldr	r2, [pc, #576]	; (8001140 <updateLedBuffer+0x2c8>)
 8000efe:	fb82 1203 	smull	r1, r2, r2, r3
 8000f02:	1092      	asrs	r2, r2, #2
 8000f04:	17db      	asrs	r3, r3, #31
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	4a8e      	ldr	r2, [pc, #568]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f0a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000f0c:	4b8b      	ldr	r3, [pc, #556]	; (800113c <updateLedBuffer+0x2c4>)
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	4b8b      	ldr	r3, [pc, #556]	; (8001140 <updateLedBuffer+0x2c8>)
 8000f12:	fb83 2301 	smull	r2, r3, r3, r1
 8000f16:	109a      	asrs	r2, r3, #2
 8000f18:	17cb      	asrs	r3, r1, #31
 8000f1a:	1ad2      	subs	r2, r2, r3
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	4413      	add	r3, r2
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	1aca      	subs	r2, r1, r3
 8000f26:	4b87      	ldr	r3, [pc, #540]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f28:	605a      	str	r2, [r3, #4]
	}
	// update led of road 2
	if(led_status2 == GREEN){
 8000f2a:	4b87      	ldr	r3, [pc, #540]	; (8001148 <updateLedBuffer+0x2d0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d118      	bne.n	8000f64 <updateLedBuffer+0xec>
			led_buffer[2] = cntRoad2/10;
 8000f32:	4b86      	ldr	r3, [pc, #536]	; (800114c <updateLedBuffer+0x2d4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a82      	ldr	r2, [pc, #520]	; (8001140 <updateLedBuffer+0x2c8>)
 8000f38:	fb82 1203 	smull	r1, r2, r2, r3
 8000f3c:	1092      	asrs	r2, r2, #2
 8000f3e:	17db      	asrs	r3, r3, #31
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	4a80      	ldr	r2, [pc, #512]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f44:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 8000f46:	4b81      	ldr	r3, [pc, #516]	; (800114c <updateLedBuffer+0x2d4>)
 8000f48:	6819      	ldr	r1, [r3, #0]
 8000f4a:	4b7d      	ldr	r3, [pc, #500]	; (8001140 <updateLedBuffer+0x2c8>)
 8000f4c:	fb83 2301 	smull	r2, r3, r3, r1
 8000f50:	109a      	asrs	r2, r3, #2
 8000f52:	17cb      	asrs	r3, r1, #31
 8000f54:	1ad2      	subs	r2, r2, r3
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	1aca      	subs	r2, r1, r3
 8000f60:	4b78      	ldr	r3, [pc, #480]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f62:	60da      	str	r2, [r3, #12]
		}
		if(led_status2 == AMBER){
 8000f64:	4b78      	ldr	r3, [pc, #480]	; (8001148 <updateLedBuffer+0x2d0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d118      	bne.n	8000f9e <updateLedBuffer+0x126>
			led_buffer[2] = cntRoad2/10;
 8000f6c:	4b77      	ldr	r3, [pc, #476]	; (800114c <updateLedBuffer+0x2d4>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a73      	ldr	r2, [pc, #460]	; (8001140 <updateLedBuffer+0x2c8>)
 8000f72:	fb82 1203 	smull	r1, r2, r2, r3
 8000f76:	1092      	asrs	r2, r2, #2
 8000f78:	17db      	asrs	r3, r3, #31
 8000f7a:	1ad3      	subs	r3, r2, r3
 8000f7c:	4a71      	ldr	r2, [pc, #452]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f7e:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 8000f80:	4b72      	ldr	r3, [pc, #456]	; (800114c <updateLedBuffer+0x2d4>)
 8000f82:	6819      	ldr	r1, [r3, #0]
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <updateLedBuffer+0x2c8>)
 8000f86:	fb83 2301 	smull	r2, r3, r3, r1
 8000f8a:	109a      	asrs	r2, r3, #2
 8000f8c:	17cb      	asrs	r3, r1, #31
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	4613      	mov	r3, r2
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	1aca      	subs	r2, r1, r3
 8000f9a:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <updateLedBuffer+0x2cc>)
 8000f9c:	60da      	str	r2, [r3, #12]
		}
		if(led_status2 == RED){
 8000f9e:	4b6a      	ldr	r3, [pc, #424]	; (8001148 <updateLedBuffer+0x2d0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d118      	bne.n	8000fd8 <updateLedBuffer+0x160>
			led_buffer[2] = cntRoad2/10;
 8000fa6:	4b69      	ldr	r3, [pc, #420]	; (800114c <updateLedBuffer+0x2d4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a65      	ldr	r2, [pc, #404]	; (8001140 <updateLedBuffer+0x2c8>)
 8000fac:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb0:	1092      	asrs	r2, r2, #2
 8000fb2:	17db      	asrs	r3, r3, #31
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	4a63      	ldr	r2, [pc, #396]	; (8001144 <updateLedBuffer+0x2cc>)
 8000fb8:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 8000fba:	4b64      	ldr	r3, [pc, #400]	; (800114c <updateLedBuffer+0x2d4>)
 8000fbc:	6819      	ldr	r1, [r3, #0]
 8000fbe:	4b60      	ldr	r3, [pc, #384]	; (8001140 <updateLedBuffer+0x2c8>)
 8000fc0:	fb83 2301 	smull	r2, r3, r3, r1
 8000fc4:	109a      	asrs	r2, r3, #2
 8000fc6:	17cb      	asrs	r3, r1, #31
 8000fc8:	1ad2      	subs	r2, r2, r3
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	1aca      	subs	r2, r1, r3
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <updateLedBuffer+0x2cc>)
 8000fd6:	60da      	str	r2, [r3, #12]
		}
	if((led_status1 == DISPLAY_VALUE_RED) && (led_status2 == MODE_RED)){
 8000fd8:	4b57      	ldr	r3, [pc, #348]	; (8001138 <updateLedBuffer+0x2c0>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d135      	bne.n	800104c <updateLedBuffer+0x1d4>
 8000fe0:	4b59      	ldr	r3, [pc, #356]	; (8001148 <updateLedBuffer+0x2d0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b14      	cmp	r3, #20
 8000fe6:	d131      	bne.n	800104c <updateLedBuffer+0x1d4>
		led_buffer[0] = cntRoad1/10;
 8000fe8:	4b54      	ldr	r3, [pc, #336]	; (800113c <updateLedBuffer+0x2c4>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a54      	ldr	r2, [pc, #336]	; (8001140 <updateLedBuffer+0x2c8>)
 8000fee:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff2:	1092      	asrs	r2, r2, #2
 8000ff4:	17db      	asrs	r3, r3, #31
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	4a52      	ldr	r2, [pc, #328]	; (8001144 <updateLedBuffer+0x2cc>)
 8000ffa:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <updateLedBuffer+0x2c4>)
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	4b4f      	ldr	r3, [pc, #316]	; (8001140 <updateLedBuffer+0x2c8>)
 8001002:	fb83 2301 	smull	r2, r3, r3, r1
 8001006:	109a      	asrs	r2, r3, #2
 8001008:	17cb      	asrs	r3, r1, #31
 800100a:	1ad2      	subs	r2, r2, r3
 800100c:	4613      	mov	r3, r2
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	4413      	add	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	1aca      	subs	r2, r1, r3
 8001016:	4b4b      	ldr	r3, [pc, #300]	; (8001144 <updateLedBuffer+0x2cc>)
 8001018:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 800101a:	4b4c      	ldr	r3, [pc, #304]	; (800114c <updateLedBuffer+0x2d4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a48      	ldr	r2, [pc, #288]	; (8001140 <updateLedBuffer+0x2c8>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4a46      	ldr	r2, [pc, #280]	; (8001144 <updateLedBuffer+0x2cc>)
 800102c:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 800102e:	4b47      	ldr	r3, [pc, #284]	; (800114c <updateLedBuffer+0x2d4>)
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	4b43      	ldr	r3, [pc, #268]	; (8001140 <updateLedBuffer+0x2c8>)
 8001034:	fb83 2301 	smull	r2, r3, r3, r1
 8001038:	109a      	asrs	r2, r3, #2
 800103a:	17cb      	asrs	r3, r1, #31
 800103c:	1ad2      	subs	r2, r2, r3
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	1aca      	subs	r2, r1, r3
 8001048:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <updateLedBuffer+0x2cc>)
 800104a:	60da      	str	r2, [r3, #12]
	}
	if((led_status1 == DISPLAY_VALUE_GREEN) && (led_status2 == MODE_GREEN)){
 800104c:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <updateLedBuffer+0x2c0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d135      	bne.n	80010c0 <updateLedBuffer+0x248>
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <updateLedBuffer+0x2d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b15      	cmp	r3, #21
 800105a:	d131      	bne.n	80010c0 <updateLedBuffer+0x248>
		led_buffer[0] = cntRoad1/10;
 800105c:	4b37      	ldr	r3, [pc, #220]	; (800113c <updateLedBuffer+0x2c4>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a37      	ldr	r2, [pc, #220]	; (8001140 <updateLedBuffer+0x2c8>)
 8001062:	fb82 1203 	smull	r1, r2, r2, r3
 8001066:	1092      	asrs	r2, r2, #2
 8001068:	17db      	asrs	r3, r3, #31
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	4a35      	ldr	r2, [pc, #212]	; (8001144 <updateLedBuffer+0x2cc>)
 800106e:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8001070:	4b32      	ldr	r3, [pc, #200]	; (800113c <updateLedBuffer+0x2c4>)
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	4b32      	ldr	r3, [pc, #200]	; (8001140 <updateLedBuffer+0x2c8>)
 8001076:	fb83 2301 	smull	r2, r3, r3, r1
 800107a:	109a      	asrs	r2, r3, #2
 800107c:	17cb      	asrs	r3, r1, #31
 800107e:	1ad2      	subs	r2, r2, r3
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	1aca      	subs	r2, r1, r3
 800108a:	4b2e      	ldr	r3, [pc, #184]	; (8001144 <updateLedBuffer+0x2cc>)
 800108c:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <updateLedBuffer+0x2d4>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a2b      	ldr	r2, [pc, #172]	; (8001140 <updateLedBuffer+0x2c8>)
 8001094:	fb82 1203 	smull	r1, r2, r2, r3
 8001098:	1092      	asrs	r2, r2, #2
 800109a:	17db      	asrs	r3, r3, #31
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <updateLedBuffer+0x2cc>)
 80010a0:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 80010a2:	4b2a      	ldr	r3, [pc, #168]	; (800114c <updateLedBuffer+0x2d4>)
 80010a4:	6819      	ldr	r1, [r3, #0]
 80010a6:	4b26      	ldr	r3, [pc, #152]	; (8001140 <updateLedBuffer+0x2c8>)
 80010a8:	fb83 2301 	smull	r2, r3, r3, r1
 80010ac:	109a      	asrs	r2, r3, #2
 80010ae:	17cb      	asrs	r3, r1, #31
 80010b0:	1ad2      	subs	r2, r2, r3
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	1aca      	subs	r2, r1, r3
 80010bc:	4b21      	ldr	r3, [pc, #132]	; (8001144 <updateLedBuffer+0x2cc>)
 80010be:	60da      	str	r2, [r3, #12]
	}
	if((led_status1 == DISPLAY_VALUE_AMBER) && (led_status2 == MODE_AMBER)){
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <updateLedBuffer+0x2c0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d143      	bne.n	8001150 <updateLedBuffer+0x2d8>
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <updateLedBuffer+0x2d0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b16      	cmp	r3, #22
 80010ce:	d13f      	bne.n	8001150 <updateLedBuffer+0x2d8>
		led_buffer[0] = cntRoad1/10;
 80010d0:	4b1a      	ldr	r3, [pc, #104]	; (800113c <updateLedBuffer+0x2c4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a1a      	ldr	r2, [pc, #104]	; (8001140 <updateLedBuffer+0x2c8>)
 80010d6:	fb82 1203 	smull	r1, r2, r2, r3
 80010da:	1092      	asrs	r2, r2, #2
 80010dc:	17db      	asrs	r3, r3, #31
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a18      	ldr	r2, [pc, #96]	; (8001144 <updateLedBuffer+0x2cc>)
 80010e2:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 80010e4:	4b15      	ldr	r3, [pc, #84]	; (800113c <updateLedBuffer+0x2c4>)
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <updateLedBuffer+0x2c8>)
 80010ea:	fb83 2301 	smull	r2, r3, r3, r1
 80010ee:	109a      	asrs	r2, r3, #2
 80010f0:	17cb      	asrs	r3, r1, #31
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	1aca      	subs	r2, r1, r3
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <updateLedBuffer+0x2cc>)
 8001100:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <updateLedBuffer+0x2d4>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a0e      	ldr	r2, [pc, #56]	; (8001140 <updateLedBuffer+0x2c8>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1092      	asrs	r2, r2, #2
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <updateLedBuffer+0x2cc>)
 8001114:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <updateLedBuffer+0x2d4>)
 8001118:	6819      	ldr	r1, [r3, #0]
 800111a:	4b09      	ldr	r3, [pc, #36]	; (8001140 <updateLedBuffer+0x2c8>)
 800111c:	fb83 2301 	smull	r2, r3, r3, r1
 8001120:	109a      	asrs	r2, r3, #2
 8001122:	17cb      	asrs	r3, r1, #31
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	1aca      	subs	r2, r1, r3
 8001130:	4b04      	ldr	r3, [pc, #16]	; (8001144 <updateLedBuffer+0x2cc>)
 8001132:	60da      	str	r2, [r3, #12]
 8001134:	e00c      	b.n	8001150 <updateLedBuffer+0x2d8>
 8001136:	bf00      	nop
 8001138:	20000098 	.word	0x20000098
 800113c:	200000c8 	.word	0x200000c8
 8001140:	66666667 	.word	0x66666667
 8001144:	20000050 	.word	0x20000050
 8001148:	2000004c 	.word	0x2000004c
 800114c:	200000cc 	.word	0x200000cc
	}

}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <update7SEG>:
void update7SEG ( int index ){
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	updateLedBuffer();
 8001160:	f7ff fe8a 	bl	8000e78 <updateLedBuffer>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b03      	cmp	r3, #3
 8001168:	d872      	bhi.n	8001250 <update7SEG+0xf8>
 800116a:	a201      	add	r2, pc, #4	; (adr r2, 8001170 <update7SEG+0x18>)
 800116c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001170:	08001181 	.word	0x08001181
 8001174:	080011b5 	.word	0x080011b5
 8001178:	080011e9 	.word	0x080011e9
 800117c:	0800121d 	.word	0x0800121d
	switch ( index ){
		case 0:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,0);
 8001180:	2200      	movs	r2, #0
 8001182:	2110      	movs	r1, #16
 8001184:	4835      	ldr	r0, [pc, #212]	; (800125c <update7SEG+0x104>)
 8001186:	f000 fe08 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 800118a:	2201      	movs	r2, #1
 800118c:	2120      	movs	r1, #32
 800118e:	4833      	ldr	r0, [pc, #204]	; (800125c <update7SEG+0x104>)
 8001190:	f000 fe03 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 8001194:	2201      	movs	r2, #1
 8001196:	2140      	movs	r1, #64	; 0x40
 8001198:	4830      	ldr	r0, [pc, #192]	; (800125c <update7SEG+0x104>)
 800119a:	f000 fdfe 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 800119e:	2201      	movs	r2, #1
 80011a0:	2180      	movs	r1, #128	; 0x80
 80011a2:	482e      	ldr	r0, [pc, #184]	; (800125c <update7SEG+0x104>)
 80011a4:	f000 fdf9 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 80011a8:	4b2d      	ldr	r3, [pc, #180]	; (8001260 <update7SEG+0x108>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fcb1 	bl	8000b14 <display7SEG>
			break ;
 80011b2:	e04e      	b.n	8001252 <update7SEG+0xfa>
		case 1:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	4828      	ldr	r0, [pc, #160]	; (800125c <update7SEG+0x104>)
 80011ba:	f000 fdee 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	4826      	ldr	r0, [pc, #152]	; (800125c <update7SEG+0x104>)
 80011c4:	f000 fde9 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2140      	movs	r1, #64	; 0x40
 80011cc:	4823      	ldr	r0, [pc, #140]	; (800125c <update7SEG+0x104>)
 80011ce:	f000 fde4 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 80011d2:	2201      	movs	r2, #1
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	4821      	ldr	r0, [pc, #132]	; (800125c <update7SEG+0x104>)
 80011d8:	f000 fddf 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <update7SEG+0x108>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff fc97 	bl	8000b14 <display7SEG>
			break ;
 80011e6:	e034      	b.n	8001252 <update7SEG+0xfa>
		case 2:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 80011e8:	2201      	movs	r2, #1
 80011ea:	2110      	movs	r1, #16
 80011ec:	481b      	ldr	r0, [pc, #108]	; (800125c <update7SEG+0x104>)
 80011ee:	f000 fdd4 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 80011f2:	2201      	movs	r2, #1
 80011f4:	2120      	movs	r1, #32
 80011f6:	4819      	ldr	r0, [pc, #100]	; (800125c <update7SEG+0x104>)
 80011f8:	f000 fdcf 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,0);
 80011fc:	2200      	movs	r2, #0
 80011fe:	2140      	movs	r1, #64	; 0x40
 8001200:	4816      	ldr	r0, [pc, #88]	; (800125c <update7SEG+0x104>)
 8001202:	f000 fdca 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 8001206:	2201      	movs	r2, #1
 8001208:	2180      	movs	r1, #128	; 0x80
 800120a:	4814      	ldr	r0, [pc, #80]	; (800125c <update7SEG+0x104>)
 800120c:	f000 fdc5 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8001210:	4b13      	ldr	r3, [pc, #76]	; (8001260 <update7SEG+0x108>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fc7d 	bl	8000b14 <display7SEG>
			break;
 800121a:	e01a      	b.n	8001252 <update7SEG+0xfa>
		case 3:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 800121c:	2201      	movs	r2, #1
 800121e:	2110      	movs	r1, #16
 8001220:	480e      	ldr	r0, [pc, #56]	; (800125c <update7SEG+0x104>)
 8001222:	f000 fdba 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 8001226:	2201      	movs	r2, #1
 8001228:	2120      	movs	r1, #32
 800122a:	480c      	ldr	r0, [pc, #48]	; (800125c <update7SEG+0x104>)
 800122c:	f000 fdb5 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 8001230:	2201      	movs	r2, #1
 8001232:	2140      	movs	r1, #64	; 0x40
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <update7SEG+0x104>)
 8001236:	f000 fdb0 	bl	8001d9a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,0);
 800123a:	2200      	movs	r2, #0
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	4807      	ldr	r0, [pc, #28]	; (800125c <update7SEG+0x104>)
 8001240:	f000 fdab 	bl	8001d9a <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <update7SEG+0x108>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc63 	bl	8000b14 <display7SEG>
			break;
 800124e:	e000      	b.n	8001252 <update7SEG+0xfa>
		default :
			break ;
 8001250:	bf00      	nop
 	 }
 }
 8001252:	bf00      	nop
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40010800 	.word	0x40010800
 8001260:	20000050 	.word	0x20000050

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001268:	f000 fa96 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126c:	f000 f82a 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001270:	f000 f8b0 	bl	80013d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001274:	f000 f862 	bl	800133c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <main+0x4c>)
 800127a:	f001 f9eb 	bl	8002654 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(100);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f000 f930 	bl	80014e4 <setTimer3>
  setTimer4(25);
 8001284:	2019      	movs	r0, #25
 8001286:	f000 f941 	bl	800150c <setTimer4>
  status = INIT;
 800128a:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <main+0x50>)
 800128c:	2201      	movs	r2, #1
 800128e:	601a      	str	r2, [r3, #0]
  setTimer5(100);
 8001290:	2064      	movs	r0, #100	; 0x64
 8001292:	f000 f94f 	bl	8001534 <setTimer5>
  cntRoad1 = arr[RED];
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <main+0x54>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <main+0x58>)
 800129c:	6013      	str	r3, [r2, #0]
  cntRoad2 = arr[GREEN];
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <main+0x54>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <main+0x5c>)
 80012a4:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  fsm_automatic_run();
 80012a6:	f7ff f881 	bl	80003ac <fsm_automatic_run>
	  fsm_manual_run();
 80012aa:	f7ff fadf 	bl	800086c <fsm_manual_run>
	  fsm_automatic_run();
 80012ae:	e7fa      	b.n	80012a6 <main+0x42>
 80012b0:	200000d0 	.word	0x200000d0
 80012b4:	20000094 	.word	0x20000094
 80012b8:	20000034 	.word	0x20000034
 80012bc:	200000c8 	.word	0x200000c8
 80012c0:	200000cc 	.word	0x200000cc

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	; 0x40
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0318 	add.w	r3, r7, #24
 80012ce:	2228      	movs	r2, #40	; 0x28
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 fd7a 	bl	8002dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	1d3b      	adds	r3, r7, #4
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e6:	2302      	movs	r3, #2
 80012e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ea:	2301      	movs	r3, #1
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	2310      	movs	r3, #16
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fd7e 	bl	8001dfc <HAL_RCC_OscConfig>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001306:	f000 f8d3 	bl	80014b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130a:	230f      	movs	r3, #15
 800130c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f000 ffea 	bl	80022fc <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800132e:	f000 f8bf 	bl	80014b0 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3740      	adds	r7, #64	; 0x40
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0308 	add.w	r3, r7, #8
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	463b      	mov	r3, r7
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM2_Init+0x94>)
 800135a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001360:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001362:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001366:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001370:	2209      	movs	r2, #9
 8001372:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001380:	4813      	ldr	r0, [pc, #76]	; (80013d0 <MX_TIM2_Init+0x94>)
 8001382:	f001 f917 	bl	80025b4 <HAL_TIM_Base_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800138c:	f000 f890 	bl	80014b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001390:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001394:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM2_Init+0x94>)
 800139e:	f001 faad 	bl	80028fc <HAL_TIM_ConfigClockSource>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013a8:	f000 f882 	bl	80014b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM2_Init+0x94>)
 80013ba:	f001 fc79 	bl	8002cb0 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c4:	f000 f874 	bl	80014b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200000d0 	.word	0x200000d0

080013d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013da:	f107 0308 	add.w	r3, r7, #8
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <MX_GPIO_Init+0xb8>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <MX_GPIO_Init+0xb8>)
 80013ee:	f043 0304 	orr.w	r3, r3, #4
 80013f2:	6193      	str	r3, [r2, #24]
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <MX_GPIO_Init+0xb8>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_GPIO_Init+0xb8>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	4a21      	ldr	r2, [pc, #132]	; (800148c <MX_GPIO_Init+0xb8>)
 8001406:	f043 0308 	orr.w	r3, r3, #8
 800140a:	6193      	str	r3, [r2, #24]
 800140c:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_GPIO_Init+0xb8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0308 	and.w	r3, r3, #8
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	21f0      	movs	r1, #240	; 0xf0
 800141c:	481c      	ldr	r0, [pc, #112]	; (8001490 <MX_GPIO_Init+0xbc>)
 800141e:	f000 fcbc 	bl	8001d9a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8001422:	2200      	movs	r2, #0
 8001424:	f643 717f 	movw	r1, #16255	; 0x3f7f
 8001428:	481a      	ldr	r0, [pc, #104]	; (8001494 <MX_GPIO_Init+0xc0>)
 800142a:	f000 fcb6 	bl	8001d9a <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 800142e:	23f0      	movs	r3, #240	; 0xf0
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2302      	movs	r3, #2
 800143c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0308 	add.w	r3, r7, #8
 8001442:	4619      	mov	r1, r3
 8001444:	4812      	ldr	r0, [pc, #72]	; (8001490 <MX_GPIO_Init+0xbc>)
 8001446:	f000 fb17 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin D1_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 800144a:	f643 737f 	movw	r3, #16255	; 0x3f7f
 800144e:	60bb      	str	r3, [r7, #8]
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001450:	2301      	movs	r3, #1
 8001452:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2302      	movs	r3, #2
 800145a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4619      	mov	r1, r3
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <MX_GPIO_Init+0xc0>)
 8001464:	f000 fb08 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|SET_Pin;
 8001468:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800146c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800146e:	2300      	movs	r3, #0
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001472:	2301      	movs	r3, #1
 8001474:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	4619      	mov	r1, r3
 800147c:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0xbc>)
 800147e:	f000 fafb 	bl	8001a78 <HAL_GPIO_Init>

}
 8001482:	bf00      	nop
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	40010800 	.word	0x40010800
 8001494:	40010c00 	.word	0x40010c00

08001498 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	timerRun();
 80014a0:	f000 f85c 	bl	800155c <timerRun>
	getKeyInput();
 80014a4:	f7fe feaa 	bl	80001fc <getKeyInput>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <Error_Handler+0x8>
	...

080014bc <setTimer1>:
int timer2_counter = 0;
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

void setTimer1(int duration) {
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration ;
 80014c4:	4a05      	ldr	r2, [pc, #20]	; (80014dc <setTimer1+0x20>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ca:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <setTimer1+0x24>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	200000b4 	.word	0x200000b4
 80014e0:	200000a0 	.word	0x200000a0

080014e4 <setTimer3>:
void setTimer2(int duration) {
	timer2_counter = duration;
	timer2_flag = 0;
}
void setTimer3(int duration) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <setTimer3+0x20>)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80014f2:	4b05      	ldr	r3, [pc, #20]	; (8001508 <setTimer3+0x24>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200000bc 	.word	0x200000bc
 8001508:	200000a8 	.word	0x200000a8

0800150c <setTimer4>:
void setTimer4(int duration) {
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001514:	4a05      	ldr	r2, [pc, #20]	; (800152c <setTimer4+0x20>)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <setTimer4+0x24>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200000c0 	.word	0x200000c0
 8001530:	200000ac 	.word	0x200000ac

08001534 <setTimer5>:
void setTimer5(int duration) {
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 800153c:	4a05      	ldr	r2, [pc, #20]	; (8001554 <setTimer5+0x20>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001542:	4b05      	ldr	r3, [pc, #20]	; (8001558 <setTimer5+0x24>)
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	bc80      	pop	{r7}
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	200000c4 	.word	0x200000c4
 8001558:	200000b0 	.word	0x200000b0

0800155c <timerRun>:
void timerRun() {
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <timerRun+0xac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	dd0b      	ble.n	8001580 <timerRun+0x24>
		timer1_counter--;
 8001568:	4b27      	ldr	r3, [pc, #156]	; (8001608 <timerRun+0xac>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	3b01      	subs	r3, #1
 800156e:	4a26      	ldr	r2, [pc, #152]	; (8001608 <timerRun+0xac>)
 8001570:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <timerRun+0xac>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	dc02      	bgt.n	8001580 <timerRun+0x24>
			timer1_flag = 1;
 800157a:	4b24      	ldr	r3, [pc, #144]	; (800160c <timerRun+0xb0>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <timerRun+0xb4>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	dd0b      	ble.n	80015a0 <timerRun+0x44>
		timer2_counter--;
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <timerRun+0xb4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <timerRun+0xb4>)
 8001590:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <timerRun+0xb4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	dc02      	bgt.n	80015a0 <timerRun+0x44>
			timer2_flag = 1;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <timerRun+0xb8>)
 800159c:	2201      	movs	r2, #1
 800159e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <timerRun+0xbc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	dd0b      	ble.n	80015c0 <timerRun+0x64>
		timer3_counter--;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <timerRun+0xbc>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <timerRun+0xbc>)
 80015b0:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <timerRun+0xbc>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	dc02      	bgt.n	80015c0 <timerRun+0x64>
			timer3_flag = 1;
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <timerRun+0xc0>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80015c0:	4b17      	ldr	r3, [pc, #92]	; (8001620 <timerRun+0xc4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	dd0b      	ble.n	80015e0 <timerRun+0x84>
		timer4_counter--;
 80015c8:	4b15      	ldr	r3, [pc, #84]	; (8001620 <timerRun+0xc4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	4a14      	ldr	r2, [pc, #80]	; (8001620 <timerRun+0xc4>)
 80015d0:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80015d2:	4b13      	ldr	r3, [pc, #76]	; (8001620 <timerRun+0xc4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	dc02      	bgt.n	80015e0 <timerRun+0x84>
			timer4_flag = 1;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <timerRun+0xc8>)
 80015dc:	2201      	movs	r2, #1
 80015de:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80015e0:	4b11      	ldr	r3, [pc, #68]	; (8001628 <timerRun+0xcc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	dd0b      	ble.n	8001600 <timerRun+0xa4>
		timer5_counter--;
 80015e8:	4b0f      	ldr	r3, [pc, #60]	; (8001628 <timerRun+0xcc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	3b01      	subs	r3, #1
 80015ee:	4a0e      	ldr	r2, [pc, #56]	; (8001628 <timerRun+0xcc>)
 80015f0:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80015f2:	4b0d      	ldr	r3, [pc, #52]	; (8001628 <timerRun+0xcc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	dc02      	bgt.n	8001600 <timerRun+0xa4>
			timer5_flag = 1;
 80015fa:	4b0c      	ldr	r3, [pc, #48]	; (800162c <timerRun+0xd0>)
 80015fc:	2201      	movs	r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200000b4 	.word	0x200000b4
 800160c:	200000a0 	.word	0x200000a0
 8001610:	200000b8 	.word	0x200000b8
 8001614:	200000a4 	.word	0x200000a4
 8001618:	200000bc 	.word	0x200000bc
 800161c:	200000a8 	.word	0x200000a8
 8001620:	200000c0 	.word	0x200000c0
 8001624:	200000ac 	.word	0x200000ac
 8001628:	200000c4 	.word	0x200000c4
 800162c:	200000b0 	.word	0x200000b0

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_MspInit+0x5c>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_MspInit+0x5c>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_MspInit+0x5c>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <HAL_MspInit+0x5c>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a0e      	ldr	r2, [pc, #56]	; (800168c <HAL_MspInit+0x5c>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <HAL_MspInit+0x5c>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001666:	4b0a      	ldr	r3, [pc, #40]	; (8001690 <HAL_MspInit+0x60>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	4a04      	ldr	r2, [pc, #16]	; (8001690 <HAL_MspInit+0x60>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001682:	bf00      	nop
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40021000 	.word	0x40021000
 8001690:	40010000 	.word	0x40010000

08001694 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a4:	d113      	bne.n	80016ce <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016a6:	4b0c      	ldr	r3, [pc, #48]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	61d3      	str	r3, [r2, #28]
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_TIM_Base_MspInit+0x44>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2100      	movs	r1, #0
 80016c2:	201c      	movs	r0, #28
 80016c4:	f000 f9a1 	bl	8001a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016c8:	201c      	movs	r0, #28
 80016ca:	f000 f9ba 	bl	8001a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3710      	adds	r7, #16
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40021000 	.word	0x40021000

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <NMI_Handler+0x4>

080016e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e6:	e7fe      	b.n	80016e6 <HardFault_Handler+0x4>

080016e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016ec:	e7fe      	b.n	80016ec <MemManage_Handler+0x4>

080016ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f2:	e7fe      	b.n	80016f2 <BusFault_Handler+0x4>

080016f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f8:	e7fe      	b.n	80016f8 <UsageFault_Handler+0x4>

080016fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001706:	b480      	push	{r7}
 8001708:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr

0800171e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001722:	f000 f87f 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <TIM2_IRQHandler+0x10>)
 8001732:	f000 ffdb 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200000d0 	.word	0x200000d0

08001740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800174c:	f7ff fff8 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480b      	ldr	r0, [pc, #44]	; (8001780 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001752:	490c      	ldr	r1, [pc, #48]	; (8001784 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a09      	ldr	r2, [pc, #36]	; (800178c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001768:	4c09      	ldr	r4, [pc, #36]	; (8001790 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001776:	f001 fb05 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177a:	f7ff fd73 	bl	8001264 <main>
  bx lr
 800177e:	4770      	bx	lr
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001788:	08002e20 	.word	0x08002e20
  ldr r2, =_sbss
 800178c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001790:	2000011c 	.word	0x2000011c

08001794 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_2_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f923 	bl	80019f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	200f      	movs	r0, #15
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff ff3c 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f93b 	bl	8001a5e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f000 f903 	bl	8001a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000060 	.word	0x20000060
 800181c:	20000068 	.word	0x20000068
 8001820:	20000064 	.word	0x20000064

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_IncTick+0x1c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x20>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_IncTick+0x20>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	20000068 	.word	0x20000068
 8001844:	20000118 	.word	0x20000118

08001848 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <HAL_GetTick+0x10>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	20000118 	.word	0x20000118

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bc80      	pop	{r7}
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4906      	ldr	r1, [pc, #24]	; (80018f4 <__NVIC_EnableIRQ+0x34>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	e000e100 	.word	0xe000e100

080018f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	6039      	str	r1, [r7, #0]
 8001902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	db0a      	blt.n	8001922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	b2da      	uxtb	r2, r3
 8001910:	490c      	ldr	r1, [pc, #48]	; (8001944 <__NVIC_SetPriority+0x4c>)
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	0112      	lsls	r2, r2, #4
 8001918:	b2d2      	uxtb	r2, r2
 800191a:	440b      	add	r3, r1
 800191c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001920:	e00a      	b.n	8001938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	b2da      	uxtb	r2, r3
 8001926:	4908      	ldr	r1, [pc, #32]	; (8001948 <__NVIC_SetPriority+0x50>)
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 030f 	and.w	r3, r3, #15
 800192e:	3b04      	subs	r3, #4
 8001930:	0112      	lsls	r2, r2, #4
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	440b      	add	r3, r1
 8001936:	761a      	strb	r2, [r3, #24]
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800194c:	b480      	push	{r7}
 800194e:	b089      	sub	sp, #36	; 0x24
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	f1c3 0307 	rsb	r3, r3, #7
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3304      	adds	r3, #4
 8001972:	2b06      	cmp	r3, #6
 8001974:	d902      	bls.n	800197c <NVIC_EncodePriority+0x30>
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3b03      	subs	r3, #3
 800197a:	e000      	b.n	800197e <NVIC_EncodePriority+0x32>
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	f04f 32ff 	mov.w	r2, #4294967295
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43da      	mvns	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	401a      	ands	r2, r3
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001994:	f04f 31ff 	mov.w	r1, #4294967295
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	43d9      	mvns	r1, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a4:	4313      	orrs	r3, r2
         );
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3724      	adds	r7, #36	; 0x24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c0:	d301      	bcc.n	80019c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c2:	2301      	movs	r3, #1
 80019c4:	e00f      	b.n	80019e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <SysTick_Config+0x40>)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ce:	210f      	movs	r1, #15
 80019d0:	f04f 30ff 	mov.w	r0, #4294967295
 80019d4:	f7ff ff90 	bl	80018f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <SysTick_Config+0x40>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019de:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <SysTick_Config+0x40>)
 80019e0:	2207      	movs	r2, #7
 80019e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	e000e010 	.word	0xe000e010

080019f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f7ff ff2d 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	60b9      	str	r1, [r7, #8]
 8001a14:	607a      	str	r2, [r7, #4]
 8001a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a1c:	f7ff ff42 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	6978      	ldr	r0, [r7, #20]
 8001a28:	f7ff ff90 	bl	800194c <NVIC_EncodePriority>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a32:	4611      	mov	r1, r2
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff ff5f 	bl	80018f8 <__NVIC_SetPriority>
}
 8001a3a:	bf00      	nop
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b082      	sub	sp, #8
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	4603      	mov	r3, r0
 8001a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff35 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff ffa2 	bl	80019b0 <SysTick_Config>
 8001a6c:	4603      	mov	r3, r0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b08b      	sub	sp, #44	; 0x2c
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8a:	e148      	b.n	8001d1e <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	f040 8137 	bne.w	8001d18 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4aa3      	ldr	r2, [pc, #652]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d05e      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ab4:	4aa1      	ldr	r2, [pc, #644]	; (8001d3c <HAL_GPIO_Init+0x2c4>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d875      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aba:	4aa1      	ldr	r2, [pc, #644]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d058      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ac0:	4a9f      	ldr	r2, [pc, #636]	; (8001d40 <HAL_GPIO_Init+0x2c8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d86f      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ac6:	4a9f      	ldr	r2, [pc, #636]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d052      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001acc:	4a9d      	ldr	r2, [pc, #628]	; (8001d44 <HAL_GPIO_Init+0x2cc>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d869      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ad2:	4a9d      	ldr	r2, [pc, #628]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d04c      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ad8:	4a9b      	ldr	r2, [pc, #620]	; (8001d48 <HAL_GPIO_Init+0x2d0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d863      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001ade:	4a9b      	ldr	r2, [pc, #620]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d046      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
 8001ae4:	4a99      	ldr	r2, [pc, #612]	; (8001d4c <HAL_GPIO_Init+0x2d4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d85d      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001aea:	2b12      	cmp	r3, #18
 8001aec:	d82a      	bhi.n	8001b44 <HAL_GPIO_Init+0xcc>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d859      	bhi.n	8001ba6 <HAL_GPIO_Init+0x12e>
 8001af2:	a201      	add	r2, pc, #4	; (adr r2, 8001af8 <HAL_GPIO_Init+0x80>)
 8001af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af8:	08001b73 	.word	0x08001b73
 8001afc:	08001b4d 	.word	0x08001b4d
 8001b00:	08001b5f 	.word	0x08001b5f
 8001b04:	08001ba1 	.word	0x08001ba1
 8001b08:	08001ba7 	.word	0x08001ba7
 8001b0c:	08001ba7 	.word	0x08001ba7
 8001b10:	08001ba7 	.word	0x08001ba7
 8001b14:	08001ba7 	.word	0x08001ba7
 8001b18:	08001ba7 	.word	0x08001ba7
 8001b1c:	08001ba7 	.word	0x08001ba7
 8001b20:	08001ba7 	.word	0x08001ba7
 8001b24:	08001ba7 	.word	0x08001ba7
 8001b28:	08001ba7 	.word	0x08001ba7
 8001b2c:	08001ba7 	.word	0x08001ba7
 8001b30:	08001ba7 	.word	0x08001ba7
 8001b34:	08001ba7 	.word	0x08001ba7
 8001b38:	08001ba7 	.word	0x08001ba7
 8001b3c:	08001b55 	.word	0x08001b55
 8001b40:	08001b69 	.word	0x08001b69
 8001b44:	4a82      	ldr	r2, [pc, #520]	; (8001d50 <HAL_GPIO_Init+0x2d8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4a:	e02c      	b.n	8001ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	623b      	str	r3, [r7, #32]
          break;
 8001b52:	e029      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	3304      	adds	r3, #4
 8001b5a:	623b      	str	r3, [r7, #32]
          break;
 8001b5c:	e024      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	3308      	adds	r3, #8
 8001b64:	623b      	str	r3, [r7, #32]
          break;
 8001b66:	e01f      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	330c      	adds	r3, #12
 8001b6e:	623b      	str	r3, [r7, #32]
          break;
 8001b70:	e01a      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e013      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d105      	bne.n	8001b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b88:	2308      	movs	r3, #8
 8001b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	69fa      	ldr	r2, [r7, #28]
 8001b90:	611a      	str	r2, [r3, #16]
          break;
 8001b92:	e009      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b94:	2308      	movs	r3, #8
 8001b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	615a      	str	r2, [r3, #20]
          break;
 8001b9e:	e003      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	623b      	str	r3, [r7, #32]
          break;
 8001ba4:	e000      	b.n	8001ba8 <HAL_GPIO_Init+0x130>
          break;
 8001ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2bff      	cmp	r3, #255	; 0xff
 8001bac:	d801      	bhi.n	8001bb2 <HAL_GPIO_Init+0x13a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	e001      	b.n	8001bb6 <HAL_GPIO_Init+0x13e>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3304      	adds	r3, #4
 8001bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	2bff      	cmp	r3, #255	; 0xff
 8001bbc:	d802      	bhi.n	8001bc4 <HAL_GPIO_Init+0x14c>
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	e002      	b.n	8001bca <HAL_GPIO_Init+0x152>
 8001bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc6:	3b08      	subs	r3, #8
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	210f      	movs	r1, #15
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	401a      	ands	r2, r3
 8001bdc:	6a39      	ldr	r1, [r7, #32]
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	fa01 f303 	lsl.w	r3, r1, r3
 8001be4:	431a      	orrs	r2, r3
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8090 	beq.w	8001d18 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	4b56      	ldr	r3, [pc, #344]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a55      	ldr	r2, [pc, #340]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b53      	ldr	r3, [pc, #332]	; (8001d54 <HAL_GPIO_Init+0x2dc>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c10:	4a51      	ldr	r2, [pc, #324]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a49      	ldr	r2, [pc, #292]	; (8001d5c <HAL_GPIO_Init+0x2e4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d00d      	beq.n	8001c58 <HAL_GPIO_Init+0x1e0>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a48      	ldr	r2, [pc, #288]	; (8001d60 <HAL_GPIO_Init+0x2e8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d007      	beq.n	8001c54 <HAL_GPIO_Init+0x1dc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a47      	ldr	r2, [pc, #284]	; (8001d64 <HAL_GPIO_Init+0x2ec>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d101      	bne.n	8001c50 <HAL_GPIO_Init+0x1d8>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e004      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c50:	2303      	movs	r3, #3
 8001c52:	e002      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_GPIO_Init+0x1e2>
 8001c58:	2300      	movs	r3, #0
 8001c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c5c:	f002 0203 	and.w	r2, r2, #3
 8001c60:	0092      	lsls	r2, r2, #2
 8001c62:	4093      	lsls	r3, r2
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6a:	493b      	ldr	r1, [pc, #236]	; (8001d58 <HAL_GPIO_Init+0x2e0>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	089b      	lsrs	r3, r3, #2
 8001c70:	3302      	adds	r3, #2
 8001c72:	68fa      	ldr	r2, [r7, #12]
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d006      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c84:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	4937      	ldr	r1, [pc, #220]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	608b      	str	r3, [r1, #8]
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c92:	4b35      	ldr	r3, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	4933      	ldr	r1, [pc, #204]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d006      	beq.n	8001cba <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cac:	4b2e      	ldr	r3, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	492d      	ldr	r1, [pc, #180]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
 8001cb8:	e006      	b.n	8001cc8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cba:	4b2b      	ldr	r3, [pc, #172]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	4929      	ldr	r1, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d006      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd4:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	4923      	ldr	r1, [pc, #140]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	604b      	str	r3, [r1, #4]
 8001ce0:	e006      	b.n	8001cf0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	685a      	ldr	r2, [r3, #4]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	491f      	ldr	r1, [pc, #124]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d006      	beq.n	8001d0a <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	4919      	ldr	r1, [pc, #100]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]
 8001d08:	e006      	b.n	8001d18 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4915      	ldr	r1, [pc, #84]	; (8001d68 <HAL_GPIO_Init+0x2f0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	fa22 f303 	lsr.w	r3, r2, r3
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f47f aeaf 	bne.w	8001a8c <HAL_GPIO_Init+0x14>
  }
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	372c      	adds	r7, #44	; 0x2c
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bc80      	pop	{r7}
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	10320000 	.word	0x10320000
 8001d40:	10310000 	.word	0x10310000
 8001d44:	10220000 	.word	0x10220000
 8001d48:	10210000 	.word	0x10210000
 8001d4c:	10120000 	.word	0x10120000
 8001d50:	10110000 	.word	0x10110000
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40010800 	.word	0x40010800
 8001d60:	40010c00 	.word	0x40010c00
 8001d64:	40011000 	.word	0x40011000
 8001d68:	40010400 	.word	0x40010400

08001d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	460b      	mov	r3, r1
 8001d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	887b      	ldrh	r3, [r7, #2]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d002      	beq.n	8001d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d84:	2301      	movs	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	e001      	b.n	8001d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3714      	adds	r7, #20
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	460b      	mov	r3, r1
 8001da4:	807b      	strh	r3, [r7, #2]
 8001da6:	4613      	mov	r3, r2
 8001da8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001daa:	787b      	ldrb	r3, [r7, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db0:	887a      	ldrh	r2, [r7, #2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001db6:	e003      	b.n	8001dc0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	611a      	str	r2, [r3, #16]
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bc80      	pop	{r7}
 8001dc8:	4770      	bx	lr

08001dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	b085      	sub	sp, #20
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ddc:	887a      	ldrh	r2, [r7, #2]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	4013      	ands	r3, r2
 8001de2:	041a      	lsls	r2, r3, #16
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	400b      	ands	r3, r1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	611a      	str	r2, [r3, #16]
}
 8001df2:	bf00      	nop
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e26c      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e1c:	4b92      	ldr	r3, [pc, #584]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 030c 	and.w	r3, r3, #12
 8001e24:	2b04      	cmp	r3, #4
 8001e26:	d00c      	beq.n	8001e42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e28:	4b8f      	ldr	r3, [pc, #572]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d112      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
 8001e34:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e40:	d10b      	bne.n	8001e5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	4b89      	ldr	r3, [pc, #548]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d06c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x12c>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d168      	bne.n	8001f28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e246      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x76>
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a7f      	ldr	r2, [pc, #508]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e02e      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x98>
 8001e7a:	4b7b      	ldr	r3, [pc, #492]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a7a      	ldr	r2, [pc, #488]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b78      	ldr	r3, [pc, #480]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a77      	ldr	r2, [pc, #476]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0xbc>
 8001e9e:	4b72      	ldr	r3, [pc, #456]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a71      	ldr	r2, [pc, #452]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6f      	ldr	r3, [pc, #444]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6e      	ldr	r2, [pc, #440]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xd4>
 8001eb8:	4b6b      	ldr	r3, [pc, #428]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6a      	ldr	r2, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b68      	ldr	r3, [pc, #416]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a67      	ldr	r2, [pc, #412]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fcb6 	bl	8001848 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fcb2 	bl	8001848 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e1fa      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xe4>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fca2 	bl	8001848 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fc9e 	bl	8001848 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1e6      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x10c>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
 8001f4e:	4b46      	ldr	r3, [pc, #280]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b43      	ldr	r3, [pc, #268]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1ba      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4939      	ldr	r1, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc57 	bl	8001848 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fc53 	bl	8001848 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e19b      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	695b      	ldr	r3, [r3, #20]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4927      	ldr	r1, [pc, #156]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x270>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fc36 	bl	8001848 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fc32 	bl	8001848 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e17a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d03a      	beq.n	8002080 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d019      	beq.n	8002046 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002018:	f7ff fc16 	bl	8001848 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fc12 	bl	8001848 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e15a      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_RCC_OscConfig+0x26c>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800203e:	2001      	movs	r0, #1
 8002040:	f000 fa9a 	bl	8002578 <RCC_Delay>
 8002044:	e01c      	b.n	8002080 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_RCC_OscConfig+0x274>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800204c:	f7ff fbfc 	bl	8001848 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002052:	e00f      	b.n	8002074 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002054:	f7ff fbf8 	bl	8001848 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d908      	bls.n	8002074 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e140      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	42420000 	.word	0x42420000
 8002070:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002074:	4b9e      	ldr	r3, [pc, #632]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e9      	bne.n	8002054 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0304 	and.w	r3, r3, #4
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 80a6 	beq.w	80021da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800208e:	2300      	movs	r3, #0
 8002090:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002092:	4b97      	ldr	r3, [pc, #604]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	69db      	ldr	r3, [r3, #28]
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10d      	bne.n	80020ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	4b94      	ldr	r3, [pc, #592]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4a93      	ldr	r2, [pc, #588]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a8:	61d3      	str	r3, [r2, #28]
 80020aa:	4b91      	ldr	r3, [pc, #580]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b6:	2301      	movs	r3, #1
 80020b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ba:	4b8e      	ldr	r3, [pc, #568]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d118      	bne.n	80020f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c6:	4b8b      	ldr	r3, [pc, #556]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a8a      	ldr	r2, [pc, #552]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fbb9 	bl	8001848 <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020da:	f7ff fbb5 	bl	8001848 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b64      	cmp	r3, #100	; 0x64
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0fd      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	4b81      	ldr	r3, [pc, #516]	; (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x312>
 8002100:	4b7b      	ldr	r3, [pc, #492]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a7a      	ldr	r2, [pc, #488]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	6213      	str	r3, [r2, #32]
 800210c:	e02d      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x334>
 8002116:	4b76      	ldr	r3, [pc, #472]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	4a75      	ldr	r2, [pc, #468]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	f023 0301 	bic.w	r3, r3, #1
 8002120:	6213      	str	r3, [r2, #32]
 8002122:	4b73      	ldr	r3, [pc, #460]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	4a72      	ldr	r2, [pc, #456]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	f023 0304 	bic.w	r3, r3, #4
 800212c:	6213      	str	r3, [r2, #32]
 800212e:	e01c      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d10c      	bne.n	8002152 <HAL_RCC_OscConfig+0x356>
 8002138:	4b6d      	ldr	r3, [pc, #436]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	4a6c      	ldr	r2, [pc, #432]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	f043 0304 	orr.w	r3, r3, #4
 8002142:	6213      	str	r3, [r2, #32]
 8002144:	4b6a      	ldr	r3, [pc, #424]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a69      	ldr	r2, [pc, #420]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e00b      	b.n	800216a <HAL_RCC_OscConfig+0x36e>
 8002152:	4b67      	ldr	r3, [pc, #412]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	4a66      	ldr	r2, [pc, #408]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	f023 0301 	bic.w	r3, r3, #1
 800215c:	6213      	str	r3, [r2, #32]
 800215e:	4b64      	ldr	r3, [pc, #400]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	4a63      	ldr	r2, [pc, #396]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	f023 0304 	bic.w	r3, r3, #4
 8002168:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d015      	beq.n	800219e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7ff fb69 	bl	8001848 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002178:	e00a      	b.n	8002190 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217a:	f7ff fb65 	bl	8001848 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	f241 3288 	movw	r2, #5000	; 0x1388
 8002188:	4293      	cmp	r3, r2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0ab      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ee      	beq.n	800217a <HAL_RCC_OscConfig+0x37e>
 800219c:	e014      	b.n	80021c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219e:	f7ff fb53 	bl	8001848 <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff fb4f 	bl	8001848 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e095      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021bc:	4b4c      	ldr	r3, [pc, #304]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1ee      	bne.n	80021a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021c8:	7dfb      	ldrb	r3, [r7, #23]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d105      	bne.n	80021da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ce:	4b48      	ldr	r3, [pc, #288]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d0:	69db      	ldr	r3, [r3, #28]
 80021d2:	4a47      	ldr	r2, [pc, #284]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	69db      	ldr	r3, [r3, #28]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8081 	beq.w	80022e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e4:	4b42      	ldr	r3, [pc, #264]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b08      	cmp	r3, #8
 80021ee:	d061      	beq.n	80022b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d146      	bne.n	8002286 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f8:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fe:	f7ff fb23 	bl	8001848 <HAL_GetTick>
 8002202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002204:	e008      	b.n	8002218 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002206:	f7ff fb1f 	bl	8001848 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e067      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	4b35      	ldr	r3, [pc, #212]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f0      	bne.n	8002206 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222c:	d108      	bne.n	8002240 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800222e:	4b30      	ldr	r3, [pc, #192]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	492d      	ldr	r1, [pc, #180]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800223c:	4313      	orrs	r3, r2
 800223e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a19      	ldr	r1, [r3, #32]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	430b      	orrs	r3, r1
 8002252:	4927      	ldr	r1, [pc, #156]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 8002254:	4313      	orrs	r3, r2
 8002256:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002258:	4b27      	ldr	r3, [pc, #156]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 800225a:	2201      	movs	r2, #1
 800225c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225e:	f7ff faf3 	bl	8001848 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002266:	f7ff faef 	bl	8001848 <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b02      	cmp	r3, #2
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e037      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	4b1d      	ldr	r3, [pc, #116]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x46a>
 8002284:	e02f      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002286:	4b1c      	ldr	r3, [pc, #112]	; (80022f8 <HAL_RCC_OscConfig+0x4fc>)
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800228c:	f7ff fadc 	bl	8001848 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002294:	f7ff fad8 	bl	8001848 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e020      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	4b12      	ldr	r3, [pc, #72]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x498>
 80022b2:	e018      	b.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e013      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c0:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <HAL_RCC_OscConfig+0x4f4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d106      	bne.n	80022e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40007000 	.word	0x40007000
 80022f8:	42420060 	.word	0x42420060

080022fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d101      	bne.n	8002310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e0d0      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d910      	bls.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b67      	ldr	r3, [pc, #412]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	4965      	ldr	r1, [pc, #404]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	4313      	orrs	r3, r2
 800232c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232e:	4b63      	ldr	r3, [pc, #396]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e0b8      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d020      	beq.n	800238e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	d005      	beq.n	8002364 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002358:	4b59      	ldr	r3, [pc, #356]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4a58      	ldr	r2, [pc, #352]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002362:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d005      	beq.n	800237c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002370:	4b53      	ldr	r3, [pc, #332]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	4a52      	ldr	r2, [pc, #328]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800237c:	4b50      	ldr	r3, [pc, #320]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	494d      	ldr	r1, [pc, #308]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	4313      	orrs	r3, r2
 800238c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d040      	beq.n	800241c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a2:	4b47      	ldr	r3, [pc, #284]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d115      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e07f      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d107      	bne.n	80023ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	4b41      	ldr	r3, [pc, #260]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d109      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e073      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ca:	4b3d      	ldr	r3, [pc, #244]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d101      	bne.n	80023da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e06b      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	4936      	ldr	r1, [pc, #216]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	4313      	orrs	r3, r2
 80023ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023ec:	f7ff fa2c 	bl	8001848 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f2:	e00a      	b.n	800240a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7ff fa28 	bl	8001848 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002402:	4293      	cmp	r3, r2
 8002404:	d901      	bls.n	800240a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e053      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 020c 	and.w	r2, r3, #12
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	429a      	cmp	r2, r3
 800241a:	d1eb      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800241c:	4b27      	ldr	r3, [pc, #156]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	429a      	cmp	r2, r3
 8002428:	d210      	bcs.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	4b24      	ldr	r3, [pc, #144]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f023 0207 	bic.w	r2, r3, #7
 8002432:	4922      	ldr	r1, [pc, #136]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243a:	4b20      	ldr	r3, [pc, #128]	; (80024bc <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d001      	beq.n	800244c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e032      	b.n	80024b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d008      	beq.n	800246a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002458:	4b19      	ldr	r3, [pc, #100]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	4916      	ldr	r1, [pc, #88]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b00      	cmp	r3, #0
 8002474:	d009      	beq.n	800248a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f000 f821 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800248e:	4602      	mov	r2, r0
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	490a      	ldr	r1, [pc, #40]	; (80024c4 <HAL_RCC_ClockConfig+0x1c8>)
 800249c:	5ccb      	ldrb	r3, [r1, r3]
 800249e:	fa22 f303 	lsr.w	r3, r2, r3
 80024a2:	4a09      	ldr	r2, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1cc>)
 80024a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1d0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff f98a 	bl	80017c4 <HAL_InitTick>

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40021000 	.word	0x40021000
 80024c4:	08002df4 	.word	0x08002df4
 80024c8:	20000060 	.word	0x20000060
 80024cc:	20000064 	.word	0x20000064

080024d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	2300      	movs	r3, #0
 80024dc:	60bb      	str	r3, [r7, #8]
 80024de:	2300      	movs	r3, #0
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	2300      	movs	r3, #0
 80024e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ea:	4b1e      	ldr	r3, [pc, #120]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d002      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0x30>
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x36>
 80024fe:	e027      	b.n	8002550 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002502:	613b      	str	r3, [r7, #16]
      break;
 8002504:	e027      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0c9b      	lsrs	r3, r3, #18
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002510:	5cd3      	ldrb	r3, [r2, r3]
 8002512:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d010      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0x94>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	0c5b      	lsrs	r3, r3, #17
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a0d      	ldr	r2, [pc, #52]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002532:	fb02 f203 	mul.w	r2, r2, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
 800253e:	e004      	b.n	800254a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a0c      	ldr	r2, [pc, #48]	; (8002574 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	613b      	str	r3, [r7, #16]
      break;
 800254e:	e002      	b.n	8002556 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002556:	693b      	ldr	r3, [r7, #16]
}
 8002558:	4618      	mov	r0, r3
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	007a1200 	.word	0x007a1200
 800256c:	08002e04 	.word	0x08002e04
 8002570:	08002e14 	.word	0x08002e14
 8002574:	003d0900 	.word	0x003d0900

08002578 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002580:	4b0a      	ldr	r3, [pc, #40]	; (80025ac <RCC_Delay+0x34>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0a      	ldr	r2, [pc, #40]	; (80025b0 <RCC_Delay+0x38>)
 8002586:	fba2 2303 	umull	r2, r3, r2, r3
 800258a:	0a5b      	lsrs	r3, r3, #9
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	60fa      	str	r2, [r7, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <RCC_Delay+0x1c>
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3714      	adds	r7, #20
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000060 	.word	0x20000060
 80025b0:	10624dd3 	.word	0x10624dd3

080025b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e041      	b.n	800264a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d106      	bne.n	80025e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff f85a 	bl	8001694 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2202      	movs	r2, #2
 80025e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3304      	adds	r3, #4
 80025f0:	4619      	mov	r1, r3
 80025f2:	4610      	mov	r0, r2
 80025f4:	f000 fa6e 	bl	8002ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2201      	movs	r2, #1
 800262c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b01      	cmp	r3, #1
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e035      	b.n	80026d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a16      	ldr	r2, [pc, #88]	; (80026e4 <HAL_TIM_Base_Start_IT+0x90>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x4e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_TIM_Base_Start_IT+0x94>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d111      	bne.n	80026c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2b06      	cmp	r3, #6
 80026b2:	d010      	beq.n	80026d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c4:	e007      	b.n	80026d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d122      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b02      	cmp	r3, #2
 800270e:	d11b      	bne.n	8002748 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f06f 0202 	mvn.w	r2, #2
 8002718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f9b4 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002734:	e005      	b.n	8002742 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f9a7 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f9b6 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b04      	cmp	r3, #4
 8002754:	d122      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f98a 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f97d 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f98c 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b08      	cmp	r3, #8
 80027a8:	d122      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	f003 0308 	and.w	r3, r3, #8
 80027b4:	2b08      	cmp	r3, #8
 80027b6:	d11b      	bne.n	80027f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f06f 0208 	mvn.w	r2, #8
 80027c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2204      	movs	r2, #4
 80027c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 f960 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 80027dc:	e005      	b.n	80027ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f953 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f962 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b10      	cmp	r3, #16
 80027fc:	d122      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	2b10      	cmp	r3, #16
 800280a:	d11b      	bne.n	8002844 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f06f 0210 	mvn.w	r2, #16
 8002814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2208      	movs	r2, #8
 800281a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002826:	2b00      	cmp	r3, #0
 8002828:	d003      	beq.n	8002832 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f936 	bl	8002a9c <HAL_TIM_IC_CaptureCallback>
 8002830:	e005      	b.n	800283e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f929 	bl	8002a8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f938 	bl	8002aae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10e      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f06f 0201 	mvn.w	r2, #1
 8002868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fe14 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287a:	2b80      	cmp	r3, #128	; 0x80
 800287c:	d10e      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002888:	2b80      	cmp	r3, #128	; 0x80
 800288a:	d107      	bne.n	800289c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002894:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fa6b 	bl	8002d72 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b40      	cmp	r3, #64	; 0x40
 80028a8:	d10e      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d107      	bne.n	80028c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f8fc 	bl	8002ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b20      	cmp	r3, #32
 80028d4:	d10e      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d107      	bne.n	80028f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0220 	mvn.w	r2, #32
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fa36 	bl	8002d60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f4:	bf00      	nop
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_TIM_ConfigClockSource+0x1c>
 8002914:	2302      	movs	r3, #2
 8002916:	e0b4      	b.n	8002a82 <HAL_TIM_ConfigClockSource+0x186>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2202      	movs	r2, #2
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800293e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68ba      	ldr	r2, [r7, #8]
 8002946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002950:	d03e      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0xd4>
 8002952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002956:	f200 8087 	bhi.w	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 800295a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295e:	f000 8086 	beq.w	8002a6e <HAL_TIM_ConfigClockSource+0x172>
 8002962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002966:	d87f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002968:	2b70      	cmp	r3, #112	; 0x70
 800296a:	d01a      	beq.n	80029a2 <HAL_TIM_ConfigClockSource+0xa6>
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d87b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002970:	2b60      	cmp	r3, #96	; 0x60
 8002972:	d050      	beq.n	8002a16 <HAL_TIM_ConfigClockSource+0x11a>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d877      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002978:	2b50      	cmp	r3, #80	; 0x50
 800297a:	d03c      	beq.n	80029f6 <HAL_TIM_ConfigClockSource+0xfa>
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	d873      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002980:	2b40      	cmp	r3, #64	; 0x40
 8002982:	d058      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0x13a>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d86f      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002988:	2b30      	cmp	r3, #48	; 0x30
 800298a:	d064      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800298c:	2b30      	cmp	r3, #48	; 0x30
 800298e:	d86b      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002990:	2b20      	cmp	r3, #32
 8002992:	d060      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d867      	bhi.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d05c      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 800299c:	2b10      	cmp	r3, #16
 800299e:	d05a      	beq.n	8002a56 <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	e062      	b.n	8002a68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6818      	ldr	r0, [r3, #0]
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f000 f95e 	bl	8002c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	609a      	str	r2, [r3, #8]
      break;
 80029ce:	e04f      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6899      	ldr	r1, [r3, #8]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	f000 f947 	bl	8002c72 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f2:	609a      	str	r2, [r3, #8]
      break;
 80029f4:	e03c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	6859      	ldr	r1, [r3, #4]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f000 f8be 	bl	8002b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2150      	movs	r1, #80	; 0x50
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f000 f915 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a14:	e02c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	6859      	ldr	r1, [r3, #4]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	461a      	mov	r2, r3
 8002a24:	f000 f8dc 	bl	8002be0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2160      	movs	r1, #96	; 0x60
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 f905 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a34:	e01c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6818      	ldr	r0, [r3, #0]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	6859      	ldr	r1, [r3, #4]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f000 f89e 	bl	8002b84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2140      	movs	r1, #64	; 0x40
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f000 f8f5 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a54:	e00c      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4610      	mov	r0, r2
 8002a62:	f000 f8ec 	bl	8002c3e <TIM_ITRx_SetConfig>
      break;
 8002a66:	e003      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a6c:	e000      	b.n	8002a70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr

08002ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr
	...

08002ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a25      	ldr	r2, [pc, #148]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d007      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af2:	d003      	beq.n	8002afc <TIM_Base_SetConfig+0x28>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d108      	bne.n	8002b0e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a1a      	ldr	r2, [pc, #104]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d007      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b1c:	d003      	beq.n	8002b26 <TIM_Base_SetConfig+0x52>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a17      	ldr	r2, [pc, #92]	; (8002b80 <TIM_Base_SetConfig+0xac>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d108      	bne.n	8002b38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <TIM_Base_SetConfig+0xa8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	40012c00 	.word	0x40012c00
 8002b80:	40000400 	.word	0x40000400

08002b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b087      	sub	sp, #28
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f023 0201 	bic.w	r2, r3, #1
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f023 030a 	bic.w	r3, r3, #10
 8002bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	697a      	ldr	r2, [r7, #20]
 8002bd4:	621a      	str	r2, [r3, #32]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a1b      	ldr	r3, [r3, #32]
 8002bf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	f023 0210 	bic.w	r2, r3, #16
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	031b      	lsls	r3, r3, #12
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	621a      	str	r2, [r3, #32]
}
 8002c34:	bf00      	nop
 8002c36:	371c      	adds	r7, #28
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
 8002c46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f043 0307 	orr.w	r3, r3, #7
 8002c60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	609a      	str	r2, [r3, #8]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bc80      	pop	{r7}
 8002c70:	4770      	bx	lr

08002c72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c72:	b480      	push	{r7}
 8002c74:	b087      	sub	sp, #28
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	60f8      	str	r0, [r7, #12]
 8002c7a:	60b9      	str	r1, [r7, #8]
 8002c7c:	607a      	str	r2, [r7, #4]
 8002c7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	021a      	lsls	r2, r3, #8
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	431a      	orrs	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	609a      	str	r2, [r3, #8]
}
 8002ca6:	bf00      	nop
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	e041      	b.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d009      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d14:	d004      	beq.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a10      	ldr	r2, [pc, #64]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d10c      	bne.n	8002d3a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3714      	adds	r7, #20
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bc80      	pop	{r7}
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40012c00 	.word	0x40012c00
 8002d5c:	40000400 	.word	0x40000400

08002d60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d68:	bf00      	nop
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	2600      	movs	r6, #0
 8002d88:	4d0c      	ldr	r5, [pc, #48]	; (8002dbc <__libc_init_array+0x38>)
 8002d8a:	4c0d      	ldr	r4, [pc, #52]	; (8002dc0 <__libc_init_array+0x3c>)
 8002d8c:	1b64      	subs	r4, r4, r5
 8002d8e:	10a4      	asrs	r4, r4, #2
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	f000 f822 	bl	8002ddc <_init>
 8002d98:	2600      	movs	r6, #0
 8002d9a:	4d0a      	ldr	r5, [pc, #40]	; (8002dc4 <__libc_init_array+0x40>)
 8002d9c:	4c0a      	ldr	r4, [pc, #40]	; (8002dc8 <__libc_init_array+0x44>)
 8002d9e:	1b64      	subs	r4, r4, r5
 8002da0:	10a4      	asrs	r4, r4, #2
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08002e18 	.word	0x08002e18
 8002dc0:	08002e18 	.word	0x08002e18
 8002dc4:	08002e18 	.word	0x08002e18
 8002dc8:	08002e1c 	.word	0x08002e1c

08002dcc <memset>:
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4402      	add	r2, r0
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <memset+0xa>
 8002dd4:	4770      	bx	lr
 8002dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dda:	e7f9      	b.n	8002dd0 <memset+0x4>

08002ddc <_init>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr

08002de8 <_fini>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr
