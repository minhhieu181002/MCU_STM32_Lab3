
Lab3_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cec  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002df8  08002df8  00012df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e1c  08002e1c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002e1c  08002e1c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e1c  08002e1c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e1c  08002e1c  00012e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e20  08002e20  00012e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  2000006c  08002e90  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002e90  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093f6  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a80  00000000  00000000  0002948b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002af10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000950  00000000  00000000  0002b960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b2f  00000000  00000000  0002c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b62a  00000000  00000000  00042ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824a5  00000000  00000000  0004e409  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d08ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d4  00000000  00000000  000d0904  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002de0 	.word	0x08002de0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002de0 	.word	0x08002de0

0800014c <isButton1Pressed>:
int keyReg10 = NORMAL_STATE;
int keyReg11 = NORMAL_STATE;

int TimerForKeyPress = 200;

int isButton1Pressed(int index){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (index == 1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b01      	cmp	r3, #1
 8000158:	d108      	bne.n	800016c <isButton1Pressed+0x20>
		if(button1_flag == 1){
 800015a:	4b13      	ldr	r3, [pc, #76]	; (80001a8 <isButton1Pressed+0x5c>)
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	2b01      	cmp	r3, #1
 8000160:	d104      	bne.n	800016c <isButton1Pressed+0x20>
			button1_flag = 0;
 8000162:	4b11      	ldr	r3, [pc, #68]	; (80001a8 <isButton1Pressed+0x5c>)
 8000164:	2200      	movs	r2, #0
 8000166:	601a      	str	r2, [r3, #0]
			return 1;
 8000168:	2301      	movs	r3, #1
 800016a:	e018      	b.n	800019e <isButton1Pressed+0x52>
		}
	}
	if(index == 2){
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	2b02      	cmp	r3, #2
 8000170:	d108      	bne.n	8000184 <isButton1Pressed+0x38>
		if(button2_flag == 1){
 8000172:	4b0e      	ldr	r3, [pc, #56]	; (80001ac <isButton1Pressed+0x60>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	2b01      	cmp	r3, #1
 8000178:	d104      	bne.n	8000184 <isButton1Pressed+0x38>
			button2_flag = 0;
 800017a:	4b0c      	ldr	r3, [pc, #48]	; (80001ac <isButton1Pressed+0x60>)
 800017c:	2200      	movs	r2, #0
 800017e:	601a      	str	r2, [r3, #0]
			return 1;
 8000180:	2301      	movs	r3, #1
 8000182:	e00c      	b.n	800019e <isButton1Pressed+0x52>
		}
	}
	if(index == 3){
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	2b03      	cmp	r3, #3
 8000188:	d108      	bne.n	800019c <isButton1Pressed+0x50>
		if(button3_flag == 1){
 800018a:	4b09      	ldr	r3, [pc, #36]	; (80001b0 <isButton1Pressed+0x64>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	2b01      	cmp	r3, #1
 8000190:	d104      	bne.n	800019c <isButton1Pressed+0x50>
			button3_flag = 0;
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <isButton1Pressed+0x64>)
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
			return 1;
 8000198:	2301      	movs	r3, #1
 800019a:	e000      	b.n	800019e <isButton1Pressed+0x52>
		}
	}

	return 0;
 800019c:	2300      	movs	r3, #0
}
 800019e:	4618      	mov	r0, r3
 80001a0:	370c      	adds	r7, #12
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr
 80001a8:	20000088 	.word	0x20000088
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	20000090 	.word	0x20000090

080001b4 <subKeyProcess1>:

void subKeyProcess1(){
 80001b4:	b480      	push	{r7}
 80001b6:	af00      	add	r7, sp, #0
	//TODO
	button1_flag = 1;
 80001b8:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <subKeyProcess1+0x14>)
 80001ba:	2201      	movs	r2, #1
 80001bc:	601a      	str	r2, [r3, #0]
}
 80001be:	bf00      	nop
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000088 	.word	0x20000088

080001cc <subKeyProcess2>:
void subKeyProcess2(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	button2_flag = 1;
 80001d0:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <subKeyProcess2+0x14>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	601a      	str	r2, [r3, #0]
}
 80001d6:	bf00      	nop
 80001d8:	46bd      	mov	sp, r7
 80001da:	bc80      	pop	{r7}
 80001dc:	4770      	bx	lr
 80001de:	bf00      	nop
 80001e0:	2000008c 	.word	0x2000008c

080001e4 <subKeyProcess3>:
void subKeyProcess3(){
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	button3_flag = 1;
 80001e8:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <subKeyProcess3+0x14>)
 80001ea:	2201      	movs	r2, #1
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	46bd      	mov	sp, r7
 80001f2:	bc80      	pop	{r7}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000090 	.word	0x20000090

080001fc <getKeyInput>:
void getKeyInput(){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	//button 1
	keyReg0 = keyReg1;
 8000200:	4b5c      	ldr	r3, [pc, #368]	; (8000374 <getKeyInput+0x178>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a5c      	ldr	r2, [pc, #368]	; (8000378 <getKeyInput+0x17c>)
 8000206:	6013      	str	r3, [r2, #0]
	keyReg1 = keyReg2;
 8000208:	4b5c      	ldr	r3, [pc, #368]	; (800037c <getKeyInput+0x180>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a59      	ldr	r2, [pc, #356]	; (8000374 <getKeyInput+0x178>)
 800020e:	6013      	str	r3, [r2, #0]
	keyReg2 = HAL_GPIO_ReadPin(MODE_GPIO_Port,MODE_Pin);
 8000210:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000214:	485a      	ldr	r0, [pc, #360]	; (8000380 <getKeyInput+0x184>)
 8000216:	f001 fdab 	bl	8001d70 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	461a      	mov	r2, r3
 800021e:	4b57      	ldr	r3, [pc, #348]	; (800037c <getKeyInput+0x180>)
 8000220:	601a      	str	r2, [r3, #0]
	if((keyReg0 == keyReg1) && (keyReg1 == keyReg2)){
 8000222:	4b55      	ldr	r3, [pc, #340]	; (8000378 <getKeyInput+0x17c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	4b53      	ldr	r3, [pc, #332]	; (8000374 <getKeyInput+0x178>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	429a      	cmp	r2, r3
 800022c:	d125      	bne.n	800027a <getKeyInput+0x7e>
 800022e:	4b51      	ldr	r3, [pc, #324]	; (8000374 <getKeyInput+0x178>)
 8000230:	681a      	ldr	r2, [r3, #0]
 8000232:	4b52      	ldr	r3, [pc, #328]	; (800037c <getKeyInput+0x180>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	429a      	cmp	r2, r3
 8000238:	d11f      	bne.n	800027a <getKeyInput+0x7e>
		if(keyReg3 != keyReg2) {// nhan tha
 800023a:	4b52      	ldr	r3, [pc, #328]	; (8000384 <getKeyInput+0x188>)
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b4f      	ldr	r3, [pc, #316]	; (800037c <getKeyInput+0x180>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	429a      	cmp	r2, r3
 8000244:	d00d      	beq.n	8000262 <getKeyInput+0x66>
			keyReg3 = keyReg2;
 8000246:	4b4d      	ldr	r3, [pc, #308]	; (800037c <getKeyInput+0x180>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a4e      	ldr	r2, [pc, #312]	; (8000384 <getKeyInput+0x188>)
 800024c:	6013      	str	r3, [r2, #0]
			if(keyReg2 == PRESSED_STATE){
 800024e:	4b4b      	ldr	r3, [pc, #300]	; (800037c <getKeyInput+0x180>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b00      	cmp	r3, #0
 8000254:	d111      	bne.n	800027a <getKeyInput+0x7e>
				//TODO
				subKeyProcess1();
 8000256:	f7ff ffad 	bl	80001b4 <subKeyProcess1>
				TimerForKeyPress = 200;
 800025a:	4b4b      	ldr	r3, [pc, #300]	; (8000388 <getKeyInput+0x18c>)
 800025c:	22c8      	movs	r2, #200	; 0xc8
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	e00b      	b.n	800027a <getKeyInput+0x7e>
			}
		}
		else{ // nhan de
			TimerForKeyPress--;
 8000262:	4b49      	ldr	r3, [pc, #292]	; (8000388 <getKeyInput+0x18c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	3b01      	subs	r3, #1
 8000268:	4a47      	ldr	r2, [pc, #284]	; (8000388 <getKeyInput+0x18c>)
 800026a:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 800026c:	4b46      	ldr	r3, [pc, #280]	; (8000388 <getKeyInput+0x18c>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	2b00      	cmp	r3, #0
 8000272:	d102      	bne.n	800027a <getKeyInput+0x7e>
				keyReg3 = NORMAL_STATE;
 8000274:	4b43      	ldr	r3, [pc, #268]	; (8000384 <getKeyInput+0x188>)
 8000276:	2201      	movs	r2, #1
 8000278:	601a      	str	r2, [r3, #0]
			}
		}
	}

	//button 2
	keyReg4 = keyReg5;
 800027a:	4b44      	ldr	r3, [pc, #272]	; (800038c <getKeyInput+0x190>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	4a44      	ldr	r2, [pc, #272]	; (8000390 <getKeyInput+0x194>)
 8000280:	6013      	str	r3, [r2, #0]
	keyReg5 = keyReg6;
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <getKeyInput+0x198>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	4a41      	ldr	r2, [pc, #260]	; (800038c <getKeyInput+0x190>)
 8000288:	6013      	str	r3, [r2, #0]
	keyReg6 = HAL_GPIO_ReadPin(ADD_GPIO_Port,ADD_Pin);
 800028a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800028e:	483c      	ldr	r0, [pc, #240]	; (8000380 <getKeyInput+0x184>)
 8000290:	f001 fd6e 	bl	8001d70 <HAL_GPIO_ReadPin>
 8000294:	4603      	mov	r3, r0
 8000296:	461a      	mov	r2, r3
 8000298:	4b3e      	ldr	r3, [pc, #248]	; (8000394 <getKeyInput+0x198>)
 800029a:	601a      	str	r2, [r3, #0]
	if((keyReg4 == keyReg5) && (keyReg5 == keyReg6)){
 800029c:	4b3c      	ldr	r3, [pc, #240]	; (8000390 <getKeyInput+0x194>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b3a      	ldr	r3, [pc, #232]	; (800038c <getKeyInput+0x190>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d125      	bne.n	80002f4 <getKeyInput+0xf8>
 80002a8:	4b38      	ldr	r3, [pc, #224]	; (800038c <getKeyInput+0x190>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b39      	ldr	r3, [pc, #228]	; (8000394 <getKeyInput+0x198>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	429a      	cmp	r2, r3
 80002b2:	d11f      	bne.n	80002f4 <getKeyInput+0xf8>
		if(keyReg7 != keyReg6) {// nhan tha
 80002b4:	4b38      	ldr	r3, [pc, #224]	; (8000398 <getKeyInput+0x19c>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	4b36      	ldr	r3, [pc, #216]	; (8000394 <getKeyInput+0x198>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	429a      	cmp	r2, r3
 80002be:	d00d      	beq.n	80002dc <getKeyInput+0xe0>
			keyReg7 = keyReg6;
 80002c0:	4b34      	ldr	r3, [pc, #208]	; (8000394 <getKeyInput+0x198>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a34      	ldr	r2, [pc, #208]	; (8000398 <getKeyInput+0x19c>)
 80002c6:	6013      	str	r3, [r2, #0]
			if(keyReg6 == PRESSED_STATE){
 80002c8:	4b32      	ldr	r3, [pc, #200]	; (8000394 <getKeyInput+0x198>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d111      	bne.n	80002f4 <getKeyInput+0xf8>
				//TODO
				subKeyProcess2();
 80002d0:	f7ff ff7c 	bl	80001cc <subKeyProcess2>
				TimerForKeyPress = 200;
 80002d4:	4b2c      	ldr	r3, [pc, #176]	; (8000388 <getKeyInput+0x18c>)
 80002d6:	22c8      	movs	r2, #200	; 0xc8
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	e00b      	b.n	80002f4 <getKeyInput+0xf8>
			}
		}
		else{ // nhan de
			TimerForKeyPress--;
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <getKeyInput+0x18c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	4a29      	ldr	r2, [pc, #164]	; (8000388 <getKeyInput+0x18c>)
 80002e4:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 80002e6:	4b28      	ldr	r3, [pc, #160]	; (8000388 <getKeyInput+0x18c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d102      	bne.n	80002f4 <getKeyInput+0xf8>
				keyReg7 = NORMAL_STATE;
 80002ee:	4b2a      	ldr	r3, [pc, #168]	; (8000398 <getKeyInput+0x19c>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	601a      	str	r2, [r3, #0]
			}
		}
	}
	//button 3
	keyReg8 = keyReg9;
 80002f4:	4b29      	ldr	r3, [pc, #164]	; (800039c <getKeyInput+0x1a0>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a29      	ldr	r2, [pc, #164]	; (80003a0 <getKeyInput+0x1a4>)
 80002fa:	6013      	str	r3, [r2, #0]
	keyReg9 = keyReg10;
 80002fc:	4b29      	ldr	r3, [pc, #164]	; (80003a4 <getKeyInput+0x1a8>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a26      	ldr	r2, [pc, #152]	; (800039c <getKeyInput+0x1a0>)
 8000302:	6013      	str	r3, [r2, #0]
	keyReg10 = HAL_GPIO_ReadPin(SET_GPIO_Port,SET_Pin);
 8000304:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000308:	481d      	ldr	r0, [pc, #116]	; (8000380 <getKeyInput+0x184>)
 800030a:	f001 fd31 	bl	8001d70 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b24      	ldr	r3, [pc, #144]	; (80003a4 <getKeyInput+0x1a8>)
 8000314:	601a      	str	r2, [r3, #0]
	if((keyReg8 == keyReg9) && (keyReg9 == keyReg10)){
 8000316:	4b22      	ldr	r3, [pc, #136]	; (80003a0 <getKeyInput+0x1a4>)
 8000318:	681a      	ldr	r2, [r3, #0]
 800031a:	4b20      	ldr	r3, [pc, #128]	; (800039c <getKeyInput+0x1a0>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	429a      	cmp	r2, r3
 8000320:	d125      	bne.n	800036e <getKeyInput+0x172>
 8000322:	4b1e      	ldr	r3, [pc, #120]	; (800039c <getKeyInput+0x1a0>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	4b1f      	ldr	r3, [pc, #124]	; (80003a4 <getKeyInput+0x1a8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	429a      	cmp	r2, r3
 800032c:	d11f      	bne.n	800036e <getKeyInput+0x172>
		if(keyReg11 != keyReg10) {// nhan tha
 800032e:	4b1e      	ldr	r3, [pc, #120]	; (80003a8 <getKeyInput+0x1ac>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4b1c      	ldr	r3, [pc, #112]	; (80003a4 <getKeyInput+0x1a8>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	429a      	cmp	r2, r3
 8000338:	d00d      	beq.n	8000356 <getKeyInput+0x15a>
			keyReg11 = keyReg10;
 800033a:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <getKeyInput+0x1a8>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1a      	ldr	r2, [pc, #104]	; (80003a8 <getKeyInput+0x1ac>)
 8000340:	6013      	str	r3, [r2, #0]
			if(keyReg10 == PRESSED_STATE){
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <getKeyInput+0x1a8>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d111      	bne.n	800036e <getKeyInput+0x172>
				//TODO
				subKeyProcess3();
 800034a:	f7ff ff4b 	bl	80001e4 <subKeyProcess3>
				TimerForKeyPress = 200;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <getKeyInput+0x18c>)
 8000350:	22c8      	movs	r2, #200	; 0xc8
 8000352:	601a      	str	r2, [r3, #0]
			if(TimerForKeyPress == 0){
				keyReg11 = NORMAL_STATE;
			}
		}
	}
}
 8000354:	e00b      	b.n	800036e <getKeyInput+0x172>
			TimerForKeyPress--;
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <getKeyInput+0x18c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a0a      	ldr	r2, [pc, #40]	; (8000388 <getKeyInput+0x18c>)
 800035e:	6013      	str	r3, [r2, #0]
			if(TimerForKeyPress == 0){
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <getKeyInput+0x18c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d102      	bne.n	800036e <getKeyInput+0x172>
				keyReg11 = NORMAL_STATE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	; (80003a8 <getKeyInput+0x1ac>)
 800036a:	2201      	movs	r2, #1
 800036c:	601a      	str	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000004 	.word	0x20000004
 8000378:	20000000 	.word	0x20000000
 800037c:	20000008 	.word	0x20000008
 8000380:	40010800 	.word	0x40010800
 8000384:	2000000c 	.word	0x2000000c
 8000388:	20000030 	.word	0x20000030
 800038c:	20000014 	.word	0x20000014
 8000390:	20000010 	.word	0x20000010
 8000394:	20000018 	.word	0x20000018
 8000398:	2000001c 	.word	0x2000001c
 800039c:	20000024 	.word	0x20000024
 80003a0:	20000020 	.word	0x20000020
 80003a4:	20000028 	.word	0x20000028
 80003a8:	2000002c 	.word	0x2000002c

080003ac <display7SEG>:

int led_buffer[4] = {0,6, 2, 3};



void display7SEG(int num) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b09      	cmp	r3, #9
 80003b8:	f200 8180 	bhi.w	80006bc <display7SEG+0x310>
 80003bc:	a201      	add	r2, pc, #4	; (adr r2, 80003c4 <display7SEG+0x18>)
 80003be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003c2:	bf00      	nop
 80003c4:	080003ed 	.word	0x080003ed
 80003c8:	08000435 	.word	0x08000435
 80003cc:	0800047d 	.word	0x0800047d
 80003d0:	080004c5 	.word	0x080004c5
 80003d4:	0800050d 	.word	0x0800050d
 80003d8:	08000555 	.word	0x08000555
 80003dc:	0800059d 	.word	0x0800059d
 80003e0:	080005e5 	.word	0x080005e5
 80003e4:	0800062d 	.word	0x0800062d
 80003e8:	08000675 	.word	0x08000675
  switch(num) {
	  case 0 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80003ec:	2200      	movs	r2, #0
 80003ee:	2101      	movs	r1, #1
 80003f0:	48c6      	ldr	r0, [pc, #792]	; (800070c <display7SEG+0x360>)
 80003f2:	f001 fcd4 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2102      	movs	r1, #2
 80003fa:	48c4      	ldr	r0, [pc, #784]	; (800070c <display7SEG+0x360>)
 80003fc:	f001 fccf 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000400:	2200      	movs	r2, #0
 8000402:	2104      	movs	r1, #4
 8000404:	48c1      	ldr	r0, [pc, #772]	; (800070c <display7SEG+0x360>)
 8000406:	f001 fcca 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800040a:	2200      	movs	r2, #0
 800040c:	2108      	movs	r1, #8
 800040e:	48bf      	ldr	r0, [pc, #764]	; (800070c <display7SEG+0x360>)
 8000410:	f001 fcc5 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000414:	2200      	movs	r2, #0
 8000416:	2110      	movs	r1, #16
 8000418:	48bc      	ldr	r0, [pc, #752]	; (800070c <display7SEG+0x360>)
 800041a:	f001 fcc0 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800041e:	2200      	movs	r2, #0
 8000420:	2120      	movs	r1, #32
 8000422:	48ba      	ldr	r0, [pc, #744]	; (800070c <display7SEG+0x360>)
 8000424:	f001 fcbb 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000428:	2201      	movs	r2, #1
 800042a:	2140      	movs	r1, #64	; 0x40
 800042c:	48b7      	ldr	r0, [pc, #732]	; (800070c <display7SEG+0x360>)
 800042e:	f001 fcb6 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 8000432:	e167      	b.n	8000704 <display7SEG+0x358>
	  }

	  case 1 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 8000434:	2201      	movs	r2, #1
 8000436:	2101      	movs	r1, #1
 8000438:	48b4      	ldr	r0, [pc, #720]	; (800070c <display7SEG+0x360>)
 800043a:	f001 fcb0 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800043e:	2200      	movs	r2, #0
 8000440:	2102      	movs	r1, #2
 8000442:	48b2      	ldr	r0, [pc, #712]	; (800070c <display7SEG+0x360>)
 8000444:	f001 fcab 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000448:	2200      	movs	r2, #0
 800044a:	2104      	movs	r1, #4
 800044c:	48af      	ldr	r0, [pc, #700]	; (800070c <display7SEG+0x360>)
 800044e:	f001 fca6 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000452:	2201      	movs	r2, #1
 8000454:	2108      	movs	r1, #8
 8000456:	48ad      	ldr	r0, [pc, #692]	; (800070c <display7SEG+0x360>)
 8000458:	f001 fca1 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 800045c:	2201      	movs	r2, #1
 800045e:	2110      	movs	r1, #16
 8000460:	48aa      	ldr	r0, [pc, #680]	; (800070c <display7SEG+0x360>)
 8000462:	f001 fc9c 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000466:	2201      	movs	r2, #1
 8000468:	2120      	movs	r1, #32
 800046a:	48a8      	ldr	r0, [pc, #672]	; (800070c <display7SEG+0x360>)
 800046c:	f001 fc97 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000470:	2201      	movs	r2, #1
 8000472:	2140      	movs	r1, #64	; 0x40
 8000474:	48a5      	ldr	r0, [pc, #660]	; (800070c <display7SEG+0x360>)
 8000476:	f001 fc92 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 800047a:	e143      	b.n	8000704 <display7SEG+0x358>
	  }

	  case 2 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	48a2      	ldr	r0, [pc, #648]	; (800070c <display7SEG+0x360>)
 8000482:	f001 fc8c 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	2102      	movs	r1, #2
 800048a:	48a0      	ldr	r0, [pc, #640]	; (800070c <display7SEG+0x360>)
 800048c:	f001 fc87 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 8000490:	2201      	movs	r2, #1
 8000492:	2104      	movs	r1, #4
 8000494:	489d      	ldr	r0, [pc, #628]	; (800070c <display7SEG+0x360>)
 8000496:	f001 fc82 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	489b      	ldr	r0, [pc, #620]	; (800070c <display7SEG+0x360>)
 80004a0:	f001 fc7d 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2110      	movs	r1, #16
 80004a8:	4898      	ldr	r0, [pc, #608]	; (800070c <display7SEG+0x360>)
 80004aa:	f001 fc78 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2120      	movs	r1, #32
 80004b2:	4896      	ldr	r0, [pc, #600]	; (800070c <display7SEG+0x360>)
 80004b4:	f001 fc73 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4893      	ldr	r0, [pc, #588]	; (800070c <display7SEG+0x360>)
 80004be:	f001 fc6e 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 80004c2:	e11f      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 3 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80004c4:	2200      	movs	r2, #0
 80004c6:	2101      	movs	r1, #1
 80004c8:	4890      	ldr	r0, [pc, #576]	; (800070c <display7SEG+0x360>)
 80004ca:	f001 fc68 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2102      	movs	r1, #2
 80004d2:	488e      	ldr	r0, [pc, #568]	; (800070c <display7SEG+0x360>)
 80004d4:	f001 fc63 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80004d8:	2200      	movs	r2, #0
 80004da:	2104      	movs	r1, #4
 80004dc:	488b      	ldr	r0, [pc, #556]	; (800070c <display7SEG+0x360>)
 80004de:	f001 fc5e 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2108      	movs	r1, #8
 80004e6:	4889      	ldr	r0, [pc, #548]	; (800070c <display7SEG+0x360>)
 80004e8:	f001 fc59 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2110      	movs	r1, #16
 80004f0:	4886      	ldr	r0, [pc, #536]	; (800070c <display7SEG+0x360>)
 80004f2:	f001 fc54 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2120      	movs	r1, #32
 80004fa:	4884      	ldr	r0, [pc, #528]	; (800070c <display7SEG+0x360>)
 80004fc:	f001 fc4f 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000500:	2200      	movs	r2, #0
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4881      	ldr	r0, [pc, #516]	; (800070c <display7SEG+0x360>)
 8000506:	f001 fc4a 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 800050a:	e0fb      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 4 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 800050c:	2201      	movs	r2, #1
 800050e:	2101      	movs	r1, #1
 8000510:	487e      	ldr	r0, [pc, #504]	; (800070c <display7SEG+0x360>)
 8000512:	f001 fc44 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000516:	2200      	movs	r2, #0
 8000518:	2102      	movs	r1, #2
 800051a:	487c      	ldr	r0, [pc, #496]	; (800070c <display7SEG+0x360>)
 800051c:	f001 fc3f 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000520:	2200      	movs	r2, #0
 8000522:	2104      	movs	r1, #4
 8000524:	4879      	ldr	r0, [pc, #484]	; (800070c <display7SEG+0x360>)
 8000526:	f001 fc3a 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 800052a:	2201      	movs	r2, #1
 800052c:	2108      	movs	r1, #8
 800052e:	4877      	ldr	r0, [pc, #476]	; (800070c <display7SEG+0x360>)
 8000530:	f001 fc35 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 8000534:	2201      	movs	r2, #1
 8000536:	2110      	movs	r1, #16
 8000538:	4874      	ldr	r0, [pc, #464]	; (800070c <display7SEG+0x360>)
 800053a:	f001 fc30 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	4872      	ldr	r0, [pc, #456]	; (800070c <display7SEG+0x360>)
 8000544:	f001 fc2b 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000548:	2200      	movs	r2, #0
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	486f      	ldr	r0, [pc, #444]	; (800070c <display7SEG+0x360>)
 800054e:	f001 fc26 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 8000552:	e0d7      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 5 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	486c      	ldr	r0, [pc, #432]	; (800070c <display7SEG+0x360>)
 800055a:	f001 fc20 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 800055e:	2201      	movs	r2, #1
 8000560:	2102      	movs	r1, #2
 8000562:	486a      	ldr	r0, [pc, #424]	; (800070c <display7SEG+0x360>)
 8000564:	f001 fc1b 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000568:	2200      	movs	r2, #0
 800056a:	2104      	movs	r1, #4
 800056c:	4867      	ldr	r0, [pc, #412]	; (800070c <display7SEG+0x360>)
 800056e:	f001 fc16 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	2108      	movs	r1, #8
 8000576:	4865      	ldr	r0, [pc, #404]	; (800070c <display7SEG+0x360>)
 8000578:	f001 fc11 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	2110      	movs	r1, #16
 8000580:	4862      	ldr	r0, [pc, #392]	; (800070c <display7SEG+0x360>)
 8000582:	f001 fc0c 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	2120      	movs	r1, #32
 800058a:	4860      	ldr	r0, [pc, #384]	; (800070c <display7SEG+0x360>)
 800058c:	f001 fc07 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000590:	2200      	movs	r2, #0
 8000592:	2140      	movs	r1, #64	; 0x40
 8000594:	485d      	ldr	r0, [pc, #372]	; (800070c <display7SEG+0x360>)
 8000596:	f001 fc02 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 800059a:	e0b3      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 6 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2101      	movs	r1, #1
 80005a0:	485a      	ldr	r0, [pc, #360]	; (800070c <display7SEG+0x360>)
 80005a2:	f001 fbfc 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2102      	movs	r1, #2
 80005aa:	4858      	ldr	r0, [pc, #352]	; (800070c <display7SEG+0x360>)
 80005ac:	f001 fbf7 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	4855      	ldr	r0, [pc, #340]	; (800070c <display7SEG+0x360>)
 80005b6:	f001 fbf2 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2108      	movs	r1, #8
 80005be:	4853      	ldr	r0, [pc, #332]	; (800070c <display7SEG+0x360>)
 80005c0:	f001 fbed 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2110      	movs	r1, #16
 80005c8:	4850      	ldr	r0, [pc, #320]	; (800070c <display7SEG+0x360>)
 80005ca:	f001 fbe8 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	484e      	ldr	r0, [pc, #312]	; (800070c <display7SEG+0x360>)
 80005d4:	f001 fbe3 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2140      	movs	r1, #64	; 0x40
 80005dc:	484b      	ldr	r0, [pc, #300]	; (800070c <display7SEG+0x360>)
 80005de:	f001 fbde 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 80005e2:	e08f      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 7 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2101      	movs	r1, #1
 80005e8:	4848      	ldr	r0, [pc, #288]	; (800070c <display7SEG+0x360>)
 80005ea:	f001 fbd8 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2102      	movs	r1, #2
 80005f2:	4846      	ldr	r0, [pc, #280]	; (800070c <display7SEG+0x360>)
 80005f4:	f001 fbd3 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2104      	movs	r1, #4
 80005fc:	4843      	ldr	r0, [pc, #268]	; (800070c <display7SEG+0x360>)
 80005fe:	f001 fbce 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	2108      	movs	r1, #8
 8000606:	4841      	ldr	r0, [pc, #260]	; (800070c <display7SEG+0x360>)
 8000608:	f001 fbc9 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	2110      	movs	r1, #16
 8000610:	483e      	ldr	r0, [pc, #248]	; (800070c <display7SEG+0x360>)
 8000612:	f001 fbc4 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 8000616:	2201      	movs	r2, #1
 8000618:	2120      	movs	r1, #32
 800061a:	483c      	ldr	r0, [pc, #240]	; (800070c <display7SEG+0x360>)
 800061c:	f001 fbbf 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4839      	ldr	r0, [pc, #228]	; (800070c <display7SEG+0x360>)
 8000626:	f001 fbba 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 800062a:	e06b      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 8 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4836      	ldr	r0, [pc, #216]	; (800070c <display7SEG+0x360>)
 8000632:	f001 fbb4 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 8000636:	2200      	movs	r2, #0
 8000638:	2102      	movs	r1, #2
 800063a:	4834      	ldr	r0, [pc, #208]	; (800070c <display7SEG+0x360>)
 800063c:	f001 fbaf 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2104      	movs	r1, #4
 8000644:	4831      	ldr	r0, [pc, #196]	; (800070c <display7SEG+0x360>)
 8000646:	f001 fbaa 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	482f      	ldr	r0, [pc, #188]	; (800070c <display7SEG+0x360>)
 8000650:	f001 fba5 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2110      	movs	r1, #16
 8000658:	482c      	ldr	r0, [pc, #176]	; (800070c <display7SEG+0x360>)
 800065a:	f001 fba0 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2120      	movs	r1, #32
 8000662:	482a      	ldr	r0, [pc, #168]	; (800070c <display7SEG+0x360>)
 8000664:	f001 fb9b 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 8000668:	2200      	movs	r2, #0
 800066a:	2140      	movs	r1, #64	; 0x40
 800066c:	4827      	ldr	r0, [pc, #156]	; (800070c <display7SEG+0x360>)
 800066e:	f001 fb96 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 8000672:	e047      	b.n	8000704 <display7SEG+0x358>
	  }
	  case 9 : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2101      	movs	r1, #1
 8000678:	4824      	ldr	r0, [pc, #144]	; (800070c <display7SEG+0x360>)
 800067a:	f001 fb90 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <display7SEG+0x360>)
 8000684:	f001 fb8b 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2104      	movs	r1, #4
 800068c:	481f      	ldr	r0, [pc, #124]	; (800070c <display7SEG+0x360>)
 800068e:	f001 fb86 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2108      	movs	r1, #8
 8000696:	481d      	ldr	r0, [pc, #116]	; (800070c <display7SEG+0x360>)
 8000698:	f001 fb81 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 800069c:	2201      	movs	r2, #1
 800069e:	2110      	movs	r1, #16
 80006a0:	481a      	ldr	r0, [pc, #104]	; (800070c <display7SEG+0x360>)
 80006a2:	f001 fb7c 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	2120      	movs	r1, #32
 80006aa:	4818      	ldr	r0, [pc, #96]	; (800070c <display7SEG+0x360>)
 80006ac:	f001 fb77 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 0);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2140      	movs	r1, #64	; 0x40
 80006b4:	4815      	ldr	r0, [pc, #84]	; (800070c <display7SEG+0x360>)
 80006b6:	f001 fb72 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 80006ba:	e023      	b.n	8000704 <display7SEG+0x358>
	  }

	  default : {
		  HAL_GPIO_WritePin(SEG0_GPIO_Port, SEG0_Pin, 1);
 80006bc:	2201      	movs	r2, #1
 80006be:	2101      	movs	r1, #1
 80006c0:	4812      	ldr	r0, [pc, #72]	; (800070c <display7SEG+0x360>)
 80006c2:	f001 fb6c 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG1_GPIO_Port, SEG1_Pin, 1);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2102      	movs	r1, #2
 80006ca:	4810      	ldr	r0, [pc, #64]	; (800070c <display7SEG+0x360>)
 80006cc:	f001 fb67 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG2_GPIO_Port, SEG2_Pin, 1);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2104      	movs	r1, #4
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <display7SEG+0x360>)
 80006d6:	f001 fb62 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG3_GPIO_Port, SEG3_Pin, 1);
 80006da:	2201      	movs	r2, #1
 80006dc:	2108      	movs	r1, #8
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <display7SEG+0x360>)
 80006e0:	f001 fb5d 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG4_GPIO_Port, SEG4_Pin, 1);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2110      	movs	r1, #16
 80006e8:	4808      	ldr	r0, [pc, #32]	; (800070c <display7SEG+0x360>)
 80006ea:	f001 fb58 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, 1);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2120      	movs	r1, #32
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <display7SEG+0x360>)
 80006f4:	f001 fb53 	bl	8001d9e <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2140      	movs	r1, #64	; 0x40
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <display7SEG+0x360>)
 80006fe:	f001 fb4e 	bl	8001d9e <HAL_GPIO_WritePin>
		  break;
 8000702:	bf00      	nop
	  }
  }
}
 8000704:	bf00      	nop
 8000706:	3708      	adds	r7, #8
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40010c00 	.word	0x40010c00

08000710 <updateLedBuffer>:


void updateLedBuffer (){
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
	// update led of road 1
	if(led_status1 == RED){
 8000714:	4bae      	ldr	r3, [pc, #696]	; (80009d0 <updateLedBuffer+0x2c0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d118      	bne.n	800074e <updateLedBuffer+0x3e>
		led_buffer[0] = cntRoad1/10;
 800071c:	4bad      	ldr	r3, [pc, #692]	; (80009d4 <updateLedBuffer+0x2c4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4aad      	ldr	r2, [pc, #692]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000722:	fb82 1203 	smull	r1, r2, r2, r3
 8000726:	1092      	asrs	r2, r2, #2
 8000728:	17db      	asrs	r3, r3, #31
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	4aab      	ldr	r2, [pc, #684]	; (80009dc <updateLedBuffer+0x2cc>)
 800072e:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000730:	4ba8      	ldr	r3, [pc, #672]	; (80009d4 <updateLedBuffer+0x2c4>)
 8000732:	6819      	ldr	r1, [r3, #0]
 8000734:	4ba8      	ldr	r3, [pc, #672]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000736:	fb83 2301 	smull	r2, r3, r3, r1
 800073a:	109a      	asrs	r2, r3, #2
 800073c:	17cb      	asrs	r3, r1, #31
 800073e:	1ad2      	subs	r2, r2, r3
 8000740:	4613      	mov	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4413      	add	r3, r2
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	1aca      	subs	r2, r1, r3
 800074a:	4ba4      	ldr	r3, [pc, #656]	; (80009dc <updateLedBuffer+0x2cc>)
 800074c:	605a      	str	r2, [r3, #4]
	}
	if(led_status1 == GREEN){
 800074e:	4ba0      	ldr	r3, [pc, #640]	; (80009d0 <updateLedBuffer+0x2c0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d118      	bne.n	8000788 <updateLedBuffer+0x78>
		led_buffer[0] = cntRoad1/10;
 8000756:	4b9f      	ldr	r3, [pc, #636]	; (80009d4 <updateLedBuffer+0x2c4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a9f      	ldr	r2, [pc, #636]	; (80009d8 <updateLedBuffer+0x2c8>)
 800075c:	fb82 1203 	smull	r1, r2, r2, r3
 8000760:	1092      	asrs	r2, r2, #2
 8000762:	17db      	asrs	r3, r3, #31
 8000764:	1ad3      	subs	r3, r2, r3
 8000766:	4a9d      	ldr	r2, [pc, #628]	; (80009dc <updateLedBuffer+0x2cc>)
 8000768:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 800076a:	4b9a      	ldr	r3, [pc, #616]	; (80009d4 <updateLedBuffer+0x2c4>)
 800076c:	6819      	ldr	r1, [r3, #0]
 800076e:	4b9a      	ldr	r3, [pc, #616]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000770:	fb83 2301 	smull	r2, r3, r3, r1
 8000774:	109a      	asrs	r2, r3, #2
 8000776:	17cb      	asrs	r3, r1, #31
 8000778:	1ad2      	subs	r2, r2, r3
 800077a:	4613      	mov	r3, r2
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	4413      	add	r3, r2
 8000780:	005b      	lsls	r3, r3, #1
 8000782:	1aca      	subs	r2, r1, r3
 8000784:	4b95      	ldr	r3, [pc, #596]	; (80009dc <updateLedBuffer+0x2cc>)
 8000786:	605a      	str	r2, [r3, #4]
	}
	if(led_status1 == AMBER){
 8000788:	4b91      	ldr	r3, [pc, #580]	; (80009d0 <updateLedBuffer+0x2c0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d118      	bne.n	80007c2 <updateLedBuffer+0xb2>
		led_buffer[0] = cntRoad1/10;
 8000790:	4b90      	ldr	r3, [pc, #576]	; (80009d4 <updateLedBuffer+0x2c4>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a90      	ldr	r2, [pc, #576]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000796:	fb82 1203 	smull	r1, r2, r2, r3
 800079a:	1092      	asrs	r2, r2, #2
 800079c:	17db      	asrs	r3, r3, #31
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	4a8e      	ldr	r2, [pc, #568]	; (80009dc <updateLedBuffer+0x2cc>)
 80007a2:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 80007a4:	4b8b      	ldr	r3, [pc, #556]	; (80009d4 <updateLedBuffer+0x2c4>)
 80007a6:	6819      	ldr	r1, [r3, #0]
 80007a8:	4b8b      	ldr	r3, [pc, #556]	; (80009d8 <updateLedBuffer+0x2c8>)
 80007aa:	fb83 2301 	smull	r2, r3, r3, r1
 80007ae:	109a      	asrs	r2, r3, #2
 80007b0:	17cb      	asrs	r3, r1, #31
 80007b2:	1ad2      	subs	r2, r2, r3
 80007b4:	4613      	mov	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	4413      	add	r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	1aca      	subs	r2, r1, r3
 80007be:	4b87      	ldr	r3, [pc, #540]	; (80009dc <updateLedBuffer+0x2cc>)
 80007c0:	605a      	str	r2, [r3, #4]
	}
	// update led of road 2
	if(led_status2 == GREEN){
 80007c2:	4b87      	ldr	r3, [pc, #540]	; (80009e0 <updateLedBuffer+0x2d0>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d118      	bne.n	80007fc <updateLedBuffer+0xec>
			led_buffer[2] = cntRoad2/10;
 80007ca:	4b86      	ldr	r3, [pc, #536]	; (80009e4 <updateLedBuffer+0x2d4>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a82      	ldr	r2, [pc, #520]	; (80009d8 <updateLedBuffer+0x2c8>)
 80007d0:	fb82 1203 	smull	r1, r2, r2, r3
 80007d4:	1092      	asrs	r2, r2, #2
 80007d6:	17db      	asrs	r3, r3, #31
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	4a80      	ldr	r2, [pc, #512]	; (80009dc <updateLedBuffer+0x2cc>)
 80007dc:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 80007de:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <updateLedBuffer+0x2d4>)
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	4b7d      	ldr	r3, [pc, #500]	; (80009d8 <updateLedBuffer+0x2c8>)
 80007e4:	fb83 2301 	smull	r2, r3, r3, r1
 80007e8:	109a      	asrs	r2, r3, #2
 80007ea:	17cb      	asrs	r3, r1, #31
 80007ec:	1ad2      	subs	r2, r2, r3
 80007ee:	4613      	mov	r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	1aca      	subs	r2, r1, r3
 80007f8:	4b78      	ldr	r3, [pc, #480]	; (80009dc <updateLedBuffer+0x2cc>)
 80007fa:	60da      	str	r2, [r3, #12]
		}
		if(led_status2 == AMBER){
 80007fc:	4b78      	ldr	r3, [pc, #480]	; (80009e0 <updateLedBuffer+0x2d0>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d118      	bne.n	8000836 <updateLedBuffer+0x126>
			led_buffer[2] = cntRoad2/10;
 8000804:	4b77      	ldr	r3, [pc, #476]	; (80009e4 <updateLedBuffer+0x2d4>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a73      	ldr	r2, [pc, #460]	; (80009d8 <updateLedBuffer+0x2c8>)
 800080a:	fb82 1203 	smull	r1, r2, r2, r3
 800080e:	1092      	asrs	r2, r2, #2
 8000810:	17db      	asrs	r3, r3, #31
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	4a71      	ldr	r2, [pc, #452]	; (80009dc <updateLedBuffer+0x2cc>)
 8000816:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 8000818:	4b72      	ldr	r3, [pc, #456]	; (80009e4 <updateLedBuffer+0x2d4>)
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	4b6e      	ldr	r3, [pc, #440]	; (80009d8 <updateLedBuffer+0x2c8>)
 800081e:	fb83 2301 	smull	r2, r3, r3, r1
 8000822:	109a      	asrs	r2, r3, #2
 8000824:	17cb      	asrs	r3, r1, #31
 8000826:	1ad2      	subs	r2, r2, r3
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	1aca      	subs	r2, r1, r3
 8000832:	4b6a      	ldr	r3, [pc, #424]	; (80009dc <updateLedBuffer+0x2cc>)
 8000834:	60da      	str	r2, [r3, #12]
		}
		if(led_status2 == RED){
 8000836:	4b6a      	ldr	r3, [pc, #424]	; (80009e0 <updateLedBuffer+0x2d0>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d118      	bne.n	8000870 <updateLedBuffer+0x160>
			led_buffer[2] = cntRoad2/10;
 800083e:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <updateLedBuffer+0x2d4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a65      	ldr	r2, [pc, #404]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000844:	fb82 1203 	smull	r1, r2, r2, r3
 8000848:	1092      	asrs	r2, r2, #2
 800084a:	17db      	asrs	r3, r3, #31
 800084c:	1ad3      	subs	r3, r2, r3
 800084e:	4a63      	ldr	r2, [pc, #396]	; (80009dc <updateLedBuffer+0x2cc>)
 8000850:	6093      	str	r3, [r2, #8]
			led_buffer[3] = cntRoad2%10;
 8000852:	4b64      	ldr	r3, [pc, #400]	; (80009e4 <updateLedBuffer+0x2d4>)
 8000854:	6819      	ldr	r1, [r3, #0]
 8000856:	4b60      	ldr	r3, [pc, #384]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000858:	fb83 2301 	smull	r2, r3, r3, r1
 800085c:	109a      	asrs	r2, r3, #2
 800085e:	17cb      	asrs	r3, r1, #31
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	1aca      	subs	r2, r1, r3
 800086c:	4b5b      	ldr	r3, [pc, #364]	; (80009dc <updateLedBuffer+0x2cc>)
 800086e:	60da      	str	r2, [r3, #12]
		}
	if((led_status1 == DISPLAY_VALUE_RED) && (led_status2 == MODE_RED)){
 8000870:	4b57      	ldr	r3, [pc, #348]	; (80009d0 <updateLedBuffer+0x2c0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	2b03      	cmp	r3, #3
 8000876:	d135      	bne.n	80008e4 <updateLedBuffer+0x1d4>
 8000878:	4b59      	ldr	r3, [pc, #356]	; (80009e0 <updateLedBuffer+0x2d0>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b14      	cmp	r3, #20
 800087e:	d131      	bne.n	80008e4 <updateLedBuffer+0x1d4>
		led_buffer[0] = cntRoad1/10;
 8000880:	4b54      	ldr	r3, [pc, #336]	; (80009d4 <updateLedBuffer+0x2c4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a54      	ldr	r2, [pc, #336]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000886:	fb82 1203 	smull	r1, r2, r2, r3
 800088a:	1092      	asrs	r2, r2, #2
 800088c:	17db      	asrs	r3, r3, #31
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	4a52      	ldr	r2, [pc, #328]	; (80009dc <updateLedBuffer+0x2cc>)
 8000892:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000894:	4b4f      	ldr	r3, [pc, #316]	; (80009d4 <updateLedBuffer+0x2c4>)
 8000896:	6819      	ldr	r1, [r3, #0]
 8000898:	4b4f      	ldr	r3, [pc, #316]	; (80009d8 <updateLedBuffer+0x2c8>)
 800089a:	fb83 2301 	smull	r2, r3, r3, r1
 800089e:	109a      	asrs	r2, r3, #2
 80008a0:	17cb      	asrs	r3, r1, #31
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	4b4b      	ldr	r3, [pc, #300]	; (80009dc <updateLedBuffer+0x2cc>)
 80008b0:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 80008b2:	4b4c      	ldr	r3, [pc, #304]	; (80009e4 <updateLedBuffer+0x2d4>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a48      	ldr	r2, [pc, #288]	; (80009d8 <updateLedBuffer+0x2c8>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1092      	asrs	r2, r2, #2
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	4a46      	ldr	r2, [pc, #280]	; (80009dc <updateLedBuffer+0x2cc>)
 80008c4:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 80008c6:	4b47      	ldr	r3, [pc, #284]	; (80009e4 <updateLedBuffer+0x2d4>)
 80008c8:	6819      	ldr	r1, [r3, #0]
 80008ca:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <updateLedBuffer+0x2c8>)
 80008cc:	fb83 2301 	smull	r2, r3, r3, r1
 80008d0:	109a      	asrs	r2, r3, #2
 80008d2:	17cb      	asrs	r3, r1, #31
 80008d4:	1ad2      	subs	r2, r2, r3
 80008d6:	4613      	mov	r3, r2
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4413      	add	r3, r2
 80008dc:	005b      	lsls	r3, r3, #1
 80008de:	1aca      	subs	r2, r1, r3
 80008e0:	4b3e      	ldr	r3, [pc, #248]	; (80009dc <updateLedBuffer+0x2cc>)
 80008e2:	60da      	str	r2, [r3, #12]
	}
	if((led_status1 == DISPLAY_VALUE_GREEN) && (led_status2 == MODE_GREEN)){
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <updateLedBuffer+0x2c0>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	d135      	bne.n	8000958 <updateLedBuffer+0x248>
 80008ec:	4b3c      	ldr	r3, [pc, #240]	; (80009e0 <updateLedBuffer+0x2d0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b15      	cmp	r3, #21
 80008f2:	d131      	bne.n	8000958 <updateLedBuffer+0x248>
		led_buffer[0] = cntRoad1/10;
 80008f4:	4b37      	ldr	r3, [pc, #220]	; (80009d4 <updateLedBuffer+0x2c4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a37      	ldr	r2, [pc, #220]	; (80009d8 <updateLedBuffer+0x2c8>)
 80008fa:	fb82 1203 	smull	r1, r2, r2, r3
 80008fe:	1092      	asrs	r2, r2, #2
 8000900:	17db      	asrs	r3, r3, #31
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	4a35      	ldr	r2, [pc, #212]	; (80009dc <updateLedBuffer+0x2cc>)
 8000906:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 8000908:	4b32      	ldr	r3, [pc, #200]	; (80009d4 <updateLedBuffer+0x2c4>)
 800090a:	6819      	ldr	r1, [r3, #0]
 800090c:	4b32      	ldr	r3, [pc, #200]	; (80009d8 <updateLedBuffer+0x2c8>)
 800090e:	fb83 2301 	smull	r2, r3, r3, r1
 8000912:	109a      	asrs	r2, r3, #2
 8000914:	17cb      	asrs	r3, r1, #31
 8000916:	1ad2      	subs	r2, r2, r3
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	1aca      	subs	r2, r1, r3
 8000922:	4b2e      	ldr	r3, [pc, #184]	; (80009dc <updateLedBuffer+0x2cc>)
 8000924:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 8000926:	4b2f      	ldr	r3, [pc, #188]	; (80009e4 <updateLedBuffer+0x2d4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a2b      	ldr	r2, [pc, #172]	; (80009d8 <updateLedBuffer+0x2c8>)
 800092c:	fb82 1203 	smull	r1, r2, r2, r3
 8000930:	1092      	asrs	r2, r2, #2
 8000932:	17db      	asrs	r3, r3, #31
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a29      	ldr	r2, [pc, #164]	; (80009dc <updateLedBuffer+0x2cc>)
 8000938:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 800093a:	4b2a      	ldr	r3, [pc, #168]	; (80009e4 <updateLedBuffer+0x2d4>)
 800093c:	6819      	ldr	r1, [r3, #0]
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000940:	fb83 2301 	smull	r2, r3, r3, r1
 8000944:	109a      	asrs	r2, r3, #2
 8000946:	17cb      	asrs	r3, r1, #31
 8000948:	1ad2      	subs	r2, r2, r3
 800094a:	4613      	mov	r3, r2
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	4413      	add	r3, r2
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	1aca      	subs	r2, r1, r3
 8000954:	4b21      	ldr	r3, [pc, #132]	; (80009dc <updateLedBuffer+0x2cc>)
 8000956:	60da      	str	r2, [r3, #12]
	}
	if((led_status1 == DISPLAY_VALUE_AMBER) && (led_status2 == MODE_AMBER)){
 8000958:	4b1d      	ldr	r3, [pc, #116]	; (80009d0 <updateLedBuffer+0x2c0>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b05      	cmp	r3, #5
 800095e:	d143      	bne.n	80009e8 <updateLedBuffer+0x2d8>
 8000960:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <updateLedBuffer+0x2d0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b16      	cmp	r3, #22
 8000966:	d13f      	bne.n	80009e8 <updateLedBuffer+0x2d8>
		led_buffer[0] = cntRoad1/10;
 8000968:	4b1a      	ldr	r3, [pc, #104]	; (80009d4 <updateLedBuffer+0x2c4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a1a      	ldr	r2, [pc, #104]	; (80009d8 <updateLedBuffer+0x2c8>)
 800096e:	fb82 1203 	smull	r1, r2, r2, r3
 8000972:	1092      	asrs	r2, r2, #2
 8000974:	17db      	asrs	r3, r3, #31
 8000976:	1ad3      	subs	r3, r2, r3
 8000978:	4a18      	ldr	r2, [pc, #96]	; (80009dc <updateLedBuffer+0x2cc>)
 800097a:	6013      	str	r3, [r2, #0]
		led_buffer[1] = cntRoad1%10;
 800097c:	4b15      	ldr	r3, [pc, #84]	; (80009d4 <updateLedBuffer+0x2c4>)
 800097e:	6819      	ldr	r1, [r3, #0]
 8000980:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <updateLedBuffer+0x2c8>)
 8000982:	fb83 2301 	smull	r2, r3, r3, r1
 8000986:	109a      	asrs	r2, r3, #2
 8000988:	17cb      	asrs	r3, r1, #31
 800098a:	1ad2      	subs	r2, r2, r3
 800098c:	4613      	mov	r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	1aca      	subs	r2, r1, r3
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <updateLedBuffer+0x2cc>)
 8000998:	605a      	str	r2, [r3, #4]
		led_buffer[2] = cntRoad2/10;
 800099a:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <updateLedBuffer+0x2d4>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a0e      	ldr	r2, [pc, #56]	; (80009d8 <updateLedBuffer+0x2c8>)
 80009a0:	fb82 1203 	smull	r1, r2, r2, r3
 80009a4:	1092      	asrs	r2, r2, #2
 80009a6:	17db      	asrs	r3, r3, #31
 80009a8:	1ad3      	subs	r3, r2, r3
 80009aa:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <updateLedBuffer+0x2cc>)
 80009ac:	6093      	str	r3, [r2, #8]
		led_buffer[3] = cntRoad2%10;
 80009ae:	4b0d      	ldr	r3, [pc, #52]	; (80009e4 <updateLedBuffer+0x2d4>)
 80009b0:	6819      	ldr	r1, [r3, #0]
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <updateLedBuffer+0x2c8>)
 80009b4:	fb83 2301 	smull	r2, r3, r3, r1
 80009b8:	109a      	asrs	r2, r3, #2
 80009ba:	17cb      	asrs	r3, r1, #31
 80009bc:	1ad2      	subs	r2, r2, r3
 80009be:	4613      	mov	r3, r2
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	4413      	add	r3, r2
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	1aca      	subs	r2, r1, r3
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <updateLedBuffer+0x2cc>)
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	e00c      	b.n	80009e8 <updateLedBuffer+0x2d8>
 80009ce:	bf00      	nop
 80009d0:	2000009c 	.word	0x2000009c
 80009d4:	200000c8 	.word	0x200000c8
 80009d8:	66666667 	.word	0x66666667
 80009dc:	20000034 	.word	0x20000034
 80009e0:	2000005c 	.word	0x2000005c
 80009e4:	200000cc 	.word	0x200000cc
	}

}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <update7SEG>:
void update7SEG ( int index ){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
	updateLedBuffer();
 80009f8:	f7ff fe8a 	bl	8000710 <updateLedBuffer>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d872      	bhi.n	8000ae8 <update7SEG+0xf8>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <update7SEG+0x18>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a19 	.word	0x08000a19
 8000a0c:	08000a4d 	.word	0x08000a4d
 8000a10:	08000a81 	.word	0x08000a81
 8000a14:	08000ab5 	.word	0x08000ab5
	switch ( index ){
		case 0:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2110      	movs	r1, #16
 8000a1c:	4835      	ldr	r0, [pc, #212]	; (8000af4 <update7SEG+0x104>)
 8000a1e:	f001 f9be 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 8000a22:	2201      	movs	r2, #1
 8000a24:	2120      	movs	r1, #32
 8000a26:	4833      	ldr	r0, [pc, #204]	; (8000af4 <update7SEG+0x104>)
 8000a28:	f001 f9b9 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	2140      	movs	r1, #64	; 0x40
 8000a30:	4830      	ldr	r0, [pc, #192]	; (8000af4 <update7SEG+0x104>)
 8000a32:	f001 f9b4 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2180      	movs	r1, #128	; 0x80
 8000a3a:	482e      	ldr	r0, [pc, #184]	; (8000af4 <update7SEG+0x104>)
 8000a3c:	f001 f9af 	bl	8001d9e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[0]);
 8000a40:	4b2d      	ldr	r3, [pc, #180]	; (8000af8 <update7SEG+0x108>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff fcb1 	bl	80003ac <display7SEG>
			break ;
 8000a4a:	e04e      	b.n	8000aea <update7SEG+0xfa>
		case 1:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2110      	movs	r1, #16
 8000a50:	4828      	ldr	r0, [pc, #160]	; (8000af4 <update7SEG+0x104>)
 8000a52:	f001 f9a4 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2120      	movs	r1, #32
 8000a5a:	4826      	ldr	r0, [pc, #152]	; (8000af4 <update7SEG+0x104>)
 8000a5c:	f001 f99f 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2140      	movs	r1, #64	; 0x40
 8000a64:	4823      	ldr	r0, [pc, #140]	; (8000af4 <update7SEG+0x104>)
 8000a66:	f001 f99a 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	4821      	ldr	r0, [pc, #132]	; (8000af4 <update7SEG+0x104>)
 8000a70:	f001 f995 	bl	8001d9e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[1]);
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <update7SEG+0x108>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fc97 	bl	80003ac <display7SEG>
			break ;
 8000a7e:	e034      	b.n	8000aea <update7SEG+0xfa>
		case 2:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 8000a80:	2201      	movs	r2, #1
 8000a82:	2110      	movs	r1, #16
 8000a84:	481b      	ldr	r0, [pc, #108]	; (8000af4 <update7SEG+0x104>)
 8000a86:	f001 f98a 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	2120      	movs	r1, #32
 8000a8e:	4819      	ldr	r0, [pc, #100]	; (8000af4 <update7SEG+0x104>)
 8000a90:	f001 f985 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,0);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	4816      	ldr	r0, [pc, #88]	; (8000af4 <update7SEG+0x104>)
 8000a9a:	f001 f980 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,1);
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	2180      	movs	r1, #128	; 0x80
 8000aa2:	4814      	ldr	r0, [pc, #80]	; (8000af4 <update7SEG+0x104>)
 8000aa4:	f001 f97b 	bl	8001d9e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[2]);
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <update7SEG+0x108>)
 8000aaa:	689b      	ldr	r3, [r3, #8]
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fc7d 	bl	80003ac <display7SEG>
			break;
 8000ab2:	e01a      	b.n	8000aea <update7SEG+0xfa>
		case 3:
			HAL_GPIO_WritePin(GPIOA,EN0_Pin,1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	480e      	ldr	r0, [pc, #56]	; (8000af4 <update7SEG+0x104>)
 8000aba:	f001 f970 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN1_Pin,1);
 8000abe:	2201      	movs	r2, #1
 8000ac0:	2120      	movs	r1, #32
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <update7SEG+0x104>)
 8000ac4:	f001 f96b 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN2_Pin,1);
 8000ac8:	2201      	movs	r2, #1
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <update7SEG+0x104>)
 8000ace:	f001 f966 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, EN3_Pin,0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <update7SEG+0x104>)
 8000ad8:	f001 f961 	bl	8001d9e <HAL_GPIO_WritePin>
			display7SEG(led_buffer[3]);
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <update7SEG+0x108>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff fc63 	bl	80003ac <display7SEG>
			break;
 8000ae6:	e000      	b.n	8000aea <update7SEG+0xfa>
		default :
			break ;
 8000ae8:	bf00      	nop
 	 }
 }
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40010800 	.word	0x40010800
 8000af8:	20000034 	.word	0x20000034

08000afc <fsm_automatic_run>:

void fsm_automatic_run() {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
		switch(status){
 8000b00:	4bad      	ldr	r3, [pc, #692]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	2b04      	cmp	r3, #4
 8000b08:	f200 811b 	bhi.w	8000d42 <fsm_automatic_run+0x246>
 8000b0c:	a201      	add	r2, pc, #4	; (adr r2, 8000b14 <fsm_automatic_run+0x18>)
 8000b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b12:	bf00      	nop
 8000b14:	08000b29 	.word	0x08000b29
 8000b18:	08000b89 	.word	0x08000b89
 8000b1c:	08000c0b 	.word	0x08000c0b
 8000b20:	08000c73 	.word	0x08000c73
 8000b24:	08000cdb 	.word	0x08000cdb
		case INIT:
			//todo
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b2e:	48a3      	ldr	r0, [pc, #652]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b30:	f001 f935 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b3a:	48a0      	ldr	r0, [pc, #640]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b3c:	f001 f92f 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b46:	489d      	ldr	r0, [pc, #628]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b48:	f001 f929 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b52:	489a      	ldr	r0, [pc, #616]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b54:	f001 f923 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000b58:	2201      	movs	r2, #1
 8000b5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b5e:	4897      	ldr	r0, [pc, #604]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b60:	f001 f91d 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4894      	ldr	r0, [pc, #592]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b6c:	f001 f917 	bl	8001d9e <HAL_GPIO_WritePin>
			status = AUTO_RED_GREEN;
 8000b70:	4b91      	ldr	r3, [pc, #580]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000b72:	2202      	movs	r2, #2
 8000b74:	601a      	str	r2, [r3, #0]
			setTimer1(arr[TIME_FOR_RED_GREEN]*100); //3s
 8000b76:	4b92      	ldr	r3, [pc, #584]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	2264      	movs	r2, #100	; 0x64
 8000b7c:	fb02 f303 	mul.w	r3, r2, r3
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fc9d 	bl	80014c0 <setTimer1>
			break;
 8000b86:	e0e5      	b.n	8000d54 <fsm_automatic_run+0x258>
		case AUTO_RED_GREEN:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	488b      	ldr	r0, [pc, #556]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b90:	f001 f905 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9a:	4888      	ldr	r0, [pc, #544]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000b9c:	f001 f8ff 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba6:	4885      	ldr	r0, [pc, #532]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000ba8:	f001 f8f9 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000bac:	2201      	movs	r2, #1
 8000bae:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb2:	4882      	ldr	r0, [pc, #520]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000bb4:	f001 f8f3 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bbe:	487f      	ldr	r0, [pc, #508]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000bc0:	f001 f8ed 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bca:	487c      	ldr	r0, [pc, #496]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000bcc:	f001 f8e7 	bl	8001d9e <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000bd0:	4b7c      	ldr	r3, [pc, #496]	; (8000dc4 <fsm_automatic_run+0x2c8>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d10a      	bne.n	8000bee <fsm_automatic_run+0xf2>
				status = AUTO_RED_AMBER;
 8000bd8:	4b77      	ldr	r3, [pc, #476]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000bda:	2203      	movs	r2, #3
 8000bdc:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_RED_AMBER]*100); //2s
 8000bde:	4b78      	ldr	r3, [pc, #480]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2264      	movs	r2, #100	; 0x64
 8000be4:	fb02 f303 	mul.w	r3, r2, r3
 8000be8:	4618      	mov	r0, r3
 8000bea:	f000 fc69 	bl	80014c0 <setTimer1>
			}
			if(isButton1Pressed(1) == 1){
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff faac 	bl	800014c <isButton1Pressed>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	f040 80a5 	bne.w	8000d46 <fsm_automatic_run+0x24a>
				status = MAN_RED;
 8000bfc:	4b6e      	ldr	r3, [pc, #440]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
				setTimer1(100);
 8000c02:	2064      	movs	r0, #100	; 0x64
 8000c04:	f000 fc5c 	bl	80014c0 <setTimer1>
			}
			break;
 8000c08:	e09d      	b.n	8000d46 <fsm_automatic_run+0x24a>
		case AUTO_RED_AMBER:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c10:	486a      	ldr	r0, [pc, #424]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c12:	f001 f8c4 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c1c:	4867      	ldr	r0, [pc, #412]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c1e:	f001 f8be 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000c22:	2201      	movs	r2, #1
 8000c24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c28:	4864      	ldr	r0, [pc, #400]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c2a:	f001 f8b8 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c34:	4861      	ldr	r0, [pc, #388]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c36:	f001 f8b2 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c40:	485e      	ldr	r0, [pc, #376]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c42:	f001 f8ac 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c4c:	485b      	ldr	r0, [pc, #364]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c4e:	f001 f8a6 	bl	8001d9e <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000c52:	4b5c      	ldr	r3, [pc, #368]	; (8000dc4 <fsm_automatic_run+0x2c8>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d177      	bne.n	8000d4a <fsm_automatic_run+0x24e>
				status = AUTO_GREEN_RED;
 8000c5a:	4b57      	ldr	r3, [pc, #348]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_GREEN_RED]*100); //3s
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	2264      	movs	r2, #100	; 0x64
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f000 fc28 	bl	80014c0 <setTimer1>
			}
			break;
 8000c70:	e06b      	b.n	8000d4a <fsm_automatic_run+0x24e>
		case AUTO_GREEN_RED:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	4850      	ldr	r0, [pc, #320]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c7a:	f001 f890 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c84:	484d      	ldr	r0, [pc, #308]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c86:	f001 f88a 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c90:	484a      	ldr	r0, [pc, #296]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c92:	f001 f884 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000c96:	2200      	movs	r2, #0
 8000c98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c9c:	4847      	ldr	r0, [pc, #284]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000c9e:	f001 f87e 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ca8:	4844      	ldr	r0, [pc, #272]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000caa:	f001 f878 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cb4:	4841      	ldr	r0, [pc, #260]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000cb6:	f001 f872 	bl	8001d9e <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000cba:	4b42      	ldr	r3, [pc, #264]	; (8000dc4 <fsm_automatic_run+0x2c8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d145      	bne.n	8000d4e <fsm_automatic_run+0x252>
				status = AUTO_AMBER_RED;
 8000cc2:	4b3d      	ldr	r3, [pc, #244]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_AMBER_RED]*100);
 8000cc8:	4b3d      	ldr	r3, [pc, #244]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	2264      	movs	r2, #100	; 0x64
 8000cce:	fb02 f303 	mul.w	r3, r2, r3
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 fbf4 	bl	80014c0 <setTimer1>
			}
			break;
 8000cd8:	e039      	b.n	8000d4e <fsm_automatic_run+0x252>
		case AUTO_AMBER_RED:
			HAL_GPIO_WritePin(D1_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ce0:	4836      	ldr	r0, [pc, #216]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000ce2:	f001 f85c 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cec:	4833      	ldr	r0, [pc, #204]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000cee:	f001 f856 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf8:	4830      	ldr	r0, [pc, #192]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000cfa:	f001 f850 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d04:	482d      	ldr	r0, [pc, #180]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000d06:	f001 f84a 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d10:	482a      	ldr	r0, [pc, #168]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000d12:	f001 f844 	bl	8001d9e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d1c:	4827      	ldr	r0, [pc, #156]	; (8000dbc <fsm_automatic_run+0x2c0>)
 8000d1e:	f001 f83e 	bl	8001d9e <HAL_GPIO_WritePin>
			if (timer1_flag == 1){
 8000d22:	4b28      	ldr	r3, [pc, #160]	; (8000dc4 <fsm_automatic_run+0x2c8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d113      	bne.n	8000d52 <fsm_automatic_run+0x256>
				status = AUTO_RED_GREEN;
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <fsm_automatic_run+0x2bc>)
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	601a      	str	r2, [r3, #0]
				setTimer1(arr[TIME_FOR_RED_GREEN]*100);
 8000d30:	4b23      	ldr	r3, [pc, #140]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	2264      	movs	r2, #100	; 0x64
 8000d36:	fb02 f303 	mul.w	r3, r2, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 fbc0 	bl	80014c0 <setTimer1>
			}
			break;
 8000d40:	e007      	b.n	8000d52 <fsm_automatic_run+0x256>

		default:
			break;
 8000d42:	bf00      	nop
 8000d44:	e006      	b.n	8000d54 <fsm_automatic_run+0x258>
			break;
 8000d46:	bf00      	nop
 8000d48:	e004      	b.n	8000d54 <fsm_automatic_run+0x258>
			break;
 8000d4a:	bf00      	nop
 8000d4c:	e002      	b.n	8000d54 <fsm_automatic_run+0x258>
			break;
 8000d4e:	bf00      	nop
 8000d50:	e000      	b.n	8000d54 <fsm_automatic_run+0x258>
			break;
 8000d52:	bf00      	nop
		}
		if(timer3_flag == 1){
 8000d54:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <fsm_automatic_run+0x2cc>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	f040 80c1 	bne.w	8000ee0 <fsm_automatic_run+0x3e4>
			setTimer3(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f000 fbc2 	bl	80014e8 <setTimer3>
			if(led_status1 == RED){
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <fsm_automatic_run+0x2d0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d110      	bne.n	8000d8e <fsm_automatic_run+0x292>
				cntRoad1--;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d74:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 8000d76:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dc3e      	bgt.n	8000dfc <fsm_automatic_run+0x300>
					led_status1 = GREEN;
 8000d7e:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <fsm_automatic_run+0x2d0>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[1];
 8000d84:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e036      	b.n	8000dfc <fsm_automatic_run+0x300>
				}
			}
			else if(led_status1 == GREEN){
 8000d8e:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <fsm_automatic_run+0x2d0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d11e      	bne.n	8000dd4 <fsm_automatic_run+0x2d8>
				cntRoad1--;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	4a0c      	ldr	r2, [pc, #48]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000d9e:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 8000da0:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	dc29      	bgt.n	8000dfc <fsm_automatic_run+0x300>
					led_status1 = AMBER;
 8000da8:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <fsm_automatic_run+0x2d0>)
 8000daa:	2202      	movs	r2, #2
 8000dac:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[2];
 8000dae:	4b04      	ldr	r3, [pc, #16]	; (8000dc0 <fsm_automatic_run+0x2c4>)
 8000db0:	689b      	ldr	r3, [r3, #8]
 8000db2:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <fsm_automatic_run+0x2d4>)
 8000db4:	6013      	str	r3, [r2, #0]
 8000db6:	e021      	b.n	8000dfc <fsm_automatic_run+0x300>
 8000db8:	20000098 	.word	0x20000098
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	20000044 	.word	0x20000044
 8000dc4:	200000a0 	.word	0x200000a0
 8000dc8:	200000a8 	.word	0x200000a8
 8000dcc:	2000009c 	.word	0x2000009c
 8000dd0:	200000c8 	.word	0x200000c8
				}
			}
			else if(led_status1 == AMBER){
 8000dd4:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <fsm_automatic_run+0x414>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d10f      	bne.n	8000dfc <fsm_automatic_run+0x300>
				cntRoad1--;
 8000ddc:	4b4d      	ldr	r3, [pc, #308]	; (8000f14 <fsm_automatic_run+0x418>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3b01      	subs	r3, #1
 8000de2:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <fsm_automatic_run+0x418>)
 8000de4:	6013      	str	r3, [r2, #0]
				if(cntRoad1 <= 0){
 8000de6:	4b4b      	ldr	r3, [pc, #300]	; (8000f14 <fsm_automatic_run+0x418>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	dc06      	bgt.n	8000dfc <fsm_automatic_run+0x300>
					led_status1 = RED;
 8000dee:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <fsm_automatic_run+0x414>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
					cntRoad1 = arr[0];
 8000df4:	4b48      	ldr	r3, [pc, #288]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <fsm_automatic_run+0x418>)
 8000dfa:	6013      	str	r3, [r2, #0]
				}
			}

			if(led_status2 == GREEN){
 8000dfc:	4b47      	ldr	r3, [pc, #284]	; (8000f1c <fsm_automatic_run+0x420>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d110      	bne.n	8000e26 <fsm_automatic_run+0x32a>
				cntRoad2--;
 8000e04:	4b46      	ldr	r3, [pc, #280]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e0c:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 8000e0e:	4b44      	ldr	r3, [pc, #272]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	dc30      	bgt.n	8000e78 <fsm_automatic_run+0x37c>
					led_status2 = AMBER;
 8000e16:	4b41      	ldr	r3, [pc, #260]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[2];
 8000e1c:	4b3e      	ldr	r3, [pc, #248]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000e1e:	689b      	ldr	r3, [r3, #8]
 8000e20:	4a3f      	ldr	r2, [pc, #252]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e028      	b.n	8000e78 <fsm_automatic_run+0x37c>
				}
			}
			else if(led_status2 == AMBER){
 8000e26:	4b3d      	ldr	r3, [pc, #244]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d110      	bne.n	8000e50 <fsm_automatic_run+0x354>
				cntRoad2--;
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3b01      	subs	r3, #1
 8000e34:	4a3a      	ldr	r2, [pc, #232]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e36:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	dc1b      	bgt.n	8000e78 <fsm_automatic_run+0x37c>
					led_status2 = RED;
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[0];
 8000e46:	4b34      	ldr	r3, [pc, #208]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a35      	ldr	r2, [pc, #212]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e4c:	6013      	str	r3, [r2, #0]
 8000e4e:	e013      	b.n	8000e78 <fsm_automatic_run+0x37c>
				}
			}
			else if(led_status2 == RED){
 8000e50:	4b32      	ldr	r3, [pc, #200]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d10f      	bne.n	8000e78 <fsm_automatic_run+0x37c>
				cntRoad2--;
 8000e58:	4b31      	ldr	r3, [pc, #196]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	3b01      	subs	r3, #1
 8000e5e:	4a30      	ldr	r2, [pc, #192]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e60:	6013      	str	r3, [r2, #0]
				if(cntRoad2 <= 0){
 8000e62:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	dc06      	bgt.n	8000e78 <fsm_automatic_run+0x37c>
					led_status2 = GREEN;
 8000e6a:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
					cntRoad2 = arr[1];
 8000e70:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	4a2a      	ldr	r2, [pc, #168]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e76:	6013      	str	r3, [r2, #0]
				}
			}
			if((led_status1 == DISPLAY_VALUE_RED) && (led_status2 == MODE_RED)){
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <fsm_automatic_run+0x414>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10c      	bne.n	8000e9a <fsm_automatic_run+0x39e>
 8000e80:	4b26      	ldr	r3, [pc, #152]	; (8000f1c <fsm_automatic_run+0x420>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b14      	cmp	r3, #20
 8000e86:	d108      	bne.n	8000e9a <fsm_automatic_run+0x39e>
				cntRoad1 = arr[RED];
 8000e88:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <fsm_automatic_run+0x418>)
 8000e8e:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[RED];
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <fsm_automatic_run+0x428>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a22      	ldr	r2, [pc, #136]	; (8000f20 <fsm_automatic_run+0x424>)
 8000e96:	6013      	str	r3, [r2, #0]
 8000e98:	e020      	b.n	8000edc <fsm_automatic_run+0x3e0>
			}
			else if((led_status1 == DISPLAY_VALUE_GREEN) && (led_status2 == MODE_GREEN)){
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <fsm_automatic_run+0x414>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b04      	cmp	r3, #4
 8000ea0:	d10c      	bne.n	8000ebc <fsm_automatic_run+0x3c0>
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	; (8000f1c <fsm_automatic_run+0x420>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b15      	cmp	r3, #21
 8000ea8:	d108      	bne.n	8000ebc <fsm_automatic_run+0x3c0>
				cntRoad1 = arr[GREEN];
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <fsm_automatic_run+0x418>)
 8000eb0:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[GREEN];
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <fsm_automatic_run+0x428>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <fsm_automatic_run+0x424>)
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00f      	b.n	8000edc <fsm_automatic_run+0x3e0>
			}
			else if((led_status1 == DISPLAY_VALUE_AMBER) && (led_status2 == MODE_AMBER)){
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <fsm_automatic_run+0x414>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b05      	cmp	r3, #5
 8000ec2:	d10b      	bne.n	8000edc <fsm_automatic_run+0x3e0>
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <fsm_automatic_run+0x420>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b16      	cmp	r3, #22
 8000eca:	d107      	bne.n	8000edc <fsm_automatic_run+0x3e0>
				cntRoad1 = arr[AMBER];
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <fsm_automatic_run+0x41c>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4a10      	ldr	r2, [pc, #64]	; (8000f14 <fsm_automatic_run+0x418>)
 8000ed2:	6013      	str	r3, [r2, #0]
				cntRoad2 = arrMode[AMBER];
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <fsm_automatic_run+0x428>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <fsm_automatic_run+0x424>)
 8000eda:	6013      	str	r3, [r2, #0]
			}

			updateLedBuffer();
 8000edc:	f7ff fc18 	bl	8000710 <updateLedBuffer>
		}
		if(timer4_flag == 1){
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <fsm_automatic_run+0x42c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d111      	bne.n	8000f0c <fsm_automatic_run+0x410>
			setTimer4(25);
 8000ee8:	2019      	movs	r0, #25
 8000eea:	f000 fb11 	bl	8001510 <setTimer4>
			if (index_led >= 4) index_led = 0;
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <fsm_automatic_run+0x430>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	dd02      	ble.n	8000efc <fsm_automatic_run+0x400>
 8000ef6:	4b0d      	ldr	r3, [pc, #52]	; (8000f2c <fsm_automatic_run+0x430>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
				update7SEG(index_led++);
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <fsm_automatic_run+0x430>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	1c5a      	adds	r2, r3, #1
 8000f02:	490a      	ldr	r1, [pc, #40]	; (8000f2c <fsm_automatic_run+0x430>)
 8000f04:	600a      	str	r2, [r1, #0]
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fd72 	bl	80009f0 <update7SEG>
		}



}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000009c 	.word	0x2000009c
 8000f14:	200000c8 	.word	0x200000c8
 8000f18:	20000044 	.word	0x20000044
 8000f1c:	2000005c 	.word	0x2000005c
 8000f20:	200000cc 	.word	0x200000cc
 8000f24:	20000050 	.word	0x20000050
 8000f28:	200000ac 	.word	0x200000ac
 8000f2c:	20000094 	.word	0x20000094

08000f30 <redToogle>:
 *  Created on: Oct 28, 2023
 *      Author: HP
 */
#include "fsm_manual.h"
#include "fsm_auto.h"
void redToogle(){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <redToogle+0x4c>)
 8000f3a:	f000 ff48 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
 8000f3e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f42:	480e      	ldr	r0, [pc, #56]	; (8000f7c <redToogle+0x4c>)
 8000f44:	f000 ff43 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f4e:	480b      	ldr	r0, [pc, #44]	; (8000f7c <redToogle+0x4c>)
 8000f50:	f000 ff25 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f5a:	4808      	ldr	r0, [pc, #32]	; (8000f7c <redToogle+0x4c>)
 8000f5c:	f000 ff1f 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <redToogle+0x4c>)
 8000f68:	f000 ff19 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f72:	4802      	ldr	r0, [pc, #8]	; (8000f7c <redToogle+0x4c>)
 8000f74:	f000 ff13 	bl	8001d9e <HAL_GPIO_WritePin>
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40010c00 	.word	0x40010c00

08000f80 <greenToogle>:
void greenToogle(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D1_GPIO_Port, D3_Pin);
 8000f84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <greenToogle+0x4c>)
 8000f8a:	f000 ff20 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D4_GPIO_Port, D6_Pin);
 8000f8e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f92:	480e      	ldr	r0, [pc, #56]	; (8000fcc <greenToogle+0x4c>)
 8000f94:	f000 ff1b 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f9e:	480b      	ldr	r0, [pc, #44]	; (8000fcc <greenToogle+0x4c>)
 8000fa0:	f000 fefd 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000faa:	4808      	ldr	r0, [pc, #32]	; (8000fcc <greenToogle+0x4c>)
 8000fac:	f000 fef7 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D2_Pin, GPIO_PIN_SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <greenToogle+0x4c>)
 8000fb8:	f000 fef1 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D5_Pin, GPIO_PIN_SET);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	4802      	ldr	r0, [pc, #8]	; (8000fcc <greenToogle+0x4c>)
 8000fc4:	f000 feeb 	bl	8001d9e <HAL_GPIO_WritePin>
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40010c00 	.word	0x40010c00

08000fd0 <amberToogle>:
void amberToogle(){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000fd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <amberToogle+0x4c>)
 8000fda:	f000 fef8 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
 8000fde:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <amberToogle+0x4c>)
 8000fe4:	f000 fef3 	bl	8001dce <HAL_GPIO_TogglePin>
	HAL_GPIO_WritePin(D2_GPIO_Port, D1_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fee:	480b      	ldr	r0, [pc, #44]	; (800101c <amberToogle+0x4c>)
 8000ff0:	f000 fed5 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	4808      	ldr	r0, [pc, #32]	; (800101c <amberToogle+0x4c>)
 8000ffc:	f000 fecf 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D5_GPIO_Port, D3_Pin, GPIO_PIN_SET);
 8001000:	2201      	movs	r2, #1
 8001002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <amberToogle+0x4c>)
 8001008:	f000 fec9 	bl	8001d9e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D6_GPIO_Port, D6_Pin, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001012:	4802      	ldr	r0, [pc, #8]	; (800101c <amberToogle+0x4c>)
 8001014:	f000 fec3 	bl	8001d9e <HAL_GPIO_WritePin>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40010c00 	.word	0x40010c00

08001020 <increaseLEDTime>:
void increaseLEDTime(int index){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	if(index == RED){
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d110      	bne.n	8001050 <increaseLEDTime+0x30>
		arr[RED]++;
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <increaseLEDTime+0x8c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <increaseLEDTime+0x8c>)
 8001036:	6013      	str	r3, [r2, #0]
		arr[GREEN]++;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <increaseLEDTime+0x8c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	3301      	adds	r3, #1
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <increaseLEDTime+0x8c>)
 8001040:	6053      	str	r3, [r2, #4]
		if(arr[RED] >= 99){
 8001042:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <increaseLEDTime+0x8c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b62      	cmp	r3, #98	; 0x62
 8001048:	dd02      	ble.n	8001050 <increaseLEDTime+0x30>
			arr[RED] = 0;
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <increaseLEDTime+0x8c>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
		}
	}
	if(index == GREEN){
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d110      	bne.n	8001078 <increaseLEDTime+0x58>
		arr[GREEN]++;
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <increaseLEDTime+0x8c>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	3301      	adds	r3, #1
 800105c:	4a13      	ldr	r2, [pc, #76]	; (80010ac <increaseLEDTime+0x8c>)
 800105e:	6053      	str	r3, [r2, #4]
		arr[RED]++;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <increaseLEDTime+0x8c>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a11      	ldr	r2, [pc, #68]	; (80010ac <increaseLEDTime+0x8c>)
 8001068:	6013      	str	r3, [r2, #0]
		if(arr[GREEN] >= 99){
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <increaseLEDTime+0x8c>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b62      	cmp	r3, #98	; 0x62
 8001070:	dd02      	ble.n	8001078 <increaseLEDTime+0x58>
			arr[GREEN] = 0;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <increaseLEDTime+0x8c>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
		}
	}
	if(index == AMBER){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d110      	bne.n	80010a0 <increaseLEDTime+0x80>
		arr[AMBER]++;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <increaseLEDTime+0x8c>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	3301      	adds	r3, #1
 8001084:	4a09      	ldr	r2, [pc, #36]	; (80010ac <increaseLEDTime+0x8c>)
 8001086:	6093      	str	r3, [r2, #8]
		arr[RED]++;
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <increaseLEDTime+0x8c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	3301      	adds	r3, #1
 800108e:	4a07      	ldr	r2, [pc, #28]	; (80010ac <increaseLEDTime+0x8c>)
 8001090:	6013      	str	r3, [r2, #0]
		if(arr[AMBER] >= 99){
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <increaseLEDTime+0x8c>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b62      	cmp	r3, #98	; 0x62
 8001098:	dd02      	ble.n	80010a0 <increaseLEDTime+0x80>
			arr[AMBER] = 0;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <increaseLEDTime+0x8c>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
		}
	}
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	20000044 	.word	0x20000044

080010b0 <fsm_manual_run>:
	HAL_GPIO_TogglePin(D3_GPIO_Port, D3_Pin);
	HAL_GPIO_TogglePin(D4_GPIO_Port, D4_Pin);
	HAL_GPIO_TogglePin(D5_GPIO_Port, D5_Pin);
	HAL_GPIO_TogglePin(D6_GPIO_Port, D6_Pin);
}
void fsm_manual_run() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	switch(status){
 80010b4:	4b65      	ldr	r3, [pc, #404]	; (800124c <fsm_manual_run+0x19c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b0e      	cmp	r3, #14
 80010ba:	f000 8081 	beq.w	80011c0 <fsm_manual_run+0x110>
 80010be:	2b0e      	cmp	r3, #14
 80010c0:	f300 80ba 	bgt.w	8001238 <fsm_manual_run+0x188>
 80010c4:	2b0c      	cmp	r3, #12
 80010c6:	d002      	beq.n	80010ce <fsm_manual_run+0x1e>
 80010c8:	2b0d      	cmp	r3, #13
 80010ca:	d03d      	beq.n	8001148 <fsm_manual_run+0x98>
			status = MAN_RED;
			setTimer1(100);
		}
		break;
	default:
		break;
 80010cc:	e0b4      	b.n	8001238 <fsm_manual_run+0x188>
		if(timer1_flag == 1){
 80010ce:	4b60      	ldr	r3, [pc, #384]	; (8001250 <fsm_manual_run+0x1a0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d10a      	bne.n	80010ec <fsm_manual_run+0x3c>
			redToogle();
 80010d6:	f7ff ff2b 	bl	8000f30 <redToogle>
			led_status1 = DISPLAY_VALUE_RED;
 80010da:	4b5e      	ldr	r3, [pc, #376]	; (8001254 <fsm_manual_run+0x1a4>)
 80010dc:	2203      	movs	r2, #3
 80010de:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_RED;
 80010e0:	4b5d      	ldr	r3, [pc, #372]	; (8001258 <fsm_manual_run+0x1a8>)
 80010e2:	2214      	movs	r2, #20
 80010e4:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80010e6:	2064      	movs	r0, #100	; 0x64
 80010e8:	f000 f9ea 	bl	80014c0 <setTimer1>
		if(isButton1Pressed(2) == 1){
 80010ec:	2002      	movs	r0, #2
 80010ee:	f7ff f82d 	bl	800014c <isButton1Pressed>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d102      	bne.n	80010fe <fsm_manual_run+0x4e>
			increaseLEDTime(RED);
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff91 	bl	8001020 <increaseLEDTime>
		if(isButton1Pressed(3) == 1){
 80010fe:	2003      	movs	r0, #3
 8001100:	f7ff f824 	bl	800014c <isButton1Pressed>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d110      	bne.n	800112c <fsm_manual_run+0x7c>
			cntRoad1 = arr[RED];
 800110a:	4b54      	ldr	r3, [pc, #336]	; (800125c <fsm_manual_run+0x1ac>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a54      	ldr	r2, [pc, #336]	; (8001260 <fsm_manual_run+0x1b0>)
 8001110:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 8001112:	4b52      	ldr	r3, [pc, #328]	; (800125c <fsm_manual_run+0x1ac>)
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	4a53      	ldr	r2, [pc, #332]	; (8001264 <fsm_manual_run+0x1b4>)
 8001118:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 800111a:	4b4e      	ldr	r3, [pc, #312]	; (8001254 <fsm_manual_run+0x1a4>)
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 8001120:	4b4d      	ldr	r3, [pc, #308]	; (8001258 <fsm_manual_run+0x1a8>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
			status = INIT;
 8001126:	4b49      	ldr	r3, [pc, #292]	; (800124c <fsm_manual_run+0x19c>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(1) == 1){
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff f80d 	bl	800014c <isButton1Pressed>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	f040 8081 	bne.w	800123c <fsm_manual_run+0x18c>
			status = MAN_GREEN;
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <fsm_manual_run+0x19c>)
 800113c:	220d      	movs	r2, #13
 800113e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001140:	2064      	movs	r0, #100	; 0x64
 8001142:	f000 f9bd 	bl	80014c0 <setTimer1>
		break;
 8001146:	e079      	b.n	800123c <fsm_manual_run+0x18c>
		if(timer1_flag == 1){
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <fsm_manual_run+0x1a0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d10a      	bne.n	8001166 <fsm_manual_run+0xb6>
			greenToogle();
 8001150:	f7ff ff16 	bl	8000f80 <greenToogle>
			led_status1 = DISPLAY_VALUE_GREEN;
 8001154:	4b3f      	ldr	r3, [pc, #252]	; (8001254 <fsm_manual_run+0x1a4>)
 8001156:	2204      	movs	r2, #4
 8001158:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_GREEN;
 800115a:	4b3f      	ldr	r3, [pc, #252]	; (8001258 <fsm_manual_run+0x1a8>)
 800115c:	2215      	movs	r2, #21
 800115e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001160:	2064      	movs	r0, #100	; 0x64
 8001162:	f000 f9ad 	bl	80014c0 <setTimer1>
		if(isButton1Pressed(2) == 1){
 8001166:	2002      	movs	r0, #2
 8001168:	f7fe fff0 	bl	800014c <isButton1Pressed>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d102      	bne.n	8001178 <fsm_manual_run+0xc8>
			increaseLEDTime(GREEN);
 8001172:	2001      	movs	r0, #1
 8001174:	f7ff ff54 	bl	8001020 <increaseLEDTime>
		if(isButton1Pressed(3) == 1){
 8001178:	2003      	movs	r0, #3
 800117a:	f7fe ffe7 	bl	800014c <isButton1Pressed>
 800117e:	4603      	mov	r3, r0
 8001180:	2b01      	cmp	r3, #1
 8001182:	d110      	bne.n	80011a6 <fsm_manual_run+0xf6>
			cntRoad1 = arr[RED];
 8001184:	4b35      	ldr	r3, [pc, #212]	; (800125c <fsm_manual_run+0x1ac>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a35      	ldr	r2, [pc, #212]	; (8001260 <fsm_manual_run+0x1b0>)
 800118a:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <fsm_manual_run+0x1ac>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a34      	ldr	r2, [pc, #208]	; (8001264 <fsm_manual_run+0x1b4>)
 8001192:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 8001194:	4b2f      	ldr	r3, [pc, #188]	; (8001254 <fsm_manual_run+0x1a4>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <fsm_manual_run+0x1a8>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
			status = INIT;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	; (800124c <fsm_manual_run+0x19c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(1) == 1){
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7fe ffd0 	bl	800014c <isButton1Pressed>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d146      	bne.n	8001240 <fsm_manual_run+0x190>
			status = MAN_YELLOW;
 80011b2:	4b26      	ldr	r3, [pc, #152]	; (800124c <fsm_manual_run+0x19c>)
 80011b4:	220e      	movs	r2, #14
 80011b6:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f000 f981 	bl	80014c0 <setTimer1>
		break;
 80011be:	e03f      	b.n	8001240 <fsm_manual_run+0x190>
		if(timer1_flag == 1){
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <fsm_manual_run+0x1a0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d10a      	bne.n	80011de <fsm_manual_run+0x12e>
			amberToogle();
 80011c8:	f7ff ff02 	bl	8000fd0 <amberToogle>
			led_status1 = DISPLAY_VALUE_AMBER;
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <fsm_manual_run+0x1a4>)
 80011ce:	2205      	movs	r2, #5
 80011d0:	601a      	str	r2, [r3, #0]
			led_status2 = MODE_AMBER;
 80011d2:	4b21      	ldr	r3, [pc, #132]	; (8001258 <fsm_manual_run+0x1a8>)
 80011d4:	2216      	movs	r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 80011d8:	2064      	movs	r0, #100	; 0x64
 80011da:	f000 f971 	bl	80014c0 <setTimer1>
		if(isButton1Pressed(2) == 1){
 80011de:	2002      	movs	r0, #2
 80011e0:	f7fe ffb4 	bl	800014c <isButton1Pressed>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d102      	bne.n	80011f0 <fsm_manual_run+0x140>
			increaseLEDTime(AMBER);
 80011ea:	2002      	movs	r0, #2
 80011ec:	f7ff ff18 	bl	8001020 <increaseLEDTime>
		if(isButton1Pressed(3) == 1){
 80011f0:	2003      	movs	r0, #3
 80011f2:	f7fe ffab 	bl	800014c <isButton1Pressed>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d110      	bne.n	800121e <fsm_manual_run+0x16e>
			cntRoad1 = arr[RED];
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <fsm_manual_run+0x1ac>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a17      	ldr	r2, [pc, #92]	; (8001260 <fsm_manual_run+0x1b0>)
 8001202:	6013      	str	r3, [r2, #0]
			cntRoad2 = arr[GREEN];
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <fsm_manual_run+0x1ac>)
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <fsm_manual_run+0x1b4>)
 800120a:	6013      	str	r3, [r2, #0]
			led_status1 = RED;
 800120c:	4b11      	ldr	r3, [pc, #68]	; (8001254 <fsm_manual_run+0x1a4>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
			led_status2 = GREEN;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <fsm_manual_run+0x1a8>)
 8001214:	2201      	movs	r2, #1
 8001216:	601a      	str	r2, [r3, #0]
			status = INIT;
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <fsm_manual_run+0x19c>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
		if(isButton1Pressed(1) == 1){
 800121e:	2001      	movs	r0, #1
 8001220:	f7fe ff94 	bl	800014c <isButton1Pressed>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d10c      	bne.n	8001244 <fsm_manual_run+0x194>
			status = MAN_RED;
 800122a:	4b08      	ldr	r3, [pc, #32]	; (800124c <fsm_manual_run+0x19c>)
 800122c:	220c      	movs	r2, #12
 800122e:	601a      	str	r2, [r3, #0]
			setTimer1(100);
 8001230:	2064      	movs	r0, #100	; 0x64
 8001232:	f000 f945 	bl	80014c0 <setTimer1>
		break;
 8001236:	e005      	b.n	8001244 <fsm_manual_run+0x194>
		break;
 8001238:	bf00      	nop
 800123a:	e004      	b.n	8001246 <fsm_manual_run+0x196>
		break;
 800123c:	bf00      	nop
 800123e:	e002      	b.n	8001246 <fsm_manual_run+0x196>
		break;
 8001240:	bf00      	nop
 8001242:	e000      	b.n	8001246 <fsm_manual_run+0x196>
		break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000098 	.word	0x20000098
 8001250:	200000a0 	.word	0x200000a0
 8001254:	2000009c 	.word	0x2000009c
 8001258:	2000005c 	.word	0x2000005c
 800125c:	20000044 	.word	0x20000044
 8001260:	200000c8 	.word	0x200000c8
 8001264:	200000cc 	.word	0x200000cc

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fa96 	bl	800179c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f82a 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 f8b0 	bl	80013d8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001278:	f000 f862 	bl	8001340 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800127c:	480d      	ldr	r0, [pc, #52]	; (80012b4 <main+0x4c>)
 800127e:	f001 f9eb 	bl	8002658 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer3(100);
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f000 f930 	bl	80014e8 <setTimer3>
  setTimer4(25);
 8001288:	2019      	movs	r0, #25
 800128a:	f000 f941 	bl	8001510 <setTimer4>
  status = INIT;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <main+0x50>)
 8001290:	2201      	movs	r2, #1
 8001292:	601a      	str	r2, [r3, #0]
  setTimer5(100);
 8001294:	2064      	movs	r0, #100	; 0x64
 8001296:	f000 f94f 	bl	8001538 <setTimer5>
  cntRoad1 = arr[RED];
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <main+0x54>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <main+0x58>)
 80012a0:	6013      	str	r3, [r2, #0]
  cntRoad2 = arr[GREEN];
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <main+0x54>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <main+0x5c>)
 80012a8:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  fsm_automatic_run();
 80012aa:	f7ff fc27 	bl	8000afc <fsm_automatic_run>
	  fsm_manual_run();
 80012ae:	f7ff feff 	bl	80010b0 <fsm_manual_run>
	  fsm_automatic_run();
 80012b2:	e7fa      	b.n	80012aa <main+0x42>
 80012b4:	200000d0 	.word	0x200000d0
 80012b8:	20000098 	.word	0x20000098
 80012bc:	20000044 	.word	0x20000044
 80012c0:	200000c8 	.word	0x200000c8
 80012c4:	200000cc 	.word	0x200000cc

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b090      	sub	sp, #64	; 0x40
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f001 fd7a 	bl	8002dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	1d3b      	adds	r3, r7, #4
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	60da      	str	r2, [r3, #12]
 80012e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ea:	2302      	movs	r3, #2
 80012ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012ee:	2301      	movs	r3, #1
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012f2:	2310      	movs	r3, #16
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fa:	f107 0318 	add.w	r3, r7, #24
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fd7e 	bl	8001e00 <HAL_RCC_OscConfig>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800130a:	f000 f8d3 	bl	80014b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800130e:	230f      	movs	r3, #15
 8001310:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f000 ffea 	bl	8002300 <HAL_RCC_ClockConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001332:	f000 f8bf 	bl	80014b4 <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3740      	adds	r7, #64	; 0x40
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800135c:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM2_Init+0x94>)
 800135e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001362:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001366:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800136a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM2_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001374:	2209      	movs	r2, #9
 8001376:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM2_Init+0x94>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800137e:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_TIM2_Init+0x94>)
 8001386:	f001 f917 	bl	80025b8 <HAL_TIM_Base_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001390:	f000 f890 	bl	80014b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001394:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4619      	mov	r1, r3
 80013a0:	480c      	ldr	r0, [pc, #48]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013a2:	f001 faad 	bl	8002900 <HAL_TIM_ConfigClockSource>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013ac:	f000 f882 	bl	80014b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b4:	2300      	movs	r3, #0
 80013b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013b8:	463b      	mov	r3, r7
 80013ba:	4619      	mov	r1, r3
 80013bc:	4805      	ldr	r0, [pc, #20]	; (80013d4 <MX_TIM2_Init+0x94>)
 80013be:	f001 fc79 	bl	8002cb4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013c8:	f000 f874 	bl	80014b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200000d0 	.word	0x200000d0

080013d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ec:	4b28      	ldr	r3, [pc, #160]	; (8001490 <MX_GPIO_Init+0xb8>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <MX_GPIO_Init+0xb8>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_GPIO_Init+0xb8>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <MX_GPIO_Init+0xb8>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <MX_GPIO_Init+0xb8>)
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_GPIO_Init+0xb8>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	603b      	str	r3, [r7, #0]
 800141a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	21f0      	movs	r1, #240	; 0xf0
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <MX_GPIO_Init+0xbc>)
 8001422:	f000 fcbc 	bl	8001d9e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 8001426:	2200      	movs	r2, #0
 8001428:	f643 717f 	movw	r1, #16255	; 0x3f7f
 800142c:	481a      	ldr	r0, [pc, #104]	; (8001498 <MX_GPIO_Init+0xc0>)
 800142e:	f000 fcb6 	bl	8001d9e <HAL_GPIO_WritePin>
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin;
 8001432:	23f0      	movs	r3, #240	; 0xf0
 8001434:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 0308 	add.w	r3, r7, #8
 8001446:	4619      	mov	r1, r3
 8001448:	4812      	ldr	r0, [pc, #72]	; (8001494 <MX_GPIO_Init+0xbc>)
 800144a:	f000 fb17 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin D3_Pin
                           D4_Pin D5_Pin D6_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin D1_Pin
                           D2_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|D3_Pin
 800144e:	f643 737f 	movw	r3, #16255	; 0x3f7f
 8001452:	60bb      	str	r3, [r7, #8]
                          |D4_Pin|D5_Pin|D6_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|D1_Pin
                          |D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2302      	movs	r3, #2
 800145e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001460:	f107 0308 	add.w	r3, r7, #8
 8001464:	4619      	mov	r1, r3
 8001466:	480c      	ldr	r0, [pc, #48]	; (8001498 <MX_GPIO_Init+0xc0>)
 8001468:	f000 fb08 	bl	8001a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : MODE_Pin ADD_Pin SET_Pin */
  GPIO_InitStruct.Pin = MODE_Pin|ADD_Pin|SET_Pin;
 800146c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001476:	2301      	movs	r3, #1
 8001478:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0308 	add.w	r3, r7, #8
 800147e:	4619      	mov	r1, r3
 8001480:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0xbc>)
 8001482:	f000 fafb 	bl	8001a7c <HAL_GPIO_Init>

}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000
 8001494:	40010800 	.word	0x40010800
 8001498:	40010c00 	.word	0x40010c00

0800149c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	timerRun();
 80014a4:	f000 f85c 	bl	8001560 <timerRun>
	getKeyInput();
 80014a8:	f7fe fea8 	bl	80001fc <getKeyInput>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b8:	b672      	cpsid	i
}
 80014ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014bc:	e7fe      	b.n	80014bc <Error_Handler+0x8>
	...

080014c0 <setTimer1>:
int timer2_counter = 0;
int timer3_counter = 0;
int timer4_counter = 0;
int timer5_counter = 0;

void setTimer1(int duration) {
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration ;
 80014c8:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <setTimer1+0x20>)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80014ce:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <setTimer1+0x24>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	200000b4 	.word	0x200000b4
 80014e4:	200000a0 	.word	0x200000a0

080014e8 <setTimer3>:
void setTimer2(int duration) {
	timer2_counter = duration;
	timer2_flag = 0;
}
void setTimer3(int duration) {
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80014f0:	4a05      	ldr	r2, [pc, #20]	; (8001508 <setTimer3+0x20>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80014f6:	4b05      	ldr	r3, [pc, #20]	; (800150c <setTimer3+0x24>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	200000bc 	.word	0x200000bc
 800150c:	200000a8 	.word	0x200000a8

08001510 <setTimer4>:
void setTimer4(int duration) {
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 8001518:	4a05      	ldr	r2, [pc, #20]	; (8001530 <setTimer4+0x20>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <setTimer4+0x24>)
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	200000c0 	.word	0x200000c0
 8001534:	200000ac 	.word	0x200000ac

08001538 <setTimer5>:
void setTimer5(int duration) {
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration;
 8001540:	4a05      	ldr	r2, [pc, #20]	; (8001558 <setTimer5+0x20>)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <setTimer5+0x24>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200000c4 	.word	0x200000c4
 800155c:	200000b0 	.word	0x200000b0

08001560 <timerRun>:
void timerRun() {
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001564:	4b29      	ldr	r3, [pc, #164]	; (800160c <timerRun+0xac>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dd0b      	ble.n	8001584 <timerRun+0x24>
		timer1_counter--;
 800156c:	4b27      	ldr	r3, [pc, #156]	; (800160c <timerRun+0xac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	3b01      	subs	r3, #1
 8001572:	4a26      	ldr	r2, [pc, #152]	; (800160c <timerRun+0xac>)
 8001574:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001576:	4b25      	ldr	r3, [pc, #148]	; (800160c <timerRun+0xac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	dc02      	bgt.n	8001584 <timerRun+0x24>
			timer1_flag = 1;
 800157e:	4b24      	ldr	r3, [pc, #144]	; (8001610 <timerRun+0xb0>)
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <timerRun+0xb4>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	dd0b      	ble.n	80015a4 <timerRun+0x44>
		timer2_counter--;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <timerRun+0xb4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	3b01      	subs	r3, #1
 8001592:	4a20      	ldr	r2, [pc, #128]	; (8001614 <timerRun+0xb4>)
 8001594:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 8001596:	4b1f      	ldr	r3, [pc, #124]	; (8001614 <timerRun+0xb4>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2b00      	cmp	r3, #0
 800159c:	dc02      	bgt.n	80015a4 <timerRun+0x44>
			timer2_flag = 1;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <timerRun+0xb8>)
 80015a0:	2201      	movs	r2, #1
 80015a2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <timerRun+0xbc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	dd0b      	ble.n	80015c4 <timerRun+0x64>
		timer3_counter--;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	; (800161c <timerRun+0xbc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3b01      	subs	r3, #1
 80015b2:	4a1a      	ldr	r2, [pc, #104]	; (800161c <timerRun+0xbc>)
 80015b4:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <timerRun+0xbc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	dc02      	bgt.n	80015c4 <timerRun+0x64>
			timer3_flag = 1;
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <timerRun+0xc0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <timerRun+0xc4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd0b      	ble.n	80015e4 <timerRun+0x84>
		timer4_counter--;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <timerRun+0xc4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	3b01      	subs	r3, #1
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <timerRun+0xc4>)
 80015d4:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <timerRun+0xc4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	dc02      	bgt.n	80015e4 <timerRun+0x84>
			timer4_flag = 1;
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <timerRun+0xc8>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0) {
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <timerRun+0xcc>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	dd0b      	ble.n	8001604 <timerRun+0xa4>
		timer5_counter--;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <timerRun+0xcc>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3b01      	subs	r3, #1
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <timerRun+0xcc>)
 80015f4:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0) {
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <timerRun+0xcc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	dc02      	bgt.n	8001604 <timerRun+0xa4>
			timer5_flag = 1;
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <timerRun+0xd0>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr
 800160c:	200000b4 	.word	0x200000b4
 8001610:	200000a0 	.word	0x200000a0
 8001614:	200000b8 	.word	0x200000b8
 8001618:	200000a4 	.word	0x200000a4
 800161c:	200000bc 	.word	0x200000bc
 8001620:	200000a8 	.word	0x200000a8
 8001624:	200000c0 	.word	0x200000c0
 8001628:	200000ac 	.word	0x200000ac
 800162c:	200000c4 	.word	0x200000c4
 8001630:	200000b0 	.word	0x200000b0

08001634 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_MspInit+0x5c>)
 800163c:	699b      	ldr	r3, [r3, #24]
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_MspInit+0x5c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6193      	str	r3, [r2, #24]
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_MspInit+0x5c>)
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <HAL_MspInit+0x5c>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a0e      	ldr	r2, [pc, #56]	; (8001690 <HAL_MspInit+0x5c>)
 8001658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]
 800165e:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <HAL_MspInit+0x5c>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800166a:	4b0a      	ldr	r3, [pc, #40]	; (8001694 <HAL_MspInit+0x60>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_MspInit+0x60>)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	3714      	adds	r7, #20
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000
 8001694:	40010000 	.word	0x40010000

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <HAL_TIM_Base_MspInit+0x44>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0b      	ldr	r2, [pc, #44]	; (80016dc <HAL_TIM_Base_MspInit+0x44>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_TIM_Base_MspInit+0x44>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201c      	movs	r0, #28
 80016c8:	f000 f9a1 	bl	8001a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016cc:	201c      	movs	r0, #28
 80016ce:	f000 f9ba 	bl	8001a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <NMI_Handler+0x4>

080016e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ea:	e7fe      	b.n	80016ea <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <MemManage_Handler+0x4>

080016f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f6:	e7fe      	b.n	80016f6 <BusFault_Handler+0x4>

080016f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016fc:	e7fe      	b.n	80016fc <UsageFault_Handler+0x4>

080016fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016fe:	b480      	push	{r7}
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr

08001722 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001726:	f000 f87f 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM2_IRQHandler+0x10>)
 8001736:	f000 ffdb 	bl	80026f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200000d0 	.word	0x200000d0

08001744 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	bc80      	pop	{r7}
 800174e:	4770      	bx	lr

08001750 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001750:	f7ff fff8 	bl	8001744 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001754:	480b      	ldr	r0, [pc, #44]	; (8001784 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001756:	490c      	ldr	r1, [pc, #48]	; (8001788 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001758:	4a0c      	ldr	r2, [pc, #48]	; (800178c <LoopFillZerobss+0x16>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a09      	ldr	r2, [pc, #36]	; (8001790 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800176c:	4c09      	ldr	r4, [pc, #36]	; (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800177a:	f001 fb05 	bl	8002d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800177e:	f7ff fd73 	bl	8001268 <main>
  bx lr
 8001782:	4770      	bx	lr
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800178c:	08002e24 	.word	0x08002e24
  ldr r2, =_sbss
 8001790:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001794:	2000011c 	.word	0x2000011c

08001798 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_2_IRQHandler>
	...

0800179c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HAL_Init+0x28>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a07      	ldr	r2, [pc, #28]	; (80017c4 <HAL_Init+0x28>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ac:	2003      	movs	r0, #3
 80017ae:	f000 f923 	bl	80019f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017b2:	200f      	movs	r0, #15
 80017b4:	f000 f808 	bl	80017c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b8:	f7ff ff3c 	bl	8001634 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000

080017c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x54>)
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_InitTick+0x58>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	4619      	mov	r1, r3
 80017da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017de:	fbb3 f3f1 	udiv	r3, r3, r1
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 f93b 	bl	8001a62 <HAL_SYSTICK_Config>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e00e      	b.n	8001814 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d80a      	bhi.n	8001812 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fc:	2200      	movs	r2, #0
 80017fe:	6879      	ldr	r1, [r7, #4]
 8001800:	f04f 30ff 	mov.w	r0, #4294967295
 8001804:	f000 f903 	bl	8001a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_InitTick+0x5c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000060 	.word	0x20000060
 8001820:	20000068 	.word	0x20000068
 8001824:	20000064 	.word	0x20000064

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a03      	ldr	r2, [pc, #12]	; (8001848 <HAL_IncTick+0x20>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr
 8001844:	20000068 	.word	0x20000068
 8001848:	20000118 	.word	0x20000118

0800184c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr
 800185c:	20000118 	.word	0x20000118

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4906      	ldr	r1, [pc, #24]	; (80018f8 <__NVIC_EnableIRQ+0x34>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c4:	d301      	bcc.n	80019ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00f      	b.n	80019ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <SysTick_Config+0x40>)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d2:	210f      	movs	r1, #15
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f7ff ff90 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <SysTick_Config+0x40>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e2:	4b04      	ldr	r3, [pc, #16]	; (80019f4 <SysTick_Config+0x40>)
 80019e4:	2207      	movs	r2, #7
 80019e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	e000e010 	.word	0xe000e010

080019f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff ff2d 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b086      	sub	sp, #24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a20:	f7ff ff42 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	6978      	ldr	r0, [r7, #20]
 8001a2c:	f7ff ff90 	bl	8001950 <NVIC_EncodePriority>
 8001a30:	4602      	mov	r2, r0
 8001a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff ff5f 	bl	80018fc <__NVIC_SetPriority>
}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b082      	sub	sp, #8
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff ff35 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff ffa2 	bl	80019b4 <SysTick_Config>
 8001a70:	4603      	mov	r3, r0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b08b      	sub	sp, #44	; 0x2c
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a8e:	e148      	b.n	8001d22 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001a90:	2201      	movs	r2, #1
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69fa      	ldr	r2, [r7, #28]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 8137 	bne.w	8001d1c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4aa3      	ldr	r2, [pc, #652]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d05e      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ab8:	4aa1      	ldr	r2, [pc, #644]	; (8001d40 <HAL_GPIO_Init+0x2c4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d875      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001abe:	4aa1      	ldr	r2, [pc, #644]	; (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d058      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ac4:	4a9f      	ldr	r2, [pc, #636]	; (8001d44 <HAL_GPIO_Init+0x2c8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d86f      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aca:	4a9f      	ldr	r2, [pc, #636]	; (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d052      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ad0:	4a9d      	ldr	r2, [pc, #628]	; (8001d48 <HAL_GPIO_Init+0x2cc>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d869      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ad6:	4a9d      	ldr	r2, [pc, #628]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d04c      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001adc:	4a9b      	ldr	r2, [pc, #620]	; (8001d4c <HAL_GPIO_Init+0x2d0>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d863      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001ae2:	4a9b      	ldr	r2, [pc, #620]	; (8001d50 <HAL_GPIO_Init+0x2d4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d046      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
 8001ae8:	4a99      	ldr	r2, [pc, #612]	; (8001d50 <HAL_GPIO_Init+0x2d4>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d85d      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001aee:	2b12      	cmp	r3, #18
 8001af0:	d82a      	bhi.n	8001b48 <HAL_GPIO_Init+0xcc>
 8001af2:	2b12      	cmp	r3, #18
 8001af4:	d859      	bhi.n	8001baa <HAL_GPIO_Init+0x12e>
 8001af6:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <HAL_GPIO_Init+0x80>)
 8001af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afc:	08001b77 	.word	0x08001b77
 8001b00:	08001b51 	.word	0x08001b51
 8001b04:	08001b63 	.word	0x08001b63
 8001b08:	08001ba5 	.word	0x08001ba5
 8001b0c:	08001bab 	.word	0x08001bab
 8001b10:	08001bab 	.word	0x08001bab
 8001b14:	08001bab 	.word	0x08001bab
 8001b18:	08001bab 	.word	0x08001bab
 8001b1c:	08001bab 	.word	0x08001bab
 8001b20:	08001bab 	.word	0x08001bab
 8001b24:	08001bab 	.word	0x08001bab
 8001b28:	08001bab 	.word	0x08001bab
 8001b2c:	08001bab 	.word	0x08001bab
 8001b30:	08001bab 	.word	0x08001bab
 8001b34:	08001bab 	.word	0x08001bab
 8001b38:	08001bab 	.word	0x08001bab
 8001b3c:	08001bab 	.word	0x08001bab
 8001b40:	08001b59 	.word	0x08001b59
 8001b44:	08001b6d 	.word	0x08001b6d
 8001b48:	4a82      	ldr	r2, [pc, #520]	; (8001d54 <HAL_GPIO_Init+0x2d8>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d013      	beq.n	8001b76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b4e:	e02c      	b.n	8001baa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	623b      	str	r3, [r7, #32]
          break;
 8001b56:	e029      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	623b      	str	r3, [r7, #32]
          break;
 8001b60:	e024      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	3308      	adds	r3, #8
 8001b68:	623b      	str	r3, [r7, #32]
          break;
 8001b6a:	e01f      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	330c      	adds	r3, #12
 8001b72:	623b      	str	r3, [r7, #32]
          break;
 8001b74:	e01a      	b.n	8001bac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b7e:	2304      	movs	r3, #4
 8001b80:	623b      	str	r3, [r7, #32]
          break;
 8001b82:	e013      	b.n	8001bac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	611a      	str	r2, [r3, #16]
          break;
 8001b96:	e009      	b.n	8001bac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	69fa      	ldr	r2, [r7, #28]
 8001ba0:	615a      	str	r2, [r3, #20]
          break;
 8001ba2:	e003      	b.n	8001bac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
          break;
 8001ba8:	e000      	b.n	8001bac <HAL_GPIO_Init+0x130>
          break;
 8001baa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2bff      	cmp	r3, #255	; 0xff
 8001bb0:	d801      	bhi.n	8001bb6 <HAL_GPIO_Init+0x13a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	e001      	b.n	8001bba <HAL_GPIO_Init+0x13e>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2bff      	cmp	r3, #255	; 0xff
 8001bc0:	d802      	bhi.n	8001bc8 <HAL_GPIO_Init+0x14c>
 8001bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_Init+0x152>
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	3b08      	subs	r3, #8
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	210f      	movs	r1, #15
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	401a      	ands	r2, r3
 8001be0:	6a39      	ldr	r1, [r7, #32]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 8090 	beq.w	8001d1c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bfc:	4b56      	ldr	r3, [pc, #344]	; (8001d58 <HAL_GPIO_Init+0x2dc>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a55      	ldr	r2, [pc, #340]	; (8001d58 <HAL_GPIO_Init+0x2dc>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b53      	ldr	r3, [pc, #332]	; (8001d58 <HAL_GPIO_Init+0x2dc>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x2e0>)
 8001c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c18:	089b      	lsrs	r3, r3, #2
 8001c1a:	3302      	adds	r3, #2
 8001c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a49      	ldr	r2, [pc, #292]	; (8001d60 <HAL_GPIO_Init+0x2e4>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d00d      	beq.n	8001c5c <HAL_GPIO_Init+0x1e0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a48      	ldr	r2, [pc, #288]	; (8001d64 <HAL_GPIO_Init+0x2e8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d007      	beq.n	8001c58 <HAL_GPIO_Init+0x1dc>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a47      	ldr	r2, [pc, #284]	; (8001d68 <HAL_GPIO_Init+0x2ec>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d101      	bne.n	8001c54 <HAL_GPIO_Init+0x1d8>
 8001c50:	2302      	movs	r3, #2
 8001c52:	e004      	b.n	8001c5e <HAL_GPIO_Init+0x1e2>
 8001c54:	2303      	movs	r3, #3
 8001c56:	e002      	b.n	8001c5e <HAL_GPIO_Init+0x1e2>
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e000      	b.n	8001c5e <HAL_GPIO_Init+0x1e2>
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c60:	f002 0203 	and.w	r2, r2, #3
 8001c64:	0092      	lsls	r2, r2, #2
 8001c66:	4093      	lsls	r3, r2
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c6e:	493b      	ldr	r1, [pc, #236]	; (8001d5c <HAL_GPIO_Init+0x2e0>)
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	3302      	adds	r3, #2
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4937      	ldr	r1, [pc, #220]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	608b      	str	r3, [r1, #8]
 8001c94:	e006      	b.n	8001ca4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c96:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001c98:	689a      	ldr	r2, [r3, #8]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	4933      	ldr	r1, [pc, #204]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d006      	beq.n	8001cbe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cb0:	4b2e      	ldr	r3, [pc, #184]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cb2:	68da      	ldr	r2, [r3, #12]
 8001cb4:	492d      	ldr	r1, [pc, #180]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60cb      	str	r3, [r1, #12]
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cbe:	4b2b      	ldr	r3, [pc, #172]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	43db      	mvns	r3, r3
 8001cc6:	4929      	ldr	r1, [pc, #164]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d006      	beq.n	8001ce6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	4923      	ldr	r1, [pc, #140]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	604b      	str	r3, [r1, #4]
 8001ce4:	e006      	b.n	8001cf4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ce6:	4b21      	ldr	r3, [pc, #132]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001ce8:	685a      	ldr	r2, [r3, #4]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	491f      	ldr	r1, [pc, #124]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d006      	beq.n	8001d0e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4919      	ldr	r1, [pc, #100]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d0e:	4b17      	ldr	r3, [pc, #92]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	43db      	mvns	r3, r3
 8001d16:	4915      	ldr	r1, [pc, #84]	; (8001d6c <HAL_GPIO_Init+0x2f0>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f aeaf 	bne.w	8001a90 <HAL_GPIO_Init+0x14>
  }
}
 8001d32:	bf00      	nop
 8001d34:	bf00      	nop
 8001d36:	372c      	adds	r7, #44	; 0x2c
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	10320000 	.word	0x10320000
 8001d44:	10310000 	.word	0x10310000
 8001d48:	10220000 	.word	0x10220000
 8001d4c:	10210000 	.word	0x10210000
 8001d50:	10120000 	.word	0x10120000
 8001d54:	10110000 	.word	0x10110000
 8001d58:	40021000 	.word	0x40021000
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40010800 	.word	0x40010800
 8001d64:	40010c00 	.word	0x40010c00
 8001d68:	40011000 	.word	0x40011000
 8001d6c:	40010400 	.word	0x40010400

08001d70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	887b      	ldrh	r3, [r7, #2]
 8001d82:	4013      	ands	r3, r2
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d002      	beq.n	8001d8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e001      	b.n	8001d92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3714      	adds	r7, #20
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
 8001da6:	460b      	mov	r3, r1
 8001da8:	807b      	strh	r3, [r7, #2]
 8001daa:	4613      	mov	r3, r2
 8001dac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dae:	787b      	ldrb	r3, [r7, #1]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dba:	e003      	b.n	8001dc4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	041a      	lsls	r2, r3, #16
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	611a      	str	r2, [r3, #16]
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b085      	sub	sp, #20
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001de0:	887a      	ldrh	r2, [r7, #2]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	041a      	lsls	r2, r3, #16
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	43d9      	mvns	r1, r3
 8001dec:	887b      	ldrh	r3, [r7, #2]
 8001dee:	400b      	ands	r3, r1
 8001df0:	431a      	orrs	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
}
 8001df6:	bf00      	nop
 8001df8:	3714      	adds	r7, #20
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bc80      	pop	{r7}
 8001dfe:	4770      	bx	lr

08001e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b086      	sub	sp, #24
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e26c      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8087 	beq.w	8001f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e20:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f003 030c 	and.w	r3, r3, #12
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d00c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 030c 	and.w	r3, r3, #12
 8001e34:	2b08      	cmp	r3, #8
 8001e36:	d112      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
 8001e38:	4b8c      	ldr	r3, [pc, #560]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e44:	d10b      	bne.n	8001e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e46:	4b89      	ldr	r3, [pc, #548]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d06c      	beq.n	8001f2c <HAL_RCC_OscConfig+0x12c>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d168      	bne.n	8001f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e246      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x76>
 8001e68:	4b80      	ldr	r3, [pc, #512]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a7f      	ldr	r2, [pc, #508]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e02e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x98>
 8001e7e:	4b7b      	ldr	r3, [pc, #492]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7a      	ldr	r2, [pc, #488]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b78      	ldr	r3, [pc, #480]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a77      	ldr	r2, [pc, #476]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xbc>
 8001ea2:	4b72      	ldr	r3, [pc, #456]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a71      	ldr	r2, [pc, #452]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd4>
 8001ebc:	4b6b      	ldr	r3, [pc, #428]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a6a      	ldr	r2, [pc, #424]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b68      	ldr	r3, [pc, #416]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a67      	ldr	r2, [pc, #412]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7ff fcb6 	bl	800184c <HAL_GetTick>
 8001ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fcb2 	bl	800184c <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	; 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e1fa      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe4>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7ff fca2 	bl	800184c <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fc9e 	bl	800184c <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	; 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e1e6      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x10c>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d063      	beq.n	8002002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f3a:	4b4c      	ldr	r3, [pc, #304]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 030c 	and.w	r3, r3, #12
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00b      	beq.n	8001f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f003 030c 	and.w	r3, r3, #12
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d11c      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d116      	bne.n	8001f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5e:	4b43      	ldr	r3, [pc, #268]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d001      	beq.n	8001f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e1ba      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	695b      	ldr	r3, [r3, #20]
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4939      	ldr	r1, [pc, #228]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f8a:	e03a      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d020      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f94:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fc57 	bl	800184c <HAL_GetTick>
 8001f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	e008      	b.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa2:	f7ff fc53 	bl	800184c <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e19b      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb4:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0f0      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4927      	ldr	r1, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	600b      	str	r3, [r1, #0]
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fc36 	bl	800184c <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe4:	f7ff fc32 	bl	800184c <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e17a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d03a      	beq.n	8002084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d019      	beq.n	800204a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002016:	4b17      	ldr	r3, [pc, #92]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 8002018:	2201      	movs	r2, #1
 800201a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7ff fc16 	bl	800184c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002024:	f7ff fc12 	bl	800184c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e15a      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002036:	4b0d      	ldr	r3, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x26c>)
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002042:	2001      	movs	r0, #1
 8002044:	f000 fa9a 	bl	800257c <RCC_Delay>
 8002048:	e01c      	b.n	8002084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_RCC_OscConfig+0x274>)
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7ff fbfc 	bl	800184c <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002056:	e00f      	b.n	8002078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002058:	f7ff fbf8 	bl	800184c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d908      	bls.n	8002078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e140      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	42420000 	.word	0x42420000
 8002074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002078:	4b9e      	ldr	r3, [pc, #632]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e9      	bne.n	8002058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0304 	and.w	r3, r3, #4
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 80a6 	beq.w	80021de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002092:	2300      	movs	r3, #0
 8002094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002096:	4b97      	ldr	r3, [pc, #604]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10d      	bne.n	80020be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b94      	ldr	r3, [pc, #592]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a93      	ldr	r2, [pc, #588]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b91      	ldr	r3, [pc, #580]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	60bb      	str	r3, [r7, #8]
 80020b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020be:	4b8e      	ldr	r3, [pc, #568]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d118      	bne.n	80020fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ca:	4b8b      	ldr	r3, [pc, #556]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a8a      	ldr	r2, [pc, #552]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020d6:	f7ff fbb9 	bl	800184c <HAL_GetTick>
 80020da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020de:	f7ff fbb5 	bl	800184c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b64      	cmp	r3, #100	; 0x64
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0fd      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f0:	4b81      	ldr	r3, [pc, #516]	; (80022f8 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d0f0      	beq.n	80020de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <HAL_RCC_OscConfig+0x312>
 8002104:	4b7b      	ldr	r3, [pc, #492]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a7a      	ldr	r2, [pc, #488]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e02d      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d10c      	bne.n	8002134 <HAL_RCC_OscConfig+0x334>
 800211a:	4b76      	ldr	r3, [pc, #472]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	4a75      	ldr	r2, [pc, #468]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002120:	f023 0301 	bic.w	r3, r3, #1
 8002124:	6213      	str	r3, [r2, #32]
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	4a72      	ldr	r2, [pc, #456]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	6213      	str	r3, [r2, #32]
 8002132:	e01c      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	2b05      	cmp	r3, #5
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_OscConfig+0x356>
 800213c:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a6c      	ldr	r2, [pc, #432]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002142:	f043 0304 	orr.w	r3, r3, #4
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4b6a      	ldr	r3, [pc, #424]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a69      	ldr	r2, [pc, #420]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6213      	str	r3, [r2, #32]
 8002154:	e00b      	b.n	800216e <HAL_RCC_OscConfig+0x36e>
 8002156:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a66      	ldr	r2, [pc, #408]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b64      	ldr	r3, [pc, #400]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a63      	ldr	r2, [pc, #396]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d015      	beq.n	80021a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002176:	f7ff fb69 	bl	800184c <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800217c:	e00a      	b.n	8002194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217e:	f7ff fb65 	bl	800184c <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	f241 3288 	movw	r2, #5000	; 0x1388
 800218c:	4293      	cmp	r3, r2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e0ab      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002194:	4b57      	ldr	r3, [pc, #348]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0ee      	beq.n	800217e <HAL_RCC_OscConfig+0x37e>
 80021a0:	e014      	b.n	80021cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a2:	f7ff fb53 	bl	800184c <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a8:	e00a      	b.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021aa:	f7ff fb4f 	bl	800184c <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e095      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021c0:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ee      	bne.n	80021aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021d2:	4b48      	ldr	r3, [pc, #288]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4a47      	ldr	r2, [pc, #284]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 8081 	beq.w	80022ea <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e8:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d061      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69db      	ldr	r3, [r3, #28]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d146      	bne.n	800228a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021fc:	4b3f      	ldr	r3, [pc, #252]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002202:	f7ff fb23 	bl	800184c <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800220a:	f7ff fb1f 	bl	800184c <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e067      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d1f0      	bne.n	800220a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002230:	d108      	bne.n	8002244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	492d      	ldr	r1, [pc, #180]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002244:	4b2b      	ldr	r3, [pc, #172]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a19      	ldr	r1, [r3, #32]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	430b      	orrs	r3, r1
 8002256:	4927      	ldr	r1, [pc, #156]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800225c:	4b27      	ldr	r3, [pc, #156]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800225e:	2201      	movs	r2, #1
 8002260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002262:	f7ff faf3 	bl	800184c <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800226a:	f7ff faef 	bl	800184c <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e037      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800227c:	4b1d      	ldr	r3, [pc, #116]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d0f0      	beq.n	800226a <HAL_RCC_OscConfig+0x46a>
 8002288:	e02f      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <HAL_RCC_OscConfig+0x4fc>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fadc 	bl	800184c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002298:	f7ff fad8 	bl	800184c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e020      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x498>
 80022b6:	e018      	b.n	80022ea <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e013      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d106      	bne.n	80022e6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e000      	b.n	80022ec <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	40021000 	.word	0x40021000
 80022f8:	40007000 	.word	0x40007000
 80022fc:	42420060 	.word	0x42420060

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0d0      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b6a      	ldr	r3, [pc, #424]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d910      	bls.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b67      	ldr	r3, [pc, #412]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f023 0207 	bic.w	r2, r3, #7
 800232a:	4965      	ldr	r1, [pc, #404]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	4313      	orrs	r3, r2
 8002330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002332:	4b63      	ldr	r3, [pc, #396]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e0b8      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d005      	beq.n	8002368 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800235c:	4b59      	ldr	r3, [pc, #356]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	4a58      	ldr	r2, [pc, #352]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002366:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0308 	and.w	r3, r3, #8
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002374:	4b53      	ldr	r3, [pc, #332]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a52      	ldr	r2, [pc, #328]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800237e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b50      	ldr	r3, [pc, #320]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	494d      	ldr	r1, [pc, #308]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d040      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	4b47      	ldr	r3, [pc, #284]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d115      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e07f      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b41      	ldr	r3, [pc, #260]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e073      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3d      	ldr	r3, [pc, #244]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06b      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b39      	ldr	r3, [pc, #228]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4936      	ldr	r1, [pc, #216]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7ff fa2c 	bl	800184c <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7ff fa28 	bl	800184c <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e053      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2d      	ldr	r3, [pc, #180]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b27      	ldr	r3, [pc, #156]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0307 	and.w	r3, r3, #7
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d210      	bcs.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b24      	ldr	r3, [pc, #144]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0207 	bic.w	r2, r3, #7
 8002436:	4922      	ldr	r1, [pc, #136]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	4313      	orrs	r3, r2
 800243c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800243e:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0307 	and.w	r3, r3, #7
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d001      	beq.n	8002450 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e032      	b.n	80024b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800245c:	4b19      	ldr	r3, [pc, #100]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4916      	ldr	r1, [pc, #88]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d009      	beq.n	800248e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	490e      	ldr	r1, [pc, #56]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248e:	f000 f821 	bl	80024d4 <HAL_RCC_GetSysClockFreq>
 8002492:	4602      	mov	r2, r0
 8002494:	4b0b      	ldr	r3, [pc, #44]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a0:	5ccb      	ldrb	r3, [r1, r3]
 80024a2:	fa22 f303 	lsr.w	r3, r2, r3
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_RCC_ClockConfig+0x1cc>)
 80024a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_RCC_ClockConfig+0x1d0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff f98a 	bl	80017c8 <HAL_InitTick>

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40022000 	.word	0x40022000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	08002df8 	.word	0x08002df8
 80024cc:	20000060 	.word	0x20000060
 80024d0:	20000064 	.word	0x20000064

080024d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b087      	sub	sp, #28
 80024d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	2300      	movs	r3, #0
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	2300      	movs	r3, #0
 80024e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d002      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x30>
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d003      	beq.n	800250a <HAL_RCC_GetSysClockFreq+0x36>
 8002502:	e027      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002506:	613b      	str	r3, [r7, #16]
      break;
 8002508:	e027      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	0c9b      	lsrs	r3, r3, #18
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	4a17      	ldr	r2, [pc, #92]	; (8002570 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d010      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002522:	4b11      	ldr	r3, [pc, #68]	; (8002568 <HAL_RCC_GetSysClockFreq+0x94>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	0c5b      	lsrs	r3, r3, #17
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_RCC_GetSysClockFreq+0xa0>)
 800252e:	5cd3      	ldrb	r3, [r2, r3]
 8002530:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a0d      	ldr	r2, [pc, #52]	; (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002536:	fb02 f203 	mul.w	r2, r2, r3
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	e004      	b.n	800254e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002548:	fb02 f303 	mul.w	r3, r2, r3
 800254c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	613b      	str	r3, [r7, #16]
      break;
 8002552:	e002      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800255a:	693b      	ldr	r3, [r7, #16]
}
 800255c:	4618      	mov	r0, r3
 800255e:	371c      	adds	r7, #28
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40021000 	.word	0x40021000
 800256c:	007a1200 	.word	0x007a1200
 8002570:	08002e08 	.word	0x08002e08
 8002574:	08002e18 	.word	0x08002e18
 8002578:	003d0900 	.word	0x003d0900

0800257c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002584:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <RCC_Delay+0x34>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a0a      	ldr	r2, [pc, #40]	; (80025b4 <RCC_Delay+0x38>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	0a5b      	lsrs	r3, r3, #9
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002598:	bf00      	nop
  }
  while (Delay --);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e5a      	subs	r2, r3, #1
 800259e:	60fa      	str	r2, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f9      	bne.n	8002598 <RCC_Delay+0x1c>
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	20000060 	.word	0x20000060
 80025b4:	10624dd3 	.word	0x10624dd3

080025b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e041      	b.n	800264e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff f85a 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2202      	movs	r2, #2
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	3304      	adds	r3, #4
 80025f4:	4619      	mov	r1, r3
 80025f6:	4610      	mov	r0, r2
 80025f8:	f000 fa6e 	bl	8002ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
	...

08002658 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b01      	cmp	r3, #1
 800266a:	d001      	beq.n	8002670 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e035      	b.n	80026dc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	; (80026e8 <HAL_TIM_Base_Start_IT+0x90>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d009      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x4e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800269a:	d004      	beq.n	80026a6 <HAL_TIM_Base_Start_IT+0x4e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a12      	ldr	r2, [pc, #72]	; (80026ec <HAL_TIM_Base_Start_IT+0x94>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d111      	bne.n	80026ca <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b06      	cmp	r3, #6
 80026b6:	d010      	beq.n	80026da <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f042 0201 	orr.w	r2, r2, #1
 80026c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c8:	e007      	b.n	80026da <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bc80      	pop	{r7}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40000400 	.word	0x40000400

080026f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b02      	cmp	r3, #2
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b02      	cmp	r3, #2
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0202 	mvn.w	r2, #2
 800271c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0303 	and.w	r3, r3, #3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f9b4 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f9a7 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f9b6 	bl	8002ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d122      	bne.n	80027a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b04      	cmp	r3, #4
 8002766:	d11b      	bne.n	80027a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0204 	mvn.w	r2, #4
 8002770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2202      	movs	r2, #2
 8002776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f98a 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 800278c:	e005      	b.n	800279a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f97d 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f000 f98c 	bl	8002ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d122      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f003 0308 	and.w	r3, r3, #8
 80027b8:	2b08      	cmp	r3, #8
 80027ba:	d11b      	bne.n	80027f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0208 	mvn.w	r2, #8
 80027c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2204      	movs	r2, #4
 80027ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f960 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 80027e0:	e005      	b.n	80027ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f953 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f962 	bl	8002ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0310 	and.w	r3, r3, #16
 80027fe:	2b10      	cmp	r3, #16
 8002800:	d122      	bne.n	8002848 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b10      	cmp	r3, #16
 800280e:	d11b      	bne.n	8002848 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0210 	mvn.w	r2, #16
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2208      	movs	r2, #8
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f936 	bl	8002aa0 <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f929 	bl	8002a8e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f938 	bl	8002ab2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0201 	mvn.w	r2, #1
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7fe fe14 	bl	800149c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800287e:	2b80      	cmp	r3, #128	; 0x80
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288c:	2b80      	cmp	r3, #128	; 0x80
 800288e:	d107      	bne.n	80028a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa6b 	bl	8002d76 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028aa:	2b40      	cmp	r3, #64	; 0x40
 80028ac:	d10e      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b8:	2b40      	cmp	r3, #64	; 0x40
 80028ba:	d107      	bne.n	80028cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f8fc 	bl	8002ac4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	691b      	ldr	r3, [r3, #16]
 80028d2:	f003 0320 	and.w	r3, r3, #32
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d10e      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0320 	and.w	r3, r3, #32
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d107      	bne.n	80028f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f06f 0220 	mvn.w	r2, #32
 80028f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa36 	bl	8002d64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028f8:	bf00      	nop
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_TIM_ConfigClockSource+0x1c>
 8002918:	2302      	movs	r3, #2
 800291a:	e0b4      	b.n	8002a86 <HAL_TIM_ConfigClockSource+0x186>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800293a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002942:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002954:	d03e      	beq.n	80029d4 <HAL_TIM_ConfigClockSource+0xd4>
 8002956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800295a:	f200 8087 	bhi.w	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800295e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002962:	f000 8086 	beq.w	8002a72 <HAL_TIM_ConfigClockSource+0x172>
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800296a:	d87f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800296c:	2b70      	cmp	r3, #112	; 0x70
 800296e:	d01a      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0xa6>
 8002970:	2b70      	cmp	r3, #112	; 0x70
 8002972:	d87b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002974:	2b60      	cmp	r3, #96	; 0x60
 8002976:	d050      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x11a>
 8002978:	2b60      	cmp	r3, #96	; 0x60
 800297a:	d877      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800297c:	2b50      	cmp	r3, #80	; 0x50
 800297e:	d03c      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0xfa>
 8002980:	2b50      	cmp	r3, #80	; 0x50
 8002982:	d873      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002984:	2b40      	cmp	r3, #64	; 0x40
 8002986:	d058      	beq.n	8002a3a <HAL_TIM_ConfigClockSource+0x13a>
 8002988:	2b40      	cmp	r3, #64	; 0x40
 800298a:	d86f      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800298c:	2b30      	cmp	r3, #48	; 0x30
 800298e:	d064      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002990:	2b30      	cmp	r3, #48	; 0x30
 8002992:	d86b      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 8002994:	2b20      	cmp	r3, #32
 8002996:	d060      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 8002998:	2b20      	cmp	r3, #32
 800299a:	d867      	bhi.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d05c      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d05a      	beq.n	8002a5a <HAL_TIM_ConfigClockSource+0x15a>
 80029a4:	e062      	b.n	8002a6c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6899      	ldr	r1, [r3, #8]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f000 f95e 	bl	8002c76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	609a      	str	r2, [r3, #8]
      break;
 80029d2:	e04f      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	6899      	ldr	r1, [r3, #8]
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685a      	ldr	r2, [r3, #4]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f000 f947 	bl	8002c76 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	689a      	ldr	r2, [r3, #8]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029f6:	609a      	str	r2, [r3, #8]
      break;
 80029f8:	e03c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 f8be 	bl	8002b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2150      	movs	r1, #80	; 0x50
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f915 	bl	8002c42 <TIM_ITRx_SetConfig>
      break;
 8002a18:	e02c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6818      	ldr	r0, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6859      	ldr	r1, [r3, #4]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f000 f8dc 	bl	8002be4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2160      	movs	r1, #96	; 0x60
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 f905 	bl	8002c42 <TIM_ITRx_SetConfig>
      break;
 8002a38:	e01c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6818      	ldr	r0, [r3, #0]
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	6859      	ldr	r1, [r3, #4]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	461a      	mov	r2, r3
 8002a48:	f000 f89e 	bl	8002b88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2140      	movs	r1, #64	; 0x40
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 f8f5 	bl	8002c42 <TIM_ITRx_SetConfig>
      break;
 8002a58:	e00c      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4619      	mov	r1, r3
 8002a64:	4610      	mov	r0, r2
 8002a66:	f000 f8ec 	bl	8002c42 <TIM_ITRx_SetConfig>
      break;
 8002a6a:	e003      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a70:	e000      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a72:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr

08002ab2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b083      	sub	sp, #12
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr
	...

08002ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a25      	ldr	r2, [pc, #148]	; (8002b80 <TIM_Base_SetConfig+0xa8>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d007      	beq.n	8002b00 <TIM_Base_SetConfig+0x28>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af6:	d003      	beq.n	8002b00 <TIM_Base_SetConfig+0x28>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a22      	ldr	r2, [pc, #136]	; (8002b84 <TIM_Base_SetConfig+0xac>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d108      	bne.n	8002b12 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1a      	ldr	r2, [pc, #104]	; (8002b80 <TIM_Base_SetConfig+0xa8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d007      	beq.n	8002b2a <TIM_Base_SetConfig+0x52>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b20:	d003      	beq.n	8002b2a <TIM_Base_SetConfig+0x52>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a17      	ldr	r2, [pc, #92]	; (8002b84 <TIM_Base_SetConfig+0xac>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d108      	bne.n	8002b3c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <TIM_Base_SetConfig+0xa8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]
}
 8002b76:	bf00      	nop
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400

08002b88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b087      	sub	sp, #28
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	f023 0201 	bic.w	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	011b      	lsls	r3, r3, #4
 8002bb8:	693a      	ldr	r2, [r7, #16]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 030a 	bic.w	r3, r3, #10
 8002bc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bc6:	697a      	ldr	r2, [r7, #20]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f023 0210 	bic.w	r2, r3, #16
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	031b      	lsls	r3, r3, #12
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002c20:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	697a      	ldr	r2, [r7, #20]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	693a      	ldr	r2, [r7, #16]
 8002c30:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	621a      	str	r2, [r3, #32]
}
 8002c38:	bf00      	nop
 8002c3a:	371c      	adds	r7, #28
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr

08002c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b085      	sub	sp, #20
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f043 0307 	orr.w	r3, r3, #7
 8002c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	609a      	str	r2, [r3, #8]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr

08002c76 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
 8002c82:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c90:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	021a      	lsls	r2, r3, #8
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	431a      	orrs	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	371c      	adds	r7, #28
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e041      	b.n	8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a14      	ldr	r2, [pc, #80]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d009      	beq.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d004      	beq.n	8002d24 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a10      	ldr	r2, [pc, #64]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10c      	bne.n	8002d3e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40000400 	.word	0x40000400

08002d64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bc80      	pop	{r7}
 8002d74:	4770      	bx	lr

08002d76 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d7e:	bf00      	nop
 8002d80:	370c      	adds	r7, #12
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr

08002d88 <__libc_init_array>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	2600      	movs	r6, #0
 8002d8c:	4d0c      	ldr	r5, [pc, #48]	; (8002dc0 <__libc_init_array+0x38>)
 8002d8e:	4c0d      	ldr	r4, [pc, #52]	; (8002dc4 <__libc_init_array+0x3c>)
 8002d90:	1b64      	subs	r4, r4, r5
 8002d92:	10a4      	asrs	r4, r4, #2
 8002d94:	42a6      	cmp	r6, r4
 8002d96:	d109      	bne.n	8002dac <__libc_init_array+0x24>
 8002d98:	f000 f822 	bl	8002de0 <_init>
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	4d0a      	ldr	r5, [pc, #40]	; (8002dc8 <__libc_init_array+0x40>)
 8002da0:	4c0a      	ldr	r4, [pc, #40]	; (8002dcc <__libc_init_array+0x44>)
 8002da2:	1b64      	subs	r4, r4, r5
 8002da4:	10a4      	asrs	r4, r4, #2
 8002da6:	42a6      	cmp	r6, r4
 8002da8:	d105      	bne.n	8002db6 <__libc_init_array+0x2e>
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db0:	4798      	blx	r3
 8002db2:	3601      	adds	r6, #1
 8002db4:	e7ee      	b.n	8002d94 <__libc_init_array+0xc>
 8002db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dba:	4798      	blx	r3
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	e7f2      	b.n	8002da6 <__libc_init_array+0x1e>
 8002dc0:	08002e1c 	.word	0x08002e1c
 8002dc4:	08002e1c 	.word	0x08002e1c
 8002dc8:	08002e1c 	.word	0x08002e1c
 8002dcc:	08002e20 	.word	0x08002e20

08002dd0 <memset>:
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	4402      	add	r2, r0
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d100      	bne.n	8002dda <memset+0xa>
 8002dd8:	4770      	bx	lr
 8002dda:	f803 1b01 	strb.w	r1, [r3], #1
 8002dde:	e7f9      	b.n	8002dd4 <memset+0x4>

08002de0 <_init>:
 8002de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de2:	bf00      	nop
 8002de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de6:	bc08      	pop	{r3}
 8002de8:	469e      	mov	lr, r3
 8002dea:	4770      	bx	lr

08002dec <_fini>:
 8002dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dee:	bf00      	nop
 8002df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002df2:	bc08      	pop	{r3}
 8002df4:	469e      	mov	lr, r3
 8002df6:	4770      	bx	lr
